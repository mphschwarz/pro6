
flash_demo.elf:     file format elf32-littlenios2
flash_demo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00004c34 memsz 0x00004c34 flags r-x
    LOAD off    0x00005c54 vaddr 0x0000cc54 paddr 0x0000cf28 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x000061fc vaddr 0x0000d1fc paddr 0x0000d1fc align 2**12
         filesz 0x00000000 memsz 0x00000050 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00005f28  2**0
                  CONTENTS
  2 .text         000048d0  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000364  0000c8f0  0000c8f0  000058f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  0000cc54  0000cf28  00005c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000050  0000d1fc  0000d1fc  000061fc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000d24c  0000d24c  00005f28  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005f28  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005a0  00000000  00000000  00005f50  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000089a1  00000000  00000000  000064f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002b33  00000000  00000000  0000ee91  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003572  00000000  00000000  000119c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d24  00000000  00000000  00014f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000019e1  00000000  00000000  00015c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000170f  00000000  00000000  0001763d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00018d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000270  00000000  00000000  00018d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001aa2a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001aa2d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001aa39  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001aa3a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001aa3b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001aa3f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001aa43  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001aa47  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001aa52  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001aa5d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0001aa68  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  0001aa73  2**0
                  CONTENTS, READONLY
 29 .jdi          00004247  00000000  00000000  0001aa9f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000544e3  00000000  00000000  0001ece6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000c8f0 l    d  .rodata	00000000 .rodata
0000cc54 l    d  .rwdata	00000000 .rwdata
0000d1fc l    d  .bss	00000000 .bss
0000d24c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../flash_demo_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 Nor_Flash.c
00000000 l    df *ABS*	00000000 WB_Gneiss_Sample_Code_LLD.c
00000000 l    df *ABS*	00000000 WB_Secureic.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000ad00 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000cc54 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
0000b64c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
0000b7a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b8e0 l     F .text	00000034 alt_dev_reg
0000cd34 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_close.c
0000bdc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000bef8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000bf24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c024 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000c184 l     F .text	0000003c alt_get_errno
0000c1c0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000a11c g     F .text	00000590 sha256_transform
0000ac34 g     F .text	0000001c putchar
0000b738 g     F .text	0000006c alt_main
0000ac50 g     F .text	00000080 _puts_r
0000cf28 g       *ABS*	00000000 __flash_rwdata_start
0000abe0 g     F .text	0000004c printf
000080c4 g     F .text	00000068 Nor_Write_Enable
0000956c g     F .text	00000210 WB_RPMC_IncCounter
00008484 g     F .text	00000418 Nor_Page_Program_Number
0000c48c g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000993c g     F .text	000000bc sha256_init
0000d200 g     O .bss	00000004 errno
0000d208 g     O .bss	00000004 alt_argv
00014f08 g       *ABS*	00000000 _gp
0000cd88 g     O .rwdata	00000180 alt_fd_list
0000ac2c g     F .text	00000008 _putchar_r
0000c4b0 g     F .text	00000090 alt_find_dev
0000ab5c g     F .text	00000028 memcpy
0000a6ac g     F .text	000001bc hmacsha256
0000c108 g     F .text	0000007c alt_io_redirect
0000acd0 g     F .text	00000014 puts
0000ba48 g     F .text	000000ec altera_avalon_jtag_uart_read
0000aba4 g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000b568 g     F .text	00000064 .hidden __udivsi3
0000d210 g     O .bss	0000000c tag
0000cf20 g     O .rwdata	00000004 alt_max_fd
0000cf08 g     O .rwdata	00000004 _global_impure_ptr
0000d24c g       *ABS*	00000000 __bss_end
0000d21c g     O .bss	00000020 signature
0000d23c g     O .bss	00000010 message
0000cd60 g     O .rwdata	00000028 alt_dev_null
0000bed8 g     F .text	00000020 alt_dcache_flush_all
0000cf28 g       *ABS*	00000000 __ram_rwdata_end
0000889c g     F .text	00000330 Nor_Read_Data
0000cf18 g     O .rwdata	00000008 alt_dev_list
0000b7e0 g     F .text	00000100 write
0000b3c0 g     F .text	00000058 _putc_r
0000cc54 g       *ABS*	00000000 __ram_rodata_end
0000b5cc g     F .text	00000058 .hidden __umodsi3
0000d24c g       *ABS*	00000000 end
0000e800 g       *ABS*	00000000 __alt_stack_pointer
0000977c g     F .text	00000168 WB_RPMC_Challenge
0000bb34 g     F .text	00000094 altera_avalon_jtag_uart_write
0000ad6c g     F .text	0000052c ___vfprintf_internal_r
0000c72c g     F .text	00000190 __call_exitprocs
00008020 g     F .text	0000003c _start
0000bbc8 g     F .text	000001fc alt_avalon_spi_command
0000b94c g     F .text	0000003c alt_sys_init
0000b624 g     F .text	00000028 .hidden __mulsi3
0000cc54 g       *ABS*	00000000 __ram_rwdata_start
0000c8f0 g       *ABS*	00000000 __ram_rodata_start
0000b988 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000c648 g     F .text	000000c4 alt_get_fd
0000934c g     F .text	00000220 WB_RPMC_UpHMACkey
0000ab2c g     F .text	00000030 memcmp
0000d24c g       *ABS*	00000000 __alt_stack_base
00008c78 g     F .text	00000054 WB_RPMC_ReadCounterData
0000d1fc g     O .bss	00000004 counter
0000c540 g     F .text	00000108 alt_find_file
0000bf60 g     F .text	000000a4 alt_dev_llist_insert
00008bcc g     F .text	000000ac Nor_JEDEC
0000b2b4 g     F .text	000000b8 __sfvwrite_small_dev
0000d1fc g       *ABS*	00000000 __bss_start
0000ab84 g     F .text	00000020 memset
0000a868 g     F .text	000002c4 main
0000d20c g     O .bss	00000004 alt_envp
0000b9e8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00008ccc g     F .text	0000026c WB_RPMC_ReadRPMCstatus
0000cf24 g     O .rwdata	00000004 alt_errno
0000b36c g     F .text	00000054 putc
0000b470 g     F .text	00000084 .hidden __divsi3
0000c8f0 g       *ABS*	00000000 __flash_rodata_start
0000915c g     F .text	000001f0 WB_RPMC_WrRootKey
0000b914 g     F .text	00000038 alt_irq_init
0000c408 g     F .text	00000084 alt_release_fd
0000b418 g     F .text	00000058 _write_r
000099f8 g     F .text	000000ec sha256_update
0000cf0c g     O .rwdata	00000004 _impure_ptr
0000d204 g     O .bss	00000004 alt_argc
0000812c g     F .text	00000358 Nor_Erase
00008f38 g     F .text	00000224 WB_RPMC_ReqCounter
0000cf10 g     O .rwdata	00000008 alt_fs_list
000098e4 g     F .text	00000058 sha256
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000cf28 g       *ABS*	00000000 _edata
0000d24c g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000c70c g     F .text	00000020 exit
0000b4f4 g     F .text	00000074 .hidden __modsi3
0000e800 g       *ABS*	00000000 __alt_data_end
0000805c g     F .text	00000068 Nor_BusyCheck
00009ae4 g     F .text	00000638 sha256_final
0000c8bc g     F .text	00000034 _exit
0000ace4 g     F .text	0000001c strlen
0000c2ac g     F .text	0000015c open
0000c004 g     F .text	00000020 alt_icache_flush_all
0000b298 g     F .text	0000001c __vfprintf_internal
0000be00 g     F .text	000000d8 close
0000b6b4 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	defa0014 	ori	sp,sp,59392
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d693c214 	ori	gp,gp,20232
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10b47f14 	ori	r2,r2,53756

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18f49314 	ori	r3,r3,53836

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff313c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	000b6b40 	call	b6b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	000b7380 	call	b738 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff3150>

0000805c <Nor_BusyCheck>:
 *      Author: YAChen1
 */
#include "Nor_Flash.h"

alt_u8 Nor_BusyCheck()
{
    805c:	defffa04 	addi	sp,sp,-24
    8060:	dfc00515 	stw	ra,20(sp)
    8064:	df000415 	stw	fp,16(sp)
    8068:	df000404 	addi	fp,sp,16
	alt_u8 Send_Buff[1] ={0x00};
    806c:	e03fff05 	stb	zero,-4(fp)
	alt_u8 Get_Buff[1] = {0x00};
    8070:	e03fff45 	stb	zero,-3(fp)
    Send_Buff[0] = Nor_INS_Read_Status_Register_1;  //Status Register-1 : 05h
    8074:	00800144 	movi	r2,5
    8078:	e0bfff05 	stb	r2,-4(fp)
    alt_avalon_spi_command(SPI_0_BASE, 0, 1, Send_Buff, 1, Get_Buff, 0);
    807c:	d8000215 	stw	zero,8(sp)
    8080:	e0bfff44 	addi	r2,fp,-3
    8084:	d8800115 	stw	r2,4(sp)
    8088:	00800044 	movi	r2,1
    808c:	d8800015 	stw	r2,0(sp)
    8090:	e1ffff04 	addi	r7,fp,-4
    8094:	01800044 	movi	r6,1
    8098:	000b883a 	mov	r5,zero
    809c:	01000074 	movhi	r4,1
    80a0:	21040004 	addi	r4,r4,4096
    80a4:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
	//printf("%d\n",Status_Data);
    return (Get_Buff[0]&0x01);
    80a8:	e0bfff43 	ldbu	r2,-3(fp)
    80ac:	1080004c 	andi	r2,r2,1
}
    80b0:	e037883a 	mov	sp,fp
    80b4:	dfc00117 	ldw	ra,4(sp)
    80b8:	df000017 	ldw	fp,0(sp)
    80bc:	dec00204 	addi	sp,sp,8
    80c0:	f800283a 	ret

000080c4 <Nor_Write_Enable>:

void Nor_Write_Enable()
{
    80c4:	defffa04 	addi	sp,sp,-24
    80c8:	dfc00515 	stw	ra,20(sp)
    80cc:	df000415 	stw	fp,16(sp)
    80d0:	df000404 	addi	fp,sp,16
	alt_u8 Send_Buff[1]={0xFF};
    80d4:	00bfffc4 	movi	r2,-1
    80d8:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 Get_Buff[1]={0xFF};
    80dc:	00bfffc4 	movi	r2,-1
    80e0:	e0bfff45 	stb	r2,-3(fp)
	//printf("---Write Enable!--- \n");
    Send_Buff[0] = Nor_INS_Write_Enable;  //Write enable 06h.
    80e4:	00800184 	movi	r2,6
    80e8:	e0bfff05 	stb	r2,-4(fp)
    alt_avalon_spi_command(SPI_0_BASE, 0, 1, Send_Buff, 0, Get_Buff, 0);
    80ec:	d8000215 	stw	zero,8(sp)
    80f0:	e0bfff44 	addi	r2,fp,-3
    80f4:	d8800115 	stw	r2,4(sp)
    80f8:	d8000015 	stw	zero,0(sp)
    80fc:	e1ffff04 	addi	r7,fp,-4
    8100:	01800044 	movi	r6,1
    8104:	000b883a 	mov	r5,zero
    8108:	01000074 	movhi	r4,1
    810c:	21040004 	addi	r4,r4,4096
    8110:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
    //printf("---Write Enable is done!--- \n");
}
    8114:	0001883a 	nop
    8118:	e037883a 	mov	sp,fp
    811c:	dfc00117 	ldw	ra,4(sp)
    8120:	df000017 	ldw	fp,0(sp)
    8124:	dec00204 	addi	sp,sp,8
    8128:	f800283a 	ret

0000812c <Nor_Erase>:

void Nor_Erase(unsigned long Address,unsigned char Mode,unsigned char Byte_Mode)
{
    812c:	defff404 	addi	sp,sp,-48
    8130:	dfc00b15 	stw	ra,44(sp)
    8134:	df000a15 	stw	fp,40(sp)
    8138:	df000a04 	addi	fp,sp,40
    813c:	e13ffd15 	stw	r4,-12(fp)
    8140:	2807883a 	mov	r3,r5
    8144:	3005883a 	mov	r2,r6
    8148:	e0fffe05 	stb	r3,-8(fp)
    814c:	e0bfff05 	stb	r2,-4(fp)
	//Erase
	//IN : Address ,Mode(0:4KB,1:32KB,2:64KB,3:whole),Byte_Mode(0:3Byte,1:4Byte)
	//OUT: ES Timecost
	alt_u8 add[4]={0};
    8150:	e03ff915 	stw	zero,-28(fp)
    alt_u8 Send_Buff[5];
    alt_u8 Get_Buff[5];

    memset(Send_Buff, 0xFF, sizeof(Send_Buff));
    8154:	e0bffa04 	addi	r2,fp,-24
    8158:	01800144 	movi	r6,5
    815c:	01403fc4 	movi	r5,255
    8160:	1009883a 	mov	r4,r2
    8164:	000ab840 	call	ab84 <memset>
    memset(Get_Buff, 0xFF, sizeof(Get_Buff));
    8168:	e0bffb44 	addi	r2,fp,-19
    816c:	01800144 	movi	r6,5
    8170:	01403fc4 	movi	r5,255
    8174:	1009883a 	mov	r4,r2
    8178:	000ab840 	call	ab84 <memset>
    add[0]=Address%256;
    817c:	e0bffd17 	ldw	r2,-12(fp)
    8180:	e0bff905 	stb	r2,-28(fp)
	add[1]=(Address>>8)%256;
    8184:	e0bffd17 	ldw	r2,-12(fp)
    8188:	1004d23a 	srli	r2,r2,8
    818c:	e0bff945 	stb	r2,-27(fp)
	add[2]=(Address>>16)%256;
    8190:	e0bffd17 	ldw	r2,-12(fp)
    8194:	1004d43a 	srli	r2,r2,16
    8198:	e0bff985 	stb	r2,-26(fp)
	add[3]=(Address>>24)%256;
    819c:	e0bffd17 	ldw	r2,-12(fp)
    81a0:	1004d63a 	srli	r2,r2,24
    81a4:	e0bff9c5 	stb	r2,-25(fp)

    switch(Mode){
    81a8:	e0bffe03 	ldbu	r2,-8(fp)
    81ac:	10c00060 	cmpeqi	r3,r2,1
    81b0:	18003a1e 	bne	r3,zero,829c <Nor_Erase+0x170>
    81b4:	10c00088 	cmpgei	r3,r2,2
    81b8:	1800021e 	bne	r3,zero,81c4 <Nor_Erase+0x98>
    81bc:	10000626 	beq	r2,zero,81d8 <Nor_Erase+0xac>
    81c0:	0000a606 	br	845c <Nor_Erase+0x330>
    81c4:	10c000a0 	cmpeqi	r3,r2,2
    81c8:	1800651e 	bne	r3,zero,8360 <Nor_Erase+0x234>
    81cc:	108000e0 	cmpeqi	r2,r2,3
    81d0:	1000941e 	bne	r2,zero,8424 <Nor_Erase+0x2f8>
    81d4:	0000a106 	br	845c <Nor_Erase+0x330>
		case 0:    //4KB erase
			Send_Buff[0]=Nor_INS_Sector_Erase_4KB;
    81d8:	00800804 	movi	r2,32
    81dc:	e0bffa05 	stb	r2,-24(fp)
			if(Byte_Mode==0){
    81e0:	e0bfff03 	ldbu	r2,-4(fp)
    81e4:	1000121e 	bne	r2,zero,8230 <Nor_Erase+0x104>
				Send_Buff[1] = add[2];Send_Buff[2] = add[1];Send_Buff[3] = add[0];  //MSB first
    81e8:	e0bff983 	ldbu	r2,-26(fp)
    81ec:	e0bffa45 	stb	r2,-23(fp)
    81f0:	e0bff943 	ldbu	r2,-27(fp)
    81f4:	e0bffa85 	stb	r2,-22(fp)
    81f8:	e0bff903 	ldbu	r2,-28(fp)
    81fc:	e0bffac5 	stb	r2,-21(fp)
				alt_avalon_spi_command(SPI_0_BASE, 0, 4, Send_Buff, 0, Get_Buff, 0); //Send_Buff is 4Byte.
    8200:	e0fffa04 	addi	r3,fp,-24
    8204:	d8000215 	stw	zero,8(sp)
    8208:	e0bffb44 	addi	r2,fp,-19
    820c:	d8800115 	stw	r2,4(sp)
    8210:	d8000015 	stw	zero,0(sp)
    8214:	180f883a 	mov	r7,r3
    8218:	01800104 	movi	r6,4
    821c:	000b883a 	mov	r5,zero
    8220:	01000074 	movhi	r4,1
    8224:	21040004 	addi	r4,r4,4096
    8228:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
				alt_avalon_spi_command(SPI_0_BASE, 0, 5, Send_Buff, 0, Get_Buff, 0);        //Send_Buff is 5Byte.
			}
			else {
				printf("ES,Byte_Mode ERROR.\n");
			}
		break;
    822c:	00008f06 	br	846c <Nor_Erase+0x340>
			Send_Buff[0]=Nor_INS_Sector_Erase_4KB;
			if(Byte_Mode==0){
				Send_Buff[1] = add[2];Send_Buff[2] = add[1];Send_Buff[3] = add[0];  //MSB first
				alt_avalon_spi_command(SPI_0_BASE, 0, 4, Send_Buff, 0, Get_Buff, 0); //Send_Buff is 4Byte.
			}
			else if(Byte_Mode==1){
    8230:	e0bfff03 	ldbu	r2,-4(fp)
    8234:	10800058 	cmpnei	r2,r2,1
    8238:	1000141e 	bne	r2,zero,828c <Nor_Erase+0x160>
				Send_Buff[1] = add[3];Send_Buff[2] = add[2];Send_Buff[3] = add[1];Send_Buff[4] = add[0];  //MSB first
    823c:	e0bff9c3 	ldbu	r2,-25(fp)
    8240:	e0bffa45 	stb	r2,-23(fp)
    8244:	e0bff983 	ldbu	r2,-26(fp)
    8248:	e0bffa85 	stb	r2,-22(fp)
    824c:	e0bff943 	ldbu	r2,-27(fp)
    8250:	e0bffac5 	stb	r2,-21(fp)
    8254:	e0bff903 	ldbu	r2,-28(fp)
    8258:	e0bffb05 	stb	r2,-20(fp)
				alt_avalon_spi_command(SPI_0_BASE, 0, 5, Send_Buff, 0, Get_Buff, 0);        //Send_Buff is 5Byte.
    825c:	e0fffa04 	addi	r3,fp,-24
    8260:	d8000215 	stw	zero,8(sp)
    8264:	e0bffb44 	addi	r2,fp,-19
    8268:	d8800115 	stw	r2,4(sp)
    826c:	d8000015 	stw	zero,0(sp)
    8270:	180f883a 	mov	r7,r3
    8274:	01800144 	movi	r6,5
    8278:	000b883a 	mov	r5,zero
    827c:	01000074 	movhi	r4,1
    8280:	21040004 	addi	r4,r4,4096
    8284:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
			}
			else {
				printf("ES,Byte_Mode ERROR.\n");
			}
		break;
    8288:	00007806 	br	846c <Nor_Erase+0x340>
			else if(Byte_Mode==1){
				Send_Buff[1] = add[3];Send_Buff[2] = add[2];Send_Buff[3] = add[1];Send_Buff[4] = add[0];  //MSB first
				alt_avalon_spi_command(SPI_0_BASE, 0, 5, Send_Buff, 0, Get_Buff, 0);        //Send_Buff is 5Byte.
			}
			else {
				printf("ES,Byte_Mode ERROR.\n");
    828c:	01000074 	movhi	r4,1
    8290:	21323c04 	addi	r4,r4,-14096
    8294:	000acd00 	call	acd0 <puts>
			}
		break;
    8298:	00007406 	br	846c <Nor_Erase+0x340>
		case 1:    //32KB erase
			Send_Buff[0]=Nor_INS_Block_Erase_32KB;
    829c:	00801484 	movi	r2,82
    82a0:	e0bffa05 	stb	r2,-24(fp)
			if(Byte_Mode==0){
    82a4:	e0bfff03 	ldbu	r2,-4(fp)
    82a8:	1000121e 	bne	r2,zero,82f4 <Nor_Erase+0x1c8>
				Send_Buff[1] = add[2];Send_Buff[2] = add[1];Send_Buff[3] = add[0];  //MSB first
    82ac:	e0bff983 	ldbu	r2,-26(fp)
    82b0:	e0bffa45 	stb	r2,-23(fp)
    82b4:	e0bff943 	ldbu	r2,-27(fp)
    82b8:	e0bffa85 	stb	r2,-22(fp)
    82bc:	e0bff903 	ldbu	r2,-28(fp)
    82c0:	e0bffac5 	stb	r2,-21(fp)
				alt_avalon_spi_command(SPI_0_BASE, 0, 4, Send_Buff, 0, Get_Buff, 0);;        //Send_Buff is 4Byte.
    82c4:	e0fffa04 	addi	r3,fp,-24
    82c8:	d8000215 	stw	zero,8(sp)
    82cc:	e0bffb44 	addi	r2,fp,-19
    82d0:	d8800115 	stw	r2,4(sp)
    82d4:	d8000015 	stw	zero,0(sp)
    82d8:	180f883a 	mov	r7,r3
    82dc:	01800104 	movi	r6,4
    82e0:	000b883a 	mov	r5,zero
    82e4:	01000074 	movhi	r4,1
    82e8:	21040004 	addi	r4,r4,4096
    82ec:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
				alt_avalon_spi_command(SPI_0_BASE, 0, 5, Send_Buff, 0, Get_Buff, 0);        //Send_Buff is 5Byte.
			}
			else {
				printf("ES,Byte_Mode ERROR.\n");
			}
		break;
    82f0:	00005e06 	br	846c <Nor_Erase+0x340>
			Send_Buff[0]=Nor_INS_Block_Erase_32KB;
			if(Byte_Mode==0){
				Send_Buff[1] = add[2];Send_Buff[2] = add[1];Send_Buff[3] = add[0];  //MSB first
				alt_avalon_spi_command(SPI_0_BASE, 0, 4, Send_Buff, 0, Get_Buff, 0);;        //Send_Buff is 4Byte.
			}
			else if(Byte_Mode==1){
    82f4:	e0bfff03 	ldbu	r2,-4(fp)
    82f8:	10800058 	cmpnei	r2,r2,1
    82fc:	1000141e 	bne	r2,zero,8350 <Nor_Erase+0x224>
				Send_Buff[1] = add[3];Send_Buff[2] = add[2];Send_Buff[3] = add[1];Send_Buff[4] = add[0];  //MSB first
    8300:	e0bff9c3 	ldbu	r2,-25(fp)
    8304:	e0bffa45 	stb	r2,-23(fp)
    8308:	e0bff983 	ldbu	r2,-26(fp)
    830c:	e0bffa85 	stb	r2,-22(fp)
    8310:	e0bff943 	ldbu	r2,-27(fp)
    8314:	e0bffac5 	stb	r2,-21(fp)
    8318:	e0bff903 	ldbu	r2,-28(fp)
    831c:	e0bffb05 	stb	r2,-20(fp)
				alt_avalon_spi_command(SPI_0_BASE, 0, 5, Send_Buff, 0, Get_Buff, 0);        //Send_Buff is 5Byte.
    8320:	e0fffa04 	addi	r3,fp,-24
    8324:	d8000215 	stw	zero,8(sp)
    8328:	e0bffb44 	addi	r2,fp,-19
    832c:	d8800115 	stw	r2,4(sp)
    8330:	d8000015 	stw	zero,0(sp)
    8334:	180f883a 	mov	r7,r3
    8338:	01800144 	movi	r6,5
    833c:	000b883a 	mov	r5,zero
    8340:	01000074 	movhi	r4,1
    8344:	21040004 	addi	r4,r4,4096
    8348:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
			}
			else {
				printf("ES,Byte_Mode ERROR.\n");
			}
		break;
    834c:	00004706 	br	846c <Nor_Erase+0x340>
			else if(Byte_Mode==1){
				Send_Buff[1] = add[3];Send_Buff[2] = add[2];Send_Buff[3] = add[1];Send_Buff[4] = add[0];  //MSB first
				alt_avalon_spi_command(SPI_0_BASE, 0, 5, Send_Buff, 0, Get_Buff, 0);        //Send_Buff is 5Byte.
			}
			else {
				printf("ES,Byte_Mode ERROR.\n");
    8350:	01000074 	movhi	r4,1
    8354:	21323c04 	addi	r4,r4,-14096
    8358:	000acd00 	call	acd0 <puts>
			}
		break;
    835c:	00004306 	br	846c <Nor_Erase+0x340>
		case 2:    //64KB erase
			Send_Buff[0]=Nor_INS_Block_Erase_64KB;
    8360:	00bff604 	movi	r2,-40
    8364:	e0bffa05 	stb	r2,-24(fp)
			if(Byte_Mode==0){
    8368:	e0bfff03 	ldbu	r2,-4(fp)
    836c:	1000121e 	bne	r2,zero,83b8 <Nor_Erase+0x28c>
				Send_Buff[1] = add[2];Send_Buff[2] = add[1];Send_Buff[3] = add[0];  //MSB first
    8370:	e0bff983 	ldbu	r2,-26(fp)
    8374:	e0bffa45 	stb	r2,-23(fp)
    8378:	e0bff943 	ldbu	r2,-27(fp)
    837c:	e0bffa85 	stb	r2,-22(fp)
    8380:	e0bff903 	ldbu	r2,-28(fp)
    8384:	e0bffac5 	stb	r2,-21(fp)
				alt_avalon_spi_command(SPI_0_BASE, 0, 4, Send_Buff, 0, Get_Buff, 0);        //Send_Buff is 4Byte.
    8388:	e0fffa04 	addi	r3,fp,-24
    838c:	d8000215 	stw	zero,8(sp)
    8390:	e0bffb44 	addi	r2,fp,-19
    8394:	d8800115 	stw	r2,4(sp)
    8398:	d8000015 	stw	zero,0(sp)
    839c:	180f883a 	mov	r7,r3
    83a0:	01800104 	movi	r6,4
    83a4:	000b883a 	mov	r5,zero
    83a8:	01000074 	movhi	r4,1
    83ac:	21040004 	addi	r4,r4,4096
    83b0:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
				alt_avalon_spi_command(SPI_0_BASE, 0, 5, Send_Buff, 0, Get_Buff, 0);        //Send_Buff is 5Byte.
			}
			else {
				printf("ES,Byte_Mode ERROR.\n");
			}
		break;
    83b4:	00002d06 	br	846c <Nor_Erase+0x340>
			Send_Buff[0]=Nor_INS_Block_Erase_64KB;
			if(Byte_Mode==0){
				Send_Buff[1] = add[2];Send_Buff[2] = add[1];Send_Buff[3] = add[0];  //MSB first
				alt_avalon_spi_command(SPI_0_BASE, 0, 4, Send_Buff, 0, Get_Buff, 0);        //Send_Buff is 4Byte.
			}
			else if(Byte_Mode==1){
    83b8:	e0bfff03 	ldbu	r2,-4(fp)
    83bc:	10800058 	cmpnei	r2,r2,1
    83c0:	1000141e 	bne	r2,zero,8414 <Nor_Erase+0x2e8>
				Send_Buff[1] = add[3];Send_Buff[2] = add[2];Send_Buff[3] = add[1];Send_Buff[4] = add[0];  //MSB first
    83c4:	e0bff9c3 	ldbu	r2,-25(fp)
    83c8:	e0bffa45 	stb	r2,-23(fp)
    83cc:	e0bff983 	ldbu	r2,-26(fp)
    83d0:	e0bffa85 	stb	r2,-22(fp)
    83d4:	e0bff943 	ldbu	r2,-27(fp)
    83d8:	e0bffac5 	stb	r2,-21(fp)
    83dc:	e0bff903 	ldbu	r2,-28(fp)
    83e0:	e0bffb05 	stb	r2,-20(fp)
				alt_avalon_spi_command(SPI_0_BASE, 0, 5, Send_Buff, 0, Get_Buff, 0);        //Send_Buff is 5Byte.
    83e4:	e0fffa04 	addi	r3,fp,-24
    83e8:	d8000215 	stw	zero,8(sp)
    83ec:	e0bffb44 	addi	r2,fp,-19
    83f0:	d8800115 	stw	r2,4(sp)
    83f4:	d8000015 	stw	zero,0(sp)
    83f8:	180f883a 	mov	r7,r3
    83fc:	01800144 	movi	r6,5
    8400:	000b883a 	mov	r5,zero
    8404:	01000074 	movhi	r4,1
    8408:	21040004 	addi	r4,r4,4096
    840c:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
			}
			else {
				printf("ES,Byte_Mode ERROR.\n");
			}
		break;
    8410:	00001606 	br	846c <Nor_Erase+0x340>
			else if(Byte_Mode==1){
				Send_Buff[1] = add[3];Send_Buff[2] = add[2];Send_Buff[3] = add[1];Send_Buff[4] = add[0];  //MSB first
				alt_avalon_spi_command(SPI_0_BASE, 0, 5, Send_Buff, 0, Get_Buff, 0);        //Send_Buff is 5Byte.
			}
			else {
				printf("ES,Byte_Mode ERROR.\n");
    8414:	01000074 	movhi	r4,1
    8418:	21323c04 	addi	r4,r4,-14096
    841c:	000acd00 	call	acd0 <puts>
			}
		break;
    8420:	00001206 	br	846c <Nor_Erase+0x340>
		case 3:    //Chip erase
			Send_Buff[0]=Nor_INS_Chip_Erase;
    8424:	00bff1c4 	movi	r2,-57
    8428:	e0bffa05 	stb	r2,-24(fp)
			alt_avalon_spi_command(SPI_0_BASE, 0, 1, Send_Buff, 0, Get_Buff, 0);        //Send_Buff is 5Byte.
    842c:	e0fffa04 	addi	r3,fp,-24
    8430:	d8000215 	stw	zero,8(sp)
    8434:	e0bffb44 	addi	r2,fp,-19
    8438:	d8800115 	stw	r2,4(sp)
    843c:	d8000015 	stw	zero,0(sp)
    8440:	180f883a 	mov	r7,r3
    8444:	01800044 	movi	r6,1
    8448:	000b883a 	mov	r5,zero
    844c:	01000074 	movhi	r4,1
    8450:	21040004 	addi	r4,r4,4096
    8454:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
		break;
    8458:	00000406 	br	846c <Nor_Erase+0x340>
		default:
			printf("ES_Mode ERROR\n");
    845c:	01000074 	movhi	r4,1
    8460:	21324104 	addi	r4,r4,-14076
    8464:	000acd00 	call	acd0 <puts>
		break;
    8468:	0001883a 	nop
		//return 1;
	}
}
    846c:	0001883a 	nop
    8470:	e037883a 	mov	sp,fp
    8474:	dfc00117 	ldw	ra,4(sp)
    8478:	df000017 	ldw	fp,0(sp)
    847c:	dec00204 	addi	sp,sp,8
    8480:	f800283a 	ret

00008484 <Nor_Page_Program_Number>:

unsigned long Nor_Page_Program_Number(unsigned long Address,unsigned char Byte_Mode,unsigned int Number,unsigned int Length){
    8484:	deffe704 	addi	sp,sp,-100
    8488:	dfc01815 	stw	ra,96(sp)
    848c:	df001715 	stw	fp,92(sp)
    8490:	dd801615 	stw	r22,88(sp)
    8494:	dd401515 	stw	r21,84(sp)
    8498:	dd001415 	stw	r20,80(sp)
    849c:	dcc01315 	stw	r19,76(sp)
    84a0:	dc801215 	stw	r18,72(sp)
    84a4:	dc401115 	stw	r17,68(sp)
    84a8:	dc001015 	stw	r16,64(sp)
    84ac:	df001704 	addi	fp,sp,92
    84b0:	e13ff515 	stw	r4,-44(fp)
    84b4:	2809883a 	mov	r4,r5
    84b8:	e1bff715 	stw	r6,-36(fp)
    84bc:	e1fff815 	stw	r7,-32(fp)
    84c0:	e13ff605 	stb	r4,-40(fp)
    84c4:	d809883a 	mov	r4,sp
    84c8:	202d883a 	mov	r22,r4
    //page program
	//IN : Address ,Byte_Mode(0:3Byte,1:4Byte),*fin(fread FILE*)
	//OUT: PP checksum
	alt_u8 add[4]={0};
    84cc:	e03ff215 	stw	zero,-56(fp)
	alt_u32 i=0,Number_Buf[2]={0};
    84d0:	e03fec15 	stw	zero,-80(fp)
    84d4:	0009883a 	mov	r4,zero
    84d8:	000b883a 	mov	r5,zero
    84dc:	e13ff315 	stw	r4,-52(fp)
    84e0:	e17ff415 	stw	r5,-48(fp)
    unsigned long Sum=0;
    84e4:	e03fed15 	stw	zero,-76(fp)
    alt_u8 Send_Buff[Length+5];
    84e8:	e13ff817 	ldw	r4,-32(fp)
    84ec:	21000144 	addi	r4,r4,5
    84f0:	200b883a 	mov	r5,r4
    84f4:	297fffc4 	addi	r5,r5,-1
    84f8:	e17fee15 	stw	r5,-72(fp)
    84fc:	2029883a 	mov	r20,r4
    8500:	002b883a 	mov	r21,zero
    8504:	a00ad77a 	srli	r5,r20,29
    8508:	a81a90fa 	slli	r13,r21,3
    850c:	2b5ab03a 	or	r13,r5,r13
    8510:	a01890fa 	slli	r12,r20,3
    8514:	2025883a 	mov	r18,r4
    8518:	0027883a 	mov	r19,zero
    851c:	900ad77a 	srli	r5,r18,29
    8520:	981690fa 	slli	r11,r19,3
    8524:	2ad6b03a 	or	r11,r5,r11
    8528:	901490fa 	slli	r10,r18,3
    852c:	214000c4 	addi	r5,r4,3
    8530:	280ad0ba 	srli	r5,r5,2
    8534:	294b883a 	add	r5,r5,r5
    8538:	294b883a 	add	r5,r5,r5
    853c:	d977c83a 	sub	sp,sp,r5
    8540:	d9400304 	addi	r5,sp,12
    8544:	280b883a 	mov	r5,r5
    8548:	e17fef15 	stw	r5,-68(fp)
    alt_u8 Get_Buff[Length+5];
    854c:	e17ff817 	ldw	r5,-32(fp)
    8550:	2c800144 	addi	r18,r5,5
    8554:	900b883a 	mov	r5,r18
    8558:	297fffc4 	addi	r5,r5,-1
    855c:	e17ff015 	stw	r5,-64(fp)
    8560:	9021883a 	mov	r16,r18
    8564:	0023883a 	mov	r17,zero
    8568:	800ad77a 	srli	r5,r16,29
    856c:	881290fa 	slli	r9,r17,3
    8570:	2a52b03a 	or	r9,r5,r9
    8574:	801090fa 	slli	r8,r16,3
    8578:	901d883a 	mov	r14,r18
    857c:	001f883a 	mov	r15,zero
    8580:	700ad77a 	srli	r5,r14,29
    8584:	780690fa 	slli	r3,r15,3
    8588:	28c6b03a 	or	r3,r5,r3
    858c:	700490fa 	slli	r2,r14,3
    8590:	908000c4 	addi	r2,r18,3
    8594:	1004d0ba 	srli	r2,r2,2
    8598:	1085883a 	add	r2,r2,r2
    859c:	1085883a 	add	r2,r2,r2
    85a0:	d8b7c83a 	sub	sp,sp,r2
    85a4:	d8800304 	addi	r2,sp,12
    85a8:	1005883a 	mov	r2,r2
    85ac:	e0bff115 	stw	r2,-60(fp)

    memset(Send_Buff, 0XFF, sizeof(Send_Buff));
    85b0:	e0bfef17 	ldw	r2,-68(fp)
    85b4:	200d883a 	mov	r6,r4
    85b8:	01403fc4 	movi	r5,255
    85bc:	1009883a 	mov	r4,r2
    85c0:	000ab840 	call	ab84 <memset>
    memset(Get_Buff, 0xFF, sizeof(Get_Buff));
    85c4:	e0bff117 	ldw	r2,-60(fp)
    85c8:	900d883a 	mov	r6,r18
    85cc:	01403fc4 	movi	r5,255
    85d0:	1009883a 	mov	r4,r2
    85d4:	000ab840 	call	ab84 <memset>
	add[0]=Address%256;
    85d8:	e0bff517 	ldw	r2,-44(fp)
    85dc:	e0bff205 	stb	r2,-56(fp)
	add[1]=(Address>>8)%256;
    85e0:	e0bff517 	ldw	r2,-44(fp)
    85e4:	1004d23a 	srli	r2,r2,8
    85e8:	e0bff245 	stb	r2,-55(fp)
	add[2]=(Address>>16)%256;
    85ec:	e0bff517 	ldw	r2,-44(fp)
    85f0:	1004d43a 	srli	r2,r2,16
    85f4:	e0bff285 	stb	r2,-54(fp)
	add[3]=(Address>>24)%256;
    85f8:	e0bff517 	ldw	r2,-44(fp)
    85fc:	1004d63a 	srli	r2,r2,24
    8600:	e0bff2c5 	stb	r2,-53(fp)
	if(Number>0xff){
    8604:	e0bff717 	ldw	r2,-36(fp)
    8608:	10804030 	cmpltui	r2,r2,256
    860c:	1000081e 	bne	r2,zero,8630 <Nor_Page_Program_Number+0x1ac>
		Number_Buf[0]=Number%256;
    8610:	e0bff717 	ldw	r2,-36(fp)
    8614:	10803fcc 	andi	r2,r2,255
    8618:	e0bff315 	stw	r2,-52(fp)
		Number_Buf[1]=(Number>>8)%256;
    861c:	e0bff717 	ldw	r2,-36(fp)
    8620:	1004d23a 	srli	r2,r2,8
    8624:	10803fcc 	andi	r2,r2,255
    8628:	e0bff415 	stw	r2,-48(fp)
    862c:	00000406 	br	8640 <Nor_Page_Program_Number+0x1bc>
	}
	else Number_Buf[0]=Number_Buf[1]=Number;
    8630:	e0bff717 	ldw	r2,-36(fp)
    8634:	e0bff415 	stw	r2,-48(fp)
    8638:	e0bff417 	ldw	r2,-48(fp)
    863c:	e0bff315 	stw	r2,-52(fp)

    switch(Byte_Mode){
    8640:	e0bff603 	ldbu	r2,-40(fp)
    8644:	10000326 	beq	r2,zero,8654 <Nor_Page_Program_Number+0x1d0>
    8648:	10800060 	cmpeqi	r2,r2,1
    864c:	10003c1e 	bne	r2,zero,8740 <Nor_Page_Program_Number+0x2bc>
    8650:	00008006 	br	8854 <Nor_Page_Program_Number+0x3d0>
		case 0:       //3BYTE
			Send_Buff[0] = Nor_INS_Page_Program;  //Page Program : 02h
    8654:	e0bfef17 	ldw	r2,-68(fp)
    8658:	00c00084 	movi	r3,2
    865c:	10c00005 	stb	r3,0(r2)
			Send_Buff[1] = add[2];Send_Buff[2] = add[1];Send_Buff[3] = add[0];  //MSB first
    8660:	e0fff283 	ldbu	r3,-54(fp)
    8664:	e0bfef17 	ldw	r2,-68(fp)
    8668:	10c00045 	stb	r3,1(r2)
    866c:	e0fff243 	ldbu	r3,-55(fp)
    8670:	e0bfef17 	ldw	r2,-68(fp)
    8674:	10c00085 	stb	r3,2(r2)
    8678:	e0fff203 	ldbu	r3,-56(fp)
    867c:	e0bfef17 	ldw	r2,-68(fp)
    8680:	10c000c5 	stb	r3,3(r2)
			for(i=0;i<Length;i++){
    8684:	e03fec15 	stw	zero,-80(fp)
    8688:	00000a06 	br	86b4 <Nor_Page_Program_Number+0x230>
				//Send_Buff[i+4]=Number_Buf[i%2];
				Send_Buff[i+4]=i;
    868c:	e0bfec17 	ldw	r2,-80(fp)
    8690:	10800104 	addi	r2,r2,4
    8694:	e0ffec17 	ldw	r3,-80(fp)
    8698:	1809883a 	mov	r4,r3
    869c:	e0ffef17 	ldw	r3,-68(fp)
    86a0:	1885883a 	add	r2,r3,r2
    86a4:	11000005 	stb	r4,0(r2)

    switch(Byte_Mode){
		case 0:       //3BYTE
			Send_Buff[0] = Nor_INS_Page_Program;  //Page Program : 02h
			Send_Buff[1] = add[2];Send_Buff[2] = add[1];Send_Buff[3] = add[0];  //MSB first
			for(i=0;i<Length;i++){
    86a8:	e0bfec17 	ldw	r2,-80(fp)
    86ac:	10800044 	addi	r2,r2,1
    86b0:	e0bfec15 	stw	r2,-80(fp)
    86b4:	e0ffec17 	ldw	r3,-80(fp)
    86b8:	e0bff817 	ldw	r2,-32(fp)
    86bc:	18bff336 	bltu	r3,r2,868c <_gp+0xffff3784>
				//Send_Buff[i+4]=Number_Buf[i%2];
				Send_Buff[i+4]=i;
			}
			for(i=4;i<4+Length;i++){
    86c0:	00800104 	movi	r2,4
    86c4:	e0bfec15 	stw	r2,-80(fp)
    86c8:	00000b06 	br	86f8 <Nor_Page_Program_Number+0x274>
				Sum=Sum+Send_Buff[i];
    86cc:	e0ffef17 	ldw	r3,-68(fp)
    86d0:	e0bfec17 	ldw	r2,-80(fp)
    86d4:	1885883a 	add	r2,r3,r2
    86d8:	10800003 	ldbu	r2,0(r2)
    86dc:	10803fcc 	andi	r2,r2,255
    86e0:	e0ffed17 	ldw	r3,-76(fp)
    86e4:	1885883a 	add	r2,r3,r2
    86e8:	e0bfed15 	stw	r2,-76(fp)
			Send_Buff[1] = add[2];Send_Buff[2] = add[1];Send_Buff[3] = add[0];  //MSB first
			for(i=0;i<Length;i++){
				//Send_Buff[i+4]=Number_Buf[i%2];
				Send_Buff[i+4]=i;
			}
			for(i=4;i<4+Length;i++){
    86ec:	e0bfec17 	ldw	r2,-80(fp)
    86f0:	10800044 	addi	r2,r2,1
    86f4:	e0bfec15 	stw	r2,-80(fp)
    86f8:	e0bff817 	ldw	r2,-32(fp)
    86fc:	10800104 	addi	r2,r2,4
    8700:	e0ffec17 	ldw	r3,-80(fp)
    8704:	18bff136 	bltu	r3,r2,86cc <_gp+0xffff37c4>
				Sum=Sum+Send_Buff[i];
			}
			alt_avalon_spi_command(SPI_0_BASE, 0, Length+4, Send_Buff, 0, Get_Buff, 0);  //Send_Buff is 4Byte.
    8708:	e0bff817 	ldw	r2,-32(fp)
    870c:	10c00104 	addi	r3,r2,4
    8710:	e13fef17 	ldw	r4,-68(fp)
    8714:	e0bff117 	ldw	r2,-60(fp)
    8718:	d8000215 	stw	zero,8(sp)
    871c:	d8800115 	stw	r2,4(sp)
    8720:	d8000015 	stw	zero,0(sp)
    8724:	200f883a 	mov	r7,r4
    8728:	180d883a 	mov	r6,r3
    872c:	000b883a 	mov	r5,zero
    8730:	01000074 	movhi	r4,1
    8734:	21040004 	addi	r4,r4,4096
    8738:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
		break;
    873c:	00004906 	br	8864 <Nor_Page_Program_Number+0x3e0>
		case 1:       //4BYTE
			Send_Buff[0] = Nor_INS_Page_Program;  //Page Program : 02h
    8740:	e0bfef17 	ldw	r2,-68(fp)
    8744:	00c00084 	movi	r3,2
    8748:	10c00005 	stb	r3,0(r2)
			Send_Buff[1] = add[3];Send_Buff[2] = add[2];Send_Buff[3] = add[1];Send_Buff[4] = add[0];  //MSB first
    874c:	e0fff2c3 	ldbu	r3,-53(fp)
    8750:	e0bfef17 	ldw	r2,-68(fp)
    8754:	10c00045 	stb	r3,1(r2)
    8758:	e0fff283 	ldbu	r3,-54(fp)
    875c:	e0bfef17 	ldw	r2,-68(fp)
    8760:	10c00085 	stb	r3,2(r2)
    8764:	e0fff243 	ldbu	r3,-55(fp)
    8768:	e0bfef17 	ldw	r2,-68(fp)
    876c:	10c000c5 	stb	r3,3(r2)
    8770:	e0fff203 	ldbu	r3,-56(fp)
    8774:	e0bfef17 	ldw	r2,-68(fp)
    8778:	10c00105 	stb	r3,4(r2)
			for(i=0;i<Length;i++){
    877c:	e03fec15 	stw	zero,-80(fp)
    8780:	00001106 	br	87c8 <Nor_Page_Program_Number+0x344>
				Send_Buff[i+5]=Number_Buf[i%2];
    8784:	e0bfec17 	ldw	r2,-80(fp)
    8788:	10c00144 	addi	r3,r2,5
    878c:	e0bfec17 	ldw	r2,-80(fp)
    8790:	1080004c 	andi	r2,r2,1
    8794:	1085883a 	add	r2,r2,r2
    8798:	1085883a 	add	r2,r2,r2
    879c:	e13fec04 	addi	r4,fp,-80
    87a0:	2085883a 	add	r2,r4,r2
    87a4:	10800704 	addi	r2,r2,28
    87a8:	10800017 	ldw	r2,0(r2)
    87ac:	1009883a 	mov	r4,r2
    87b0:	e0bfef17 	ldw	r2,-68(fp)
    87b4:	10c5883a 	add	r2,r2,r3
    87b8:	11000005 	stb	r4,0(r2)
			alt_avalon_spi_command(SPI_0_BASE, 0, Length+4, Send_Buff, 0, Get_Buff, 0);  //Send_Buff is 4Byte.
		break;
		case 1:       //4BYTE
			Send_Buff[0] = Nor_INS_Page_Program;  //Page Program : 02h
			Send_Buff[1] = add[3];Send_Buff[2] = add[2];Send_Buff[3] = add[1];Send_Buff[4] = add[0];  //MSB first
			for(i=0;i<Length;i++){
    87bc:	e0bfec17 	ldw	r2,-80(fp)
    87c0:	10800044 	addi	r2,r2,1
    87c4:	e0bfec15 	stw	r2,-80(fp)
    87c8:	e0ffec17 	ldw	r3,-80(fp)
    87cc:	e0bff817 	ldw	r2,-32(fp)
    87d0:	18bfec36 	bltu	r3,r2,8784 <_gp+0xffff387c>
				Send_Buff[i+5]=Number_Buf[i%2];
			}
			for(i=5;i<5+Length;i++){
    87d4:	00800144 	movi	r2,5
    87d8:	e0bfec15 	stw	r2,-80(fp)
    87dc:	00000b06 	br	880c <Nor_Page_Program_Number+0x388>
				Sum=Sum+Send_Buff[i];
    87e0:	e0ffef17 	ldw	r3,-68(fp)
    87e4:	e0bfec17 	ldw	r2,-80(fp)
    87e8:	1885883a 	add	r2,r3,r2
    87ec:	10800003 	ldbu	r2,0(r2)
    87f0:	10803fcc 	andi	r2,r2,255
    87f4:	e0ffed17 	ldw	r3,-76(fp)
    87f8:	1885883a 	add	r2,r3,r2
    87fc:	e0bfed15 	stw	r2,-76(fp)
			Send_Buff[0] = Nor_INS_Page_Program;  //Page Program : 02h
			Send_Buff[1] = add[3];Send_Buff[2] = add[2];Send_Buff[3] = add[1];Send_Buff[4] = add[0];  //MSB first
			for(i=0;i<Length;i++){
				Send_Buff[i+5]=Number_Buf[i%2];
			}
			for(i=5;i<5+Length;i++){
    8800:	e0bfec17 	ldw	r2,-80(fp)
    8804:	10800044 	addi	r2,r2,1
    8808:	e0bfec15 	stw	r2,-80(fp)
    880c:	e0bff817 	ldw	r2,-32(fp)
    8810:	10800144 	addi	r2,r2,5
    8814:	e0ffec17 	ldw	r3,-80(fp)
    8818:	18bff136 	bltu	r3,r2,87e0 <_gp+0xffff38d8>
				Sum=Sum+Send_Buff[i];
			}
			alt_avalon_spi_command(SPI_0_BASE, 0, Length+5, Send_Buff, 0, Get_Buff, 0);  //Send_Buff is 5Byte.
    881c:	e0bff817 	ldw	r2,-32(fp)
    8820:	10c00144 	addi	r3,r2,5
    8824:	e13fef17 	ldw	r4,-68(fp)
    8828:	e0bff117 	ldw	r2,-60(fp)
    882c:	d8000215 	stw	zero,8(sp)
    8830:	d8800115 	stw	r2,4(sp)
    8834:	d8000015 	stw	zero,0(sp)
    8838:	200f883a 	mov	r7,r4
    883c:	180d883a 	mov	r6,r3
    8840:	000b883a 	mov	r5,zero
    8844:	01000074 	movhi	r4,1
    8848:	21040004 	addi	r4,r4,4096
    884c:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
		break;
    8850:	00000406 	br	8864 <Nor_Page_Program_Number+0x3e0>
		default:
			printf("Program Number error\n");
    8854:	01000074 	movhi	r4,1
    8858:	21324504 	addi	r4,r4,-14060
    885c:	000acd00 	call	acd0 <puts>
		break;
    8860:	0001883a 	nop
	}
	return Sum;
    8864:	e0bfed17 	ldw	r2,-76(fp)
    8868:	b037883a 	mov	sp,r22
}
    886c:	e6fff904 	addi	sp,fp,-28
    8870:	dfc00817 	ldw	ra,32(sp)
    8874:	df000717 	ldw	fp,28(sp)
    8878:	dd800617 	ldw	r22,24(sp)
    887c:	dd400517 	ldw	r21,20(sp)
    8880:	dd000417 	ldw	r20,16(sp)
    8884:	dcc00317 	ldw	r19,12(sp)
    8888:	dc800217 	ldw	r18,8(sp)
    888c:	dc400117 	ldw	r17,4(sp)
    8890:	dc000017 	ldw	r16,0(sp)
    8894:	dec00904 	addi	sp,sp,36
    8898:	f800283a 	ret

0000889c <Nor_Read_Data>:
unsigned long Nor_Read_Data(unsigned long Address,unsigned char Mode,unsigned char Byte_Mode,alt_u8 *Get_Buff,unsigned long Length)
{
    889c:	defff104 	addi	sp,sp,-60
    88a0:	dfc00e15 	stw	ra,56(sp)
    88a4:	df000d15 	stw	fp,52(sp)
    88a8:	dc000c15 	stw	r16,48(sp)
    88ac:	df000d04 	addi	fp,sp,52
    88b0:	e13ffb15 	stw	r4,-20(fp)
    88b4:	3009883a 	mov	r4,r6
    88b8:	e1fffe15 	stw	r7,-8(fp)
    88bc:	e17ffc05 	stb	r5,-16(fp)
    88c0:	e13ffd05 	stb	r4,-12(fp)
    88c4:	d809883a 	mov	r4,sp
    88c8:	2021883a 	mov	r16,r4
	//Read Data
	//IN : Address,Mode(0:es checksum verify,1:pp checksum verify,2:Read Data)
	//OUT: checksum
	alt_u8 add[4]={0};
    88cc:	e03ffa15 	stw	zero,-24(fp)
    unsigned long i=0;
    88d0:	e03ff615 	stw	zero,-40(fp)
    alt_u8 Send_Buff[Length+5];
    88d4:	e1000217 	ldw	r4,8(fp)
    88d8:	21000144 	addi	r4,r4,5
    88dc:	200b883a 	mov	r5,r4
    88e0:	297fffc4 	addi	r5,r5,-1
    88e4:	e17ff815 	stw	r5,-32(fp)
    88e8:	2019883a 	mov	r12,r4
    88ec:	001b883a 	mov	r13,zero
    88f0:	600ad77a 	srli	r5,r12,29
    88f4:	681290fa 	slli	r9,r13,3
    88f8:	2a52b03a 	or	r9,r5,r9
    88fc:	601090fa 	slli	r8,r12,3
    8900:	2015883a 	mov	r10,r4
    8904:	0017883a 	mov	r11,zero
    8908:	500ad77a 	srli	r5,r10,29
    890c:	580690fa 	slli	r3,r11,3
    8910:	28c6b03a 	or	r3,r5,r3
    8914:	500490fa 	slli	r2,r10,3
    8918:	208000c4 	addi	r2,r4,3
    891c:	1004d0ba 	srli	r2,r2,2
    8920:	1085883a 	add	r2,r2,r2
    8924:	1085883a 	add	r2,r2,r2
    8928:	d8b7c83a 	sub	sp,sp,r2
    892c:	d8800304 	addi	r2,sp,12
    8930:	1005883a 	mov	r2,r2
    8934:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 Get_Buff[Length+5];
    unsigned long cks=0;
    8938:	e03ff715 	stw	zero,-36(fp)

    memset(Send_Buff, 0xFF, sizeof(Send_Buff));
    893c:	e0bff917 	ldw	r2,-28(fp)
    8940:	200d883a 	mov	r6,r4
    8944:	01403fc4 	movi	r5,255
    8948:	1009883a 	mov	r4,r2
    894c:	000ab840 	call	ab84 <memset>
    memset(Get_Buff, 0xFF, sizeof(Get_Buff));
    8950:	01800104 	movi	r6,4
    8954:	01403fc4 	movi	r5,255
    8958:	e13ffe17 	ldw	r4,-8(fp)
    895c:	000ab840 	call	ab84 <memset>
    add[0]=Address%256;
    8960:	e0bffb17 	ldw	r2,-20(fp)
    8964:	e0bffa05 	stb	r2,-24(fp)
	add[1]=(Address>>8)%256;
    8968:	e0bffb17 	ldw	r2,-20(fp)
    896c:	1004d23a 	srli	r2,r2,8
    8970:	e0bffa45 	stb	r2,-23(fp)
	add[2]=(Address>>16)%256;
    8974:	e0bffb17 	ldw	r2,-20(fp)
    8978:	1004d43a 	srli	r2,r2,16
    897c:	e0bffa85 	stb	r2,-22(fp)
	add[3]=(Address>>24)%256;
    8980:	e0bffb17 	ldw	r2,-20(fp)
    8984:	1004d63a 	srli	r2,r2,24
    8988:	e0bffac5 	stb	r2,-21(fp)

	switch(Byte_Mode){
    898c:	e0bffd03 	ldbu	r2,-12(fp)
    8990:	10000326 	beq	r2,zero,89a0 <Nor_Read_Data+0x104>
    8994:	10800060 	cmpeqi	r2,r2,1
    8998:	10001a1e 	bne	r2,zero,8a04 <Nor_Read_Data+0x168>
    899c:	00003506 	br	8a74 <Nor_Read_Data+0x1d8>
		case 0:
			Send_Buff[0] = Nor_INS_Read_Data;  //READ DATA : 03h
    89a0:	e0bff917 	ldw	r2,-28(fp)
    89a4:	00c000c4 	movi	r3,3
    89a8:	10c00005 	stb	r3,0(r2)
			Send_Buff[1] = add[2];Send_Buff[2] = add[1];Send_Buff[3] = add[0];  //MSB first
    89ac:	e0fffa83 	ldbu	r3,-22(fp)
    89b0:	e0bff917 	ldw	r2,-28(fp)
    89b4:	10c00045 	stb	r3,1(r2)
    89b8:	e0fffa43 	ldbu	r3,-23(fp)
    89bc:	e0bff917 	ldw	r2,-28(fp)
    89c0:	10c00085 	stb	r3,2(r2)
    89c4:	e0fffa03 	ldbu	r3,-24(fp)
    89c8:	e0bff917 	ldw	r2,-28(fp)
    89cc:	10c000c5 	stb	r3,3(r2)
			alt_avalon_spi_command(SPI_0_BASE, 0, 4, Send_Buff, Length, Get_Buff, 0);  //Send_Buff is 3Byte.
    89d0:	e0fff917 	ldw	r3,-28(fp)
    89d4:	d8000215 	stw	zero,8(sp)
    89d8:	e0bffe17 	ldw	r2,-8(fp)
    89dc:	d8800115 	stw	r2,4(sp)
    89e0:	e0800217 	ldw	r2,8(fp)
    89e4:	d8800015 	stw	r2,0(sp)
    89e8:	180f883a 	mov	r7,r3
    89ec:	01800104 	movi	r6,4
    89f0:	000b883a 	mov	r5,zero
    89f4:	01000074 	movhi	r4,1
    89f8:	21040004 	addi	r4,r4,4096
    89fc:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
			//bcm2835_spi_transfernb(Send_Buff, Get_Buff, Length+4);
		break;
    8a00:	00002006 	br	8a84 <Nor_Read_Data+0x1e8>
		case 1:
			Send_Buff[0] = Nor_INS_Read_Data;  //READ DATA : 03h
    8a04:	e0bff917 	ldw	r2,-28(fp)
    8a08:	00c000c4 	movi	r3,3
    8a0c:	10c00005 	stb	r3,0(r2)
			Send_Buff[1] = add[3];Send_Buff[2] = add[2];Send_Buff[3] = add[1];Send_Buff[4] = add[0];  //MSB first
    8a10:	e0fffac3 	ldbu	r3,-21(fp)
    8a14:	e0bff917 	ldw	r2,-28(fp)
    8a18:	10c00045 	stb	r3,1(r2)
    8a1c:	e0fffa83 	ldbu	r3,-22(fp)
    8a20:	e0bff917 	ldw	r2,-28(fp)
    8a24:	10c00085 	stb	r3,2(r2)
    8a28:	e0fffa43 	ldbu	r3,-23(fp)
    8a2c:	e0bff917 	ldw	r2,-28(fp)
    8a30:	10c000c5 	stb	r3,3(r2)
    8a34:	e0fffa03 	ldbu	r3,-24(fp)
    8a38:	e0bff917 	ldw	r2,-28(fp)
    8a3c:	10c00105 	stb	r3,4(r2)
			alt_avalon_spi_command(SPI_0_BASE, 0, 5, Send_Buff, Length, Get_Buff, 0);  //Send_Buff is 4Byte.
    8a40:	e0fff917 	ldw	r3,-28(fp)
    8a44:	d8000215 	stw	zero,8(sp)
    8a48:	e0bffe17 	ldw	r2,-8(fp)
    8a4c:	d8800115 	stw	r2,4(sp)
    8a50:	e0800217 	ldw	r2,8(fp)
    8a54:	d8800015 	stw	r2,0(sp)
    8a58:	180f883a 	mov	r7,r3
    8a5c:	01800144 	movi	r6,5
    8a60:	000b883a 	mov	r5,zero
    8a64:	01000074 	movhi	r4,1
    8a68:	21040004 	addi	r4,r4,4096
    8a6c:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
			//bcm2835_spi_transfernb(Send_Buff, Get_Buff, Length+5);
        break;
    8a70:	00000406 	br	8a84 <Nor_Read_Data+0x1e8>
        default:
			printf("RD ERROR\n");
    8a74:	01000074 	movhi	r4,1
    8a78:	21324b04 	addi	r4,r4,-14036
    8a7c:	000acd00 	call	acd0 <puts>
		break;
    8a80:	0001883a 	nop
	}
	switch(Mode){
    8a84:	e0bffc03 	ldbu	r2,-16(fp)
    8a88:	10c00060 	cmpeqi	r3,r2,1
    8a8c:	18001b1e 	bne	r3,zero,8afc <Nor_Read_Data+0x260>
    8a90:	10c000a0 	cmpeqi	r3,r2,2
    8a94:	18002f1e 	bne	r3,zero,8b54 <Nor_Read_Data+0x2b8>
    8a98:	1000441e 	bne	r2,zero,8bac <Nor_Read_Data+0x310>
		case 0:
		    cks=0xff;
    8a9c:	00803fc4 	movi	r2,255
    8aa0:	e0bff715 	stw	r2,-36(fp)
		    for(i=4+Byte_Mode;i<(Length+4+Byte_Mode);i++){
    8aa4:	e0bffd03 	ldbu	r2,-12(fp)
    8aa8:	10800104 	addi	r2,r2,4
    8aac:	e0bff615 	stw	r2,-40(fp)
    8ab0:	00000b06 	br	8ae0 <Nor_Read_Data+0x244>
               cks=cks&Get_Buff[i];
    8ab4:	e0fffe17 	ldw	r3,-8(fp)
    8ab8:	e0bff617 	ldw	r2,-40(fp)
    8abc:	1885883a 	add	r2,r3,r2
    8ac0:	10800003 	ldbu	r2,0(r2)
    8ac4:	10803fcc 	andi	r2,r2,255
    8ac8:	e0fff717 	ldw	r3,-36(fp)
    8acc:	1884703a 	and	r2,r3,r2
    8ad0:	e0bff715 	stw	r2,-36(fp)
		break;
	}
	switch(Mode){
		case 0:
		    cks=0xff;
		    for(i=4+Byte_Mode;i<(Length+4+Byte_Mode);i++){
    8ad4:	e0bff617 	ldw	r2,-40(fp)
    8ad8:	10800044 	addi	r2,r2,1
    8adc:	e0bff615 	stw	r2,-40(fp)
    8ae0:	e0fffd03 	ldbu	r3,-12(fp)
    8ae4:	e0800217 	ldw	r2,8(fp)
    8ae8:	1885883a 	add	r2,r3,r2
    8aec:	10800104 	addi	r2,r2,4
    8af0:	e0fff617 	ldw	r3,-40(fp)
    8af4:	18bfef36 	bltu	r3,r2,8ab4 <_gp+0xffff3bac>
               cks=cks&Get_Buff[i];
			}
		break;
    8af8:	00002c06 	br	8bac <Nor_Read_Data+0x310>
		case 1:
		    for(i=4+Byte_Mode;i<(Length+4+Byte_Mode);i++){
    8afc:	e0bffd03 	ldbu	r2,-12(fp)
    8b00:	10800104 	addi	r2,r2,4
    8b04:	e0bff615 	stw	r2,-40(fp)
    8b08:	00000b06 	br	8b38 <Nor_Read_Data+0x29c>
               cks=cks+Get_Buff[i];
    8b0c:	e0fffe17 	ldw	r3,-8(fp)
    8b10:	e0bff617 	ldw	r2,-40(fp)
    8b14:	1885883a 	add	r2,r3,r2
    8b18:	10800003 	ldbu	r2,0(r2)
    8b1c:	10803fcc 	andi	r2,r2,255
    8b20:	e0fff717 	ldw	r3,-36(fp)
    8b24:	1885883a 	add	r2,r3,r2
    8b28:	e0bff715 	stw	r2,-36(fp)
		    for(i=4+Byte_Mode;i<(Length+4+Byte_Mode);i++){
               cks=cks&Get_Buff[i];
			}
		break;
		case 1:
		    for(i=4+Byte_Mode;i<(Length+4+Byte_Mode);i++){
    8b2c:	e0bff617 	ldw	r2,-40(fp)
    8b30:	10800044 	addi	r2,r2,1
    8b34:	e0bff615 	stw	r2,-40(fp)
    8b38:	e0fffd03 	ldbu	r3,-12(fp)
    8b3c:	e0800217 	ldw	r2,8(fp)
    8b40:	1885883a 	add	r2,r3,r2
    8b44:	10800104 	addi	r2,r2,4
    8b48:	e0fff617 	ldw	r3,-40(fp)
    8b4c:	18bfef36 	bltu	r3,r2,8b0c <_gp+0xffff3c04>
               cks=cks+Get_Buff[i];
			}
		break;
    8b50:	00001606 	br	8bac <Nor_Read_Data+0x310>
		case 2:
			//fwrite((Get_Buff+4+Byte_Mode), 1, Length, fout);   //store on RD.bin
		    for(i=4+Byte_Mode;i<Length+4+Byte_Mode;i++){
    8b54:	e0bffd03 	ldbu	r2,-12(fp)
    8b58:	10800104 	addi	r2,r2,4
    8b5c:	e0bff615 	stw	r2,-40(fp)
    8b60:	00000b06 	br	8b90 <Nor_Read_Data+0x2f4>
               cks=cks+Get_Buff[i];
    8b64:	e0fffe17 	ldw	r3,-8(fp)
    8b68:	e0bff617 	ldw	r2,-40(fp)
    8b6c:	1885883a 	add	r2,r3,r2
    8b70:	10800003 	ldbu	r2,0(r2)
    8b74:	10803fcc 	andi	r2,r2,255
    8b78:	e0fff717 	ldw	r3,-36(fp)
    8b7c:	1885883a 	add	r2,r3,r2
    8b80:	e0bff715 	stw	r2,-36(fp)
               cks=cks+Get_Buff[i];
			}
		break;
		case 2:
			//fwrite((Get_Buff+4+Byte_Mode), 1, Length, fout);   //store on RD.bin
		    for(i=4+Byte_Mode;i<Length+4+Byte_Mode;i++){
    8b84:	e0bff617 	ldw	r2,-40(fp)
    8b88:	10800044 	addi	r2,r2,1
    8b8c:	e0bff615 	stw	r2,-40(fp)
    8b90:	e0fffd03 	ldbu	r3,-12(fp)
    8b94:	e0800217 	ldw	r2,8(fp)
    8b98:	1885883a 	add	r2,r3,r2
    8b9c:	10800104 	addi	r2,r2,4
    8ba0:	e0fff617 	ldw	r3,-40(fp)
    8ba4:	18bfef36 	bltu	r3,r2,8b64 <_gp+0xffff3c5c>
               cks=cks+Get_Buff[i];
			}
		break;
    8ba8:	0001883a 	nop
    }
    return cks;
    8bac:	e0bff717 	ldw	r2,-36(fp)
    8bb0:	8037883a 	mov	sp,r16
}
    8bb4:	e6ffff04 	addi	sp,fp,-4
    8bb8:	dfc00217 	ldw	ra,8(sp)
    8bbc:	df000117 	ldw	fp,4(sp)
    8bc0:	dc000017 	ldw	r16,0(sp)
    8bc4:	dec00304 	addi	sp,sp,12
    8bc8:	f800283a 	ret

00008bcc <Nor_JEDEC>:

alt_u32 Nor_JEDEC(){
    8bcc:	defff904 	addi	sp,sp,-28
    8bd0:	dfc00615 	stw	ra,24(sp)
    8bd4:	df000515 	stw	fp,20(sp)
    8bd8:	df000504 	addi	fp,sp,20

	alt_u8 Send_Buff[0x01];
	alt_u8 Get_Buff[0x03];
	alt_u32 read_data = 0;
    8bdc:	e03ffe15 	stw	zero,-8(fp)
    memset(Send_Buff, 0xFF, sizeof(Send_Buff));
    8be0:	00bfffc4 	movi	r2,-1
    8be4:	e0bfff05 	stb	r2,-4(fp)
    memset(Get_Buff, 0xFF, sizeof(Get_Buff));
    8be8:	e0bfff44 	addi	r2,fp,-3
    8bec:	018000c4 	movi	r6,3
    8bf0:	01403fc4 	movi	r5,255
    8bf4:	1009883a 	mov	r4,r2
    8bf8:	000ab840 	call	ab84 <memset>

    Send_Buff[0] = Nor_INS_JEDEC_ID;  //JEDEC ID : 9Fh
    8bfc:	00bfe7c4 	movi	r2,-97
    8c00:	e0bfff05 	stb	r2,-4(fp)
    alt_avalon_spi_command(SPI_0_BASE, 0, 1, Send_Buff, 3, Get_Buff, 0);
    8c04:	e0ffff04 	addi	r3,fp,-4
    8c08:	d8000215 	stw	zero,8(sp)
    8c0c:	e0bfff44 	addi	r2,fp,-3
    8c10:	d8800115 	stw	r2,4(sp)
    8c14:	008000c4 	movi	r2,3
    8c18:	d8800015 	stw	r2,0(sp)
    8c1c:	180f883a 	mov	r7,r3
    8c20:	01800044 	movi	r6,1
    8c24:	000b883a 	mov	r5,zero
    8c28:	01000074 	movhi	r4,1
    8c2c:	21040004 	addi	r4,r4,4096
    8c30:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
    read_data = (Get_Buff[0]<<16)|(Get_Buff[1]<<8)|(Get_Buff[2]);
    8c34:	e0bfff43 	ldbu	r2,-3(fp)
    8c38:	10803fcc 	andi	r2,r2,255
    8c3c:	1006943a 	slli	r3,r2,16
    8c40:	e0bfff83 	ldbu	r2,-2(fp)
    8c44:	10803fcc 	andi	r2,r2,255
    8c48:	1004923a 	slli	r2,r2,8
    8c4c:	1886b03a 	or	r3,r3,r2
    8c50:	e0bfffc3 	ldbu	r2,-1(fp)
    8c54:	10803fcc 	andi	r2,r2,255
    8c58:	1884b03a 	or	r2,r3,r2
    8c5c:	e0bffe15 	stw	r2,-8(fp)
    //printf("JEDEC ID : %06x\n",read_data);

    return read_data;
    8c60:	e0bffe17 	ldw	r2,-8(fp)
}
    8c64:	e037883a 	mov	sp,fp
    8c68:	dfc00117 	ldw	ra,4(sp)
    8c6c:	df000017 	ldw	fp,0(sp)
    8c70:	dec00204 	addi	sp,sp,8
    8c74:	f800283a 	ret

00008c78 <WB_RPMC_ReadCounterData>:
Function: Read counter
Argument:
return:	counter number
date: 2015/8/12
*********************/
unsigned int WB_RPMC_ReadCounterData(){
    8c78:	deffff04 	addi	sp,sp,-4
    8c7c:	df000015 	stw	fp,0(sp)
    8c80:	d839883a 	mov	fp,sp
  return (((((counter[0]*0x100)+counter[1])*0x100)+counter[2])*0x100)+counter[3];
    8c84:	d0a0bd03 	ldbu	r2,-32012(gp)
    8c88:	10803fcc 	andi	r2,r2,255
    8c8c:	1006923a 	slli	r3,r2,8
    8c90:	d0a0bd43 	ldbu	r2,-32011(gp)
    8c94:	10803fcc 	andi	r2,r2,255
    8c98:	1885883a 	add	r2,r3,r2
    8c9c:	1006923a 	slli	r3,r2,8
    8ca0:	d0a0bd83 	ldbu	r2,-32010(gp)
    8ca4:	10803fcc 	andi	r2,r2,255
    8ca8:	1885883a 	add	r2,r3,r2
    8cac:	1006923a 	slli	r3,r2,8
    8cb0:	d0a0bdc3 	ldbu	r2,-32009(gp)
    8cb4:	10803fcc 	andi	r2,r2,255
    8cb8:	1885883a 	add	r2,r3,r2
}
    8cbc:	e037883a 	mov	sp,fp
    8cc0:	df000017 	ldw	fp,0(sp)
    8cc4:	dec00104 	addi	sp,sp,4
    8cc8:	f800283a 	ret

00008ccc <WB_RPMC_ReadRPMCstatus>:
	checkall = 1: Read out counter data, tag, signature information

return: RPMC status
date: 2015/8/12
*********************/
unsigned int WB_RPMC_ReadRPMCstatus(unsigned int checkall){
    8ccc:	deffec04 	addi	sp,sp,-80
    8cd0:	dfc01315 	stw	ra,76(sp)
    8cd4:	df001215 	stw	fp,72(sp)
    8cd8:	df001204 	addi	fp,sp,72
    8cdc:	e13fff15 	stw	r4,-4(fp)
  unsigned int i;
  unsigned char RPMCstatus;
  unsigned char Send_Buff[2] = {0x00,0x00};
    8ce0:	e03ff245 	stb	zero,-55(fp)
    8ce4:	e03ff285 	stb	zero,-54(fp)
  unsigned char Get_Buff[49] = {0};
    8ce8:	e0bff2c4 	addi	r2,fp,-53
    8cec:	00c00c44 	movi	r3,49
    8cf0:	180d883a 	mov	r6,r3
    8cf4:	000b883a 	mov	r5,zero
    8cf8:	1009883a 	mov	r4,r2
    8cfc:	000ab840 	call	ab84 <memset>

  memset(Send_Buff, 0XFF, sizeof(Send_Buff));
    8d00:	e0bff244 	addi	r2,fp,-55
    8d04:	01800084 	movi	r6,2
    8d08:	01403fc4 	movi	r5,255
    8d0c:	1009883a 	mov	r4,r2
    8d10:	000ab840 	call	ab84 <memset>
  memset(Get_Buff, 0xFF, sizeof(Get_Buff));
    8d14:	e0bff2c4 	addi	r2,fp,-53
    8d18:	01800c44 	movi	r6,49
    8d1c:	01403fc4 	movi	r5,255
    8d20:	1009883a 	mov	r4,r2
    8d24:	000ab840 	call	ab84 <memset>

  Send_Buff[0]=0x96;	// read RPMC status command
    8d28:	00bfe584 	movi	r2,-106
    8d2c:	e0bff245 	stb	r2,-55(fp)
  if(checkall ==0)  {
    8d30:	e0bfff17 	ldw	r2,-4(fp)
    8d34:	10000f1e 	bne	r2,zero,8d74 <WB_RPMC_ReadRPMCstatus+0xa8>
	alt_avalon_spi_command(SPI_0_BASE, 0, 2, Send_Buff, 1, Get_Buff, 0);
    8d38:	e0fff244 	addi	r3,fp,-55
    8d3c:	d8000215 	stw	zero,8(sp)
    8d40:	e0bff2c4 	addi	r2,fp,-53
    8d44:	d8800115 	stw	r2,4(sp)
    8d48:	00800044 	movi	r2,1
    8d4c:	d8800015 	stw	r2,0(sp)
    8d50:	180f883a 	mov	r7,r3
    8d54:	01800084 	movi	r6,2
    8d58:	000b883a 	mov	r5,zero
    8d5c:	01000074 	movhi	r4,1
    8d60:	21040004 	addi	r4,r4,4096
    8d64:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
	RPMCstatus = Get_Buff[0];
    8d68:	e0bff2c3 	ldbu	r2,-53(fp)
    8d6c:	e0bff205 	stb	r2,-56(fp)
    8d70:	00006b06 	br	8f20 <WB_RPMC_ReadRPMCstatus+0x254>
  }
  else{							// After signature matched reqeust counter instruction, counter data can readout as follow.
    alt_avalon_spi_command(SPI_0_BASE, 0, 2, Send_Buff, 49, Get_Buff, 0);  //50 - 49?
    8d74:	e0fff244 	addi	r3,fp,-55
    8d78:	d8000215 	stw	zero,8(sp)
    8d7c:	e0bff2c4 	addi	r2,fp,-53
    8d80:	d8800115 	stw	r2,4(sp)
    8d84:	00800c44 	movi	r2,49
    8d88:	d8800015 	stw	r2,0(sp)
    8d8c:	180f883a 	mov	r7,r3
    8d90:	01800084 	movi	r6,2
    8d94:	000b883a 	mov	r5,zero
    8d98:	01000074 	movhi	r4,1
    8d9c:	21040004 	addi	r4,r4,4096
    8da0:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
    RPMCstatus = Get_Buff[0];
    8da4:	e0bff2c3 	ldbu	r2,-53(fp)
    8da8:	e0bff205 	stb	r2,-56(fp)
    printf("Readstatus tag:\n");
    8dac:	01000074 	movhi	r4,1
    8db0:	21324e04 	addi	r4,r4,-14024
    8db4:	000acd00 	call	acd0 <puts>
	for(i=0;i<12;i++){			// Update 2016/06/20 Update "i < 32 > i < 12"
    8db8:	e03ff115 	stw	zero,-60(fp)
    8dbc:	00001706 	br	8e1c <WB_RPMC_ReadRPMCstatus+0x150>
    tag[i]=Get_Buff[i+1];			// tag information repeat
    8dc0:	e0bff117 	ldw	r2,-60(fp)
    8dc4:	10800044 	addi	r2,r2,1
    8dc8:	e0fff2c4 	addi	r3,fp,-53
    8dcc:	1885883a 	add	r2,r3,r2
    8dd0:	10c00003 	ldbu	r3,0(r2)
    8dd4:	00800074 	movhi	r2,1
    8dd8:	10b48404 	addi	r2,r2,-11760
    8ddc:	e13ff117 	ldw	r4,-60(fp)
    8de0:	1105883a 	add	r2,r2,r4
    8de4:	10c00005 	stb	r3,0(r2)
    printf("%d ",tag[i]);
    8de8:	00800074 	movhi	r2,1
    8dec:	10b48404 	addi	r2,r2,-11760
    8df0:	e0fff117 	ldw	r3,-60(fp)
    8df4:	10c5883a 	add	r2,r2,r3
    8df8:	10800003 	ldbu	r2,0(r2)
    8dfc:	10803fcc 	andi	r2,r2,255
    8e00:	100b883a 	mov	r5,r2
    8e04:	01000074 	movhi	r4,1
    8e08:	21325204 	addi	r4,r4,-14008
    8e0c:	000abe00 	call	abe0 <printf>
  }
  else{							// After signature matched reqeust counter instruction, counter data can readout as follow.
    alt_avalon_spi_command(SPI_0_BASE, 0, 2, Send_Buff, 49, Get_Buff, 0);  //50 - 49?
    RPMCstatus = Get_Buff[0];
    printf("Readstatus tag:\n");
	for(i=0;i<12;i++){			// Update 2016/06/20 Update "i < 32 > i < 12"
    8e10:	e0bff117 	ldw	r2,-60(fp)
    8e14:	10800044 	addi	r2,r2,1
    8e18:	e0bff115 	stw	r2,-60(fp)
    8e1c:	e0bff117 	ldw	r2,-60(fp)
    8e20:	10800330 	cmpltui	r2,r2,12
    8e24:	103fe61e 	bne	r2,zero,8dc0 <_gp+0xffff3eb8>
    tag[i]=Get_Buff[i+1];			// tag information repeat
    printf("%d ",tag[i]);
    }
	printf("\nReadStatus Counter Data:\n");
    8e28:	01000074 	movhi	r4,1
    8e2c:	21325304 	addi	r4,r4,-14004
    8e30:	000acd00 	call	acd0 <puts>
    for(i=0;i<4;i++){
    8e34:	e03ff115 	stw	zero,-60(fp)
    8e38:	00001506 	br	8e90 <WB_RPMC_ReadRPMCstatus+0x1c4>
    counter[i] = Get_Buff[i+12+1];	// counter data readout   Get_Buff[i+12+1];
    8e3c:	e0bff117 	ldw	r2,-60(fp)
    8e40:	10800344 	addi	r2,r2,13
    8e44:	e0fff2c4 	addi	r3,fp,-53
    8e48:	1885883a 	add	r2,r3,r2
    8e4c:	10c00003 	ldbu	r3,0(r2)
    8e50:	e13ff117 	ldw	r4,-60(fp)
    8e54:	d0a0bd04 	addi	r2,gp,-32012
    8e58:	2085883a 	add	r2,r4,r2
    8e5c:	10c00005 	stb	r3,0(r2)
    printf("%d ",counter[i]);
    8e60:	e0fff117 	ldw	r3,-60(fp)
    8e64:	d0a0bd04 	addi	r2,gp,-32012
    8e68:	1885883a 	add	r2,r3,r2
    8e6c:	10800003 	ldbu	r2,0(r2)
    8e70:	10803fcc 	andi	r2,r2,255
    8e74:	100b883a 	mov	r5,r2
    8e78:	01000074 	movhi	r4,1
    8e7c:	21325204 	addi	r4,r4,-14008
    8e80:	000abe00 	call	abe0 <printf>
	for(i=0;i<12;i++){			// Update 2016/06/20 Update "i < 32 > i < 12"
    tag[i]=Get_Buff[i+1];			// tag information repeat
    printf("%d ",tag[i]);
    }
	printf("\nReadStatus Counter Data:\n");
    for(i=0;i<4;i++){
    8e84:	e0bff117 	ldw	r2,-60(fp)
    8e88:	10800044 	addi	r2,r2,1
    8e8c:	e0bff115 	stw	r2,-60(fp)
    8e90:	e0bff117 	ldw	r2,-60(fp)
    8e94:	10800130 	cmpltui	r2,r2,4
    8e98:	103fe81e 	bne	r2,zero,8e3c <_gp+0xffff3f34>
    counter[i] = Get_Buff[i+12+1];	// counter data readout   Get_Buff[i+12+1];
    printf("%d ",counter[i]);
    }

    printf("\nReadStatus Signature:\n");
    8e9c:	01000074 	movhi	r4,1
    8ea0:	21325a04 	addi	r4,r4,-13976
    8ea4:	000acd00 	call	acd0 <puts>
    for(i=0;i<32;i++){
    8ea8:	e03ff115 	stw	zero,-60(fp)
    8eac:	00001706 	br	8f0c <WB_RPMC_ReadRPMCstatus+0x240>
    signature[i]=Get_Buff[i+16+1];	// signature repeat
    8eb0:	e0bff117 	ldw	r2,-60(fp)
    8eb4:	10800444 	addi	r2,r2,17
    8eb8:	e0fff2c4 	addi	r3,fp,-53
    8ebc:	1885883a 	add	r2,r3,r2
    8ec0:	10c00003 	ldbu	r3,0(r2)
    8ec4:	00800074 	movhi	r2,1
    8ec8:	10b48704 	addi	r2,r2,-11748
    8ecc:	e13ff117 	ldw	r4,-60(fp)
    8ed0:	1105883a 	add	r2,r2,r4
    8ed4:	10c00005 	stb	r3,0(r2)
    printf("%d ",signature[i]);
    8ed8:	00800074 	movhi	r2,1
    8edc:	10b48704 	addi	r2,r2,-11748
    8ee0:	e0fff117 	ldw	r3,-60(fp)
    8ee4:	10c5883a 	add	r2,r2,r3
    8ee8:	10800003 	ldbu	r2,0(r2)
    8eec:	10803fcc 	andi	r2,r2,255
    8ef0:	100b883a 	mov	r5,r2
    8ef4:	01000074 	movhi	r4,1
    8ef8:	21325204 	addi	r4,r4,-14008
    8efc:	000abe00 	call	abe0 <printf>
    counter[i] = Get_Buff[i+12+1];	// counter data readout   Get_Buff[i+12+1];
    printf("%d ",counter[i]);
    }

    printf("\nReadStatus Signature:\n");
    for(i=0;i<32;i++){
    8f00:	e0bff117 	ldw	r2,-60(fp)
    8f04:	10800044 	addi	r2,r2,1
    8f08:	e0bff115 	stw	r2,-60(fp)
    8f0c:	e0bff117 	ldw	r2,-60(fp)
    8f10:	10800830 	cmpltui	r2,r2,32
    8f14:	103fe61e 	bne	r2,zero,8eb0 <_gp+0xffff3fa8>
    signature[i]=Get_Buff[i+16+1];	// signature repeat
    printf("%d ",signature[i]);
    }
    printf("\n");
    8f18:	01000284 	movi	r4,10
    8f1c:	000ac340 	call	ac34 <putchar>
  }//end else
  return RPMCstatus;
    8f20:	e0bff203 	ldbu	r2,-56(fp)
}
    8f24:	e037883a 	mov	sp,fp
    8f28:	dfc00117 	ldw	ra,4(sp)
    8f2c:	df000017 	ldw	fp,0(sp)
    8f30:	dec00204 	addi	sp,sp,8
    8f34:	f800283a 	ret

00008f38 <WB_RPMC_ReqCounter>:
	input_tag: 12 byte input Tag data, which can be time stamp, serial number or random number.
	these data would repeat after success WB_RPMC_ReqCounter() operation
return:
date: 2015/8/12
*********************/
void WB_RPMC_ReqCounter(unsigned int cadr, unsigned char *hmackey,unsigned char *input_tag){
    8f38:	deffea04 	addi	sp,sp,-88
    8f3c:	dfc01515 	stw	ra,84(sp)
    8f40:	df001415 	stw	fp,80(sp)
    8f44:	df001404 	addi	fp,sp,80
    8f48:	e13ffd15 	stw	r4,-12(fp)
    8f4c:	e17ffe15 	stw	r5,-8(fp)
    8f50:	e1bfff15 	stw	r6,-4(fp)
  unsigned int i;
  unsigned char Send_Buff[48] = {0};
    8f54:	e03ff015 	stw	zero,-64(fp)
    8f58:	e03ff115 	stw	zero,-60(fp)
    8f5c:	e03ff215 	stw	zero,-56(fp)
    8f60:	e03ff315 	stw	zero,-52(fp)
    8f64:	e03ff415 	stw	zero,-48(fp)
    8f68:	e03ff515 	stw	zero,-44(fp)
    8f6c:	e03ff615 	stw	zero,-40(fp)
    8f70:	e03ff715 	stw	zero,-36(fp)
    8f74:	e03ff815 	stw	zero,-32(fp)
    8f78:	e03ff915 	stw	zero,-28(fp)
    8f7c:	e03ffa15 	stw	zero,-24(fp)
    8f80:	e03ffb15 	stw	zero,-20(fp)
  unsigned char Get_Buff[1] = {0xFF};
    8f84:	00bfffc4 	movi	r2,-1
    8f88:	e0bffc05 	stb	r2,-16(fp)
  memset(Send_Buff, 0XFF, sizeof(Send_Buff));
    8f8c:	e0bff004 	addi	r2,fp,-64
    8f90:	01800c04 	movi	r6,48
    8f94:	01403fc4 	movi	r5,255
    8f98:	1009883a 	mov	r4,r2
    8f9c:	000ab840 	call	ab84 <memset>

  message[0]=0x9B;
    8fa0:	00800074 	movhi	r2,1
    8fa4:	10b48f04 	addi	r2,r2,-11716
    8fa8:	00ffe6c4 	movi	r3,-101
    8fac:	10c00005 	stb	r3,0(r2)
  message[1]=0x03;
    8fb0:	00800074 	movhi	r2,1
    8fb4:	10b48f04 	addi	r2,r2,-11716
    8fb8:	00c000c4 	movi	r3,3
    8fbc:	10c00045 	stb	r3,1(r2)
  message[2]=cadr-1;
    8fc0:	e0bffd17 	ldw	r2,-12(fp)
    8fc4:	10bfffc4 	addi	r2,r2,-1
    8fc8:	1007883a 	mov	r3,r2
    8fcc:	00800074 	movhi	r2,1
    8fd0:	10b48f04 	addi	r2,r2,-11716
    8fd4:	10c00085 	stb	r3,2(r2)
  message[3]=0x00;
    8fd8:	00800074 	movhi	r2,1
    8fdc:	10b48f04 	addi	r2,r2,-11716
    8fe0:	100000c5 	stb	zero,3(r2)
  for(i=0;i<12;i++){	// Target datasheet issue
    8fe4:	e03fef15 	stw	zero,-68(fp)
    8fe8:	00000d06 	br	9020 <WB_RPMC_ReqCounter+0xe8>
    message[i+4]=*(input_tag+i);
    8fec:	e0bfef17 	ldw	r2,-68(fp)
    8ff0:	11000104 	addi	r4,r2,4
    8ff4:	e0ffff17 	ldw	r3,-4(fp)
    8ff8:	e0bfef17 	ldw	r2,-68(fp)
    8ffc:	1885883a 	add	r2,r3,r2
    9000:	10c00003 	ldbu	r3,0(r2)
    9004:	00800074 	movhi	r2,1
    9008:	10b48f04 	addi	r2,r2,-11716
    900c:	1105883a 	add	r2,r2,r4
    9010:	10c00005 	stb	r3,0(r2)

  message[0]=0x9B;
  message[1]=0x03;
  message[2]=cadr-1;
  message[3]=0x00;
  for(i=0;i<12;i++){	// Target datasheet issue
    9014:	e0bfef17 	ldw	r2,-68(fp)
    9018:	10800044 	addi	r2,r2,1
    901c:	e0bfef15 	stw	r2,-68(fp)
    9020:	e0bfef17 	ldw	r2,-68(fp)
    9024:	10800330 	cmpltui	r2,r2,12
    9028:	103ff01e 	bne	r2,zero,8fec <_gp+0xffff40e4>
    message[i+4]=*(input_tag+i);
  }

  hmacsha256(hmackey,32,message,16,signature);  // caculate signature by SHA256
    902c:	00800074 	movhi	r2,1
    9030:	10b48704 	addi	r2,r2,-11748
    9034:	d8800015 	stw	r2,0(sp)
    9038:	01c00404 	movi	r7,16
    903c:	01800074 	movhi	r6,1
    9040:	31b48f04 	addi	r6,r6,-11716
    9044:	01400804 	movi	r5,32
    9048:	e13ffe17 	ldw	r4,-8(fp)
    904c:	000a6ac0 	call	a6ac <hmacsha256>


  for(i=0;i<16;i++){
    9050:	e03fef15 	stw	zero,-68(fp)
    9054:	00000c06 	br	9088 <WB_RPMC_ReqCounter+0x150>
    Send_Buff[i]=message[i];
    9058:	00800074 	movhi	r2,1
    905c:	10b48f04 	addi	r2,r2,-11716
    9060:	e0ffef17 	ldw	r3,-68(fp)
    9064:	10c5883a 	add	r2,r2,r3
    9068:	10c00003 	ldbu	r3,0(r2)
    906c:	e13ff004 	addi	r4,fp,-64
    9070:	e0bfef17 	ldw	r2,-68(fp)
    9074:	2085883a 	add	r2,r4,r2
    9078:	10c00005 	stb	r3,0(r2)
  }

  hmacsha256(hmackey,32,message,16,signature);  // caculate signature by SHA256


  for(i=0;i<16;i++){
    907c:	e0bfef17 	ldw	r2,-68(fp)
    9080:	10800044 	addi	r2,r2,1
    9084:	e0bfef15 	stw	r2,-68(fp)
    9088:	e0bfef17 	ldw	r2,-68(fp)
    908c:	10800430 	cmpltui	r2,r2,16
    9090:	103ff11e 	bne	r2,zero,9058 <_gp+0xffff4150>
    Send_Buff[i]=message[i];
  }
  printf("Reqcounter signature:\r\n");
    9094:	01000074 	movhi	r4,1
    9098:	21326004 	addi	r4,r4,-13952
    909c:	000acd00 	call	acd0 <puts>
  for(i=0;i<32;i++){
    90a0:	e03fef15 	stw	zero,-68(fp)
    90a4:	00001706 	br	9104 <WB_RPMC_ReqCounter+0x1cc>
    Send_Buff[i+16]=signature[i];
    90a8:	e0bfef17 	ldw	r2,-68(fp)
    90ac:	11000404 	addi	r4,r2,16
    90b0:	00800074 	movhi	r2,1
    90b4:	10b48704 	addi	r2,r2,-11748
    90b8:	e0ffef17 	ldw	r3,-68(fp)
    90bc:	10c5883a 	add	r2,r2,r3
    90c0:	10c00003 	ldbu	r3,0(r2)
    90c4:	e0bff004 	addi	r2,fp,-64
    90c8:	1105883a 	add	r2,r2,r4
    90cc:	10c00005 	stb	r3,0(r2)
    printf("%d ",signature[i]);
    90d0:	00800074 	movhi	r2,1
    90d4:	10b48704 	addi	r2,r2,-11748
    90d8:	e0ffef17 	ldw	r3,-68(fp)
    90dc:	10c5883a 	add	r2,r2,r3
    90e0:	10800003 	ldbu	r2,0(r2)
    90e4:	10803fcc 	andi	r2,r2,255
    90e8:	100b883a 	mov	r5,r2
    90ec:	01000074 	movhi	r4,1
    90f0:	21325204 	addi	r4,r4,-14008
    90f4:	000abe00 	call	abe0 <printf>

  for(i=0;i<16;i++){
    Send_Buff[i]=message[i];
  }
  printf("Reqcounter signature:\r\n");
  for(i=0;i<32;i++){
    90f8:	e0bfef17 	ldw	r2,-68(fp)
    90fc:	10800044 	addi	r2,r2,1
    9100:	e0bfef15 	stw	r2,-68(fp)
    9104:	e0bfef17 	ldw	r2,-68(fp)
    9108:	10800830 	cmpltui	r2,r2,32
    910c:	103fe61e 	bne	r2,zero,90a8 <_gp+0xffff41a0>
    Send_Buff[i+16]=signature[i];
    printf("%d ",signature[i]);
  }
  printf("\n");
    9110:	01000284 	movi	r4,10
    9114:	000ac340 	call	ac34 <putchar>
  alt_avalon_spi_command(SPI_0_BASE, 0, 48, Send_Buff, 0, Get_Buff, 0);
    9118:	e0fff004 	addi	r3,fp,-64
    911c:	d8000215 	stw	zero,8(sp)
    9120:	e0bffc04 	addi	r2,fp,-16
    9124:	d8800115 	stw	r2,4(sp)
    9128:	d8000015 	stw	zero,0(sp)
    912c:	180f883a 	mov	r7,r3
    9130:	01800c04 	movi	r6,48
    9134:	000b883a 	mov	r5,zero
    9138:	01000074 	movhi	r4,1
    913c:	21040004 	addi	r4,r4,4096
    9140:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
  return;
    9144:	0001883a 	nop
}
    9148:	e037883a 	mov	sp,fp
    914c:	dfc00117 	ldw	ra,4(sp)
    9150:	df000017 	ldw	fp,0(sp)
    9154:	dec00204 	addi	sp,sp,8
    9158:	f800283a 	ret

0000915c <WB_RPMC_WrRootKey>:
	cadr: selected Counter address, from 1~4
	rootkey: 32 byte rootkey infomration.
return: RPMC status
date: 2015/8/12
*********************/
unsigned int WB_RPMC_WrRootKey(unsigned int cadr,unsigned char *rootkey){
    915c:	deffe704 	addi	sp,sp,-100
    9160:	dfc01815 	stw	ra,96(sp)
    9164:	df001715 	stw	fp,92(sp)
    9168:	df001704 	addi	fp,sp,92
    916c:	e13ffe15 	stw	r4,-8(fp)
    9170:	e17fff15 	stw	r5,-4(fp)
  unsigned int i;
  unsigned char Send_Buff[64] = {0};
    9174:	e0bfed04 	addi	r2,fp,-76
    9178:	00c01004 	movi	r3,64
    917c:	180d883a 	mov	r6,r3
    9180:	000b883a 	mov	r5,zero
    9184:	1009883a 	mov	r4,r2
    9188:	000ab840 	call	ab84 <memset>
  unsigned char Get_Buff[1] = {0xFF};
    918c:	00bfffc4 	movi	r2,-1
    9190:	e0bffd05 	stb	r2,-12(fp)
  memset(Send_Buff, 0XFF, sizeof(Send_Buff));
    9194:	e0bfed04 	addi	r2,fp,-76
    9198:	01801004 	movi	r6,64
    919c:	01403fc4 	movi	r5,255
    91a0:	1009883a 	mov	r4,r2
    91a4:	000ab840 	call	ab84 <memset>

  memset(message, 0x00, sizeof(message[0])*8);
    91a8:	01800204 	movi	r6,8
    91ac:	000b883a 	mov	r5,zero
    91b0:	01000074 	movhi	r4,1
    91b4:	21348f04 	addi	r4,r4,-11716
    91b8:	000ab840 	call	ab84 <memset>
  message[0]=0x9B;
    91bc:	00800074 	movhi	r2,1
    91c0:	10b48f04 	addi	r2,r2,-11716
    91c4:	00ffe6c4 	movi	r3,-101
    91c8:	10c00005 	stb	r3,0(r2)
  message[1]=0x00;
    91cc:	00800074 	movhi	r2,1
    91d0:	10b48f04 	addi	r2,r2,-11716
    91d4:	10000045 	stb	zero,1(r2)
  message[2]=cadr-1;// counter address 0~3,so -1
    91d8:	e0bffe17 	ldw	r2,-8(fp)
    91dc:	10bfffc4 	addi	r2,r2,-1
    91e0:	1007883a 	mov	r3,r2
    91e4:	00800074 	movhi	r2,1
    91e8:	10b48f04 	addi	r2,r2,-11716
    91ec:	10c00085 	stb	r3,2(r2)
  message[3]=0x00;
    91f0:	00800074 	movhi	r2,1
    91f4:	10b48f04 	addi	r2,r2,-11716
    91f8:	100000c5 	stb	zero,3(r2)

  hmacsha256(rootkey,32,message,4,signature);	// caculate signature by SHA256
    91fc:	00800074 	movhi	r2,1
    9200:	10b48704 	addi	r2,r2,-11748
    9204:	d8800015 	stw	r2,0(sp)
    9208:	01c00104 	movi	r7,4
    920c:	01800074 	movhi	r6,1
    9210:	31b48f04 	addi	r6,r6,-11716
    9214:	01400804 	movi	r5,32
    9218:	e13fff17 	ldw	r4,-4(fp)
    921c:	000a6ac0 	call	a6ac <hmacsha256>


  Send_Buff[0] = message[0];
    9220:	00800074 	movhi	r2,1
    9224:	10b48f04 	addi	r2,r2,-11716
    9228:	10800003 	ldbu	r2,0(r2)
    922c:	e0bfed05 	stb	r2,-76(fp)
  Send_Buff[1] = message[1];
    9230:	00800074 	movhi	r2,1
    9234:	10b48f04 	addi	r2,r2,-11716
    9238:	10800043 	ldbu	r2,1(r2)
    923c:	e0bfed45 	stb	r2,-75(fp)
  Send_Buff[2] = message[2];
    9240:	00800074 	movhi	r2,1
    9244:	10b48f04 	addi	r2,r2,-11716
    9248:	10800083 	ldbu	r2,2(r2)
    924c:	e0bfed85 	stb	r2,-74(fp)
  Send_Buff[3] = message[3];
    9250:	00800074 	movhi	r2,1
    9254:	10b48f04 	addi	r2,r2,-11716
    9258:	108000c3 	ldbu	r2,3(r2)
    925c:	e0bfedc5 	stb	r2,-73(fp)
  for(i=0;i<32;i++){
    9260:	e03fec15 	stw	zero,-80(fp)
    9264:	00000c06 	br	9298 <WB_RPMC_WrRootKey+0x13c>
    Send_Buff[i+4] = *(rootkey+i);
    9268:	e0bfec17 	ldw	r2,-80(fp)
    926c:	10800104 	addi	r2,r2,4
    9270:	e13fff17 	ldw	r4,-4(fp)
    9274:	e0ffec17 	ldw	r3,-80(fp)
    9278:	20c7883a 	add	r3,r4,r3
    927c:	18c00003 	ldbu	r3,0(r3)
    9280:	e13fed04 	addi	r4,fp,-76
    9284:	2085883a 	add	r2,r4,r2
    9288:	10c00005 	stb	r3,0(r2)

  Send_Buff[0] = message[0];
  Send_Buff[1] = message[1];
  Send_Buff[2] = message[2];
  Send_Buff[3] = message[3];
  for(i=0;i<32;i++){
    928c:	e0bfec17 	ldw	r2,-80(fp)
    9290:	10800044 	addi	r2,r2,1
    9294:	e0bfec15 	stw	r2,-80(fp)
    9298:	e0bfec17 	ldw	r2,-80(fp)
    929c:	10800830 	cmpltui	r2,r2,32
    92a0:	103ff11e 	bne	r2,zero,9268 <_gp+0xffff4360>
    Send_Buff[i+4] = *(rootkey+i);
  }
  for(i=0;i<28;i++){
    92a4:	e03fec15 	stw	zero,-80(fp)
    92a8:	00000e06 	br	92e4 <WB_RPMC_WrRootKey+0x188>
    Send_Buff[i+36] = signature[i+4];
    92ac:	e0bfec17 	ldw	r2,-80(fp)
    92b0:	11000904 	addi	r4,r2,36
    92b4:	e0bfec17 	ldw	r2,-80(fp)
    92b8:	10c00104 	addi	r3,r2,4
    92bc:	00800074 	movhi	r2,1
    92c0:	10b48704 	addi	r2,r2,-11748
    92c4:	10c5883a 	add	r2,r2,r3
    92c8:	10c00003 	ldbu	r3,0(r2)
    92cc:	e0bfed04 	addi	r2,fp,-76
    92d0:	1105883a 	add	r2,r2,r4
    92d4:	10c00005 	stb	r3,0(r2)
  Send_Buff[2] = message[2];
  Send_Buff[3] = message[3];
  for(i=0;i<32;i++){
    Send_Buff[i+4] = *(rootkey+i);
  }
  for(i=0;i<28;i++){
    92d8:	e0bfec17 	ldw	r2,-80(fp)
    92dc:	10800044 	addi	r2,r2,1
    92e0:	e0bfec15 	stw	r2,-80(fp)
    92e4:	e0bfec17 	ldw	r2,-80(fp)
    92e8:	10800730 	cmpltui	r2,r2,28
    92ec:	103fef1e 	bne	r2,zero,92ac <_gp+0xffff43a4>
    Send_Buff[i+36] = signature[i+4];
  }

  alt_avalon_spi_command(SPI_0_BASE, 0, 64, Send_Buff, 0, Get_Buff, 0);
    92f0:	e0ffed04 	addi	r3,fp,-76
    92f4:	d8000215 	stw	zero,8(sp)
    92f8:	e0bffd04 	addi	r2,fp,-12
    92fc:	d8800115 	stw	r2,4(sp)
    9300:	d8000015 	stw	zero,0(sp)
    9304:	180f883a 	mov	r7,r3
    9308:	01801004 	movi	r6,64
    930c:	000b883a 	mov	r5,zero
    9310:	01000074 	movhi	r4,1
    9314:	21040004 	addi	r4,r4,4096
    9318:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
  while(WB_RPMC_ReadRPMCstatus(0)&0x01==0x01){
    931c:	0001883a 	nop
    9320:	0009883a 	mov	r4,zero
    9324:	0008ccc0 	call	8ccc <WB_RPMC_ReadRPMCstatus>
    9328:	1080004c 	andi	r2,r2,1
    932c:	103ffc1e 	bne	r2,zero,9320 <_gp+0xffff4418>
	// wait until RPMC operation done
  }
  return WB_RPMC_ReadRPMCstatus(0);
    9330:	0009883a 	mov	r4,zero
    9334:	0008ccc0 	call	8ccc <WB_RPMC_ReadRPMCstatus>
}
    9338:	e037883a 	mov	sp,fp
    933c:	dfc00117 	ldw	ra,4(sp)
    9340:	df000017 	ldw	fp,0(sp)
    9344:	dec00204 	addi	sp,sp,8
    9348:	f800283a 	ret

0000934c <WB_RPMC_UpHMACkey>:
	hmac4: 4 byte input hmac message data, which can be time stamp, serial number or random number.
	hmackey: 32 byte HMACKEY, which would be use for increase/request counter after WB_RPMC_UpHMACkey() operation success
return:
date: 2015/8/12
*********************/
unsigned int WB_RPMC_UpHMACkey(unsigned int cadr,unsigned char *rootkey,unsigned char *hmac4,unsigned char *hmackey){
    934c:	deffeb04 	addi	sp,sp,-84
    9350:	dfc01415 	stw	ra,80(sp)
    9354:	df001315 	stw	fp,76(sp)
    9358:	df001304 	addi	fp,sp,76
    935c:	e13ffc15 	stw	r4,-16(fp)
    9360:	e17ffd15 	stw	r5,-12(fp)
    9364:	e1bffe15 	stw	r6,-8(fp)
    9368:	e1ffff15 	stw	r7,-4(fp)
  unsigned int i;
  unsigned char Send_Buff[40] = {0};
    936c:	e03ff115 	stw	zero,-60(fp)
    9370:	e03ff215 	stw	zero,-56(fp)
    9374:	e03ff315 	stw	zero,-52(fp)
    9378:	e03ff415 	stw	zero,-48(fp)
    937c:	e03ff515 	stw	zero,-44(fp)
    9380:	e03ff615 	stw	zero,-40(fp)
    9384:	e03ff715 	stw	zero,-36(fp)
    9388:	e03ff815 	stw	zero,-32(fp)
    938c:	e03ff915 	stw	zero,-28(fp)
    9390:	e03ffa15 	stw	zero,-24(fp)
  unsigned char Get_Buff[1] = {0xFF};
    9394:	00bfffc4 	movi	r2,-1
    9398:	e0bffb05 	stb	r2,-20(fp)
  memset(Send_Buff, 0XFF, sizeof(Send_Buff));
    939c:	e0bff104 	addi	r2,fp,-60
    93a0:	01800a04 	movi	r6,40
    93a4:	01403fc4 	movi	r5,255
    93a8:	1009883a 	mov	r4,r2
    93ac:	000ab840 	call	ab84 <memset>

  message[0]=0x9B;
    93b0:	00800074 	movhi	r2,1
    93b4:	10b48f04 	addi	r2,r2,-11716
    93b8:	00ffe6c4 	movi	r3,-101
    93bc:	10c00005 	stb	r3,0(r2)
  message[1]=0x01;
    93c0:	00800074 	movhi	r2,1
    93c4:	10b48f04 	addi	r2,r2,-11716
    93c8:	00c00044 	movi	r3,1
    93cc:	10c00045 	stb	r3,1(r2)
  message[2]=cadr - 1;
    93d0:	e0bffc17 	ldw	r2,-16(fp)
    93d4:	10bfffc4 	addi	r2,r2,-1
    93d8:	1007883a 	mov	r3,r2
    93dc:	00800074 	movhi	r2,1
    93e0:	10b48f04 	addi	r2,r2,-11716
    93e4:	10c00085 	stb	r3,2(r2)
  message[3]=0x00;
    93e8:	00800074 	movhi	r2,1
    93ec:	10b48f04 	addi	r2,r2,-11716
    93f0:	100000c5 	stb	zero,3(r2)
  message[4]=*(hmac4+0);
    93f4:	e0bffe17 	ldw	r2,-8(fp)
    93f8:	10c00003 	ldbu	r3,0(r2)
    93fc:	00800074 	movhi	r2,1
    9400:	10b48f04 	addi	r2,r2,-11716
    9404:	10c00105 	stb	r3,4(r2)
  message[5]=*(hmac4+1);
    9408:	e0bffe17 	ldw	r2,-8(fp)
    940c:	10c00043 	ldbu	r3,1(r2)
    9410:	00800074 	movhi	r2,1
    9414:	10b48f04 	addi	r2,r2,-11716
    9418:	10c00145 	stb	r3,5(r2)
  message[6]=*(hmac4+2);
    941c:	e0bffe17 	ldw	r2,-8(fp)
    9420:	10c00083 	ldbu	r3,2(r2)
    9424:	00800074 	movhi	r2,1
    9428:	10b48f04 	addi	r2,r2,-11716
    942c:	10c00185 	stb	r3,6(r2)
  message[7]=*(hmac4+3);
    9430:	e0bffe17 	ldw	r2,-8(fp)
    9434:	10c000c3 	ldbu	r3,3(r2)
    9438:	00800074 	movhi	r2,1
    943c:	10b48f04 	addi	r2,r2,-11716
    9440:	10c001c5 	stb	r3,7(r2)

  hmacsha256(rootkey,32,hmac4,4,hmackey);	// use rootkey generate HMAC key by SHA256
    9444:	e0bfff17 	ldw	r2,-4(fp)
    9448:	d8800015 	stw	r2,0(sp)
    944c:	01c00104 	movi	r7,4
    9450:	e1bffe17 	ldw	r6,-8(fp)
    9454:	01400804 	movi	r5,32
    9458:	e13ffd17 	ldw	r4,-12(fp)
    945c:	000a6ac0 	call	a6ac <hmacsha256>
  hmacsha256(hmackey,32,message,8,signature);	// caculate signature by SHA256
    9460:	00800074 	movhi	r2,1
    9464:	10b48704 	addi	r2,r2,-11748
    9468:	d8800015 	stw	r2,0(sp)
    946c:	01c00204 	movi	r7,8
    9470:	01800074 	movhi	r6,1
    9474:	31b48f04 	addi	r6,r6,-11716
    9478:	01400804 	movi	r5,32
    947c:	e13fff17 	ldw	r4,-4(fp)
    9480:	000a6ac0 	call	a6ac <hmacsha256>

  for(i=0;i<8;i++){
    9484:	e03ff015 	stw	zero,-64(fp)
    9488:	00000c06 	br	94bc <WB_RPMC_UpHMACkey+0x170>
     Send_Buff[i] = message[i];
    948c:	00800074 	movhi	r2,1
    9490:	10b48f04 	addi	r2,r2,-11716
    9494:	e0fff017 	ldw	r3,-64(fp)
    9498:	10c5883a 	add	r2,r2,r3
    949c:	10c00003 	ldbu	r3,0(r2)
    94a0:	e13ff104 	addi	r4,fp,-60
    94a4:	e0bff017 	ldw	r2,-64(fp)
    94a8:	2085883a 	add	r2,r4,r2
    94ac:	10c00005 	stb	r3,0(r2)
  message[7]=*(hmac4+3);

  hmacsha256(rootkey,32,hmac4,4,hmackey);	// use rootkey generate HMAC key by SHA256
  hmacsha256(hmackey,32,message,8,signature);	// caculate signature by SHA256

  for(i=0;i<8;i++){
    94b0:	e0bff017 	ldw	r2,-64(fp)
    94b4:	10800044 	addi	r2,r2,1
    94b8:	e0bff015 	stw	r2,-64(fp)
    94bc:	e0bff017 	ldw	r2,-64(fp)
    94c0:	10800230 	cmpltui	r2,r2,8
    94c4:	103ff11e 	bne	r2,zero,948c <_gp+0xffff4584>
     Send_Buff[i] = message[i];
  }
  for(i=0;i<32;i++){
    94c8:	e03ff015 	stw	zero,-64(fp)
    94cc:	00000d06 	br	9504 <WB_RPMC_UpHMACkey+0x1b8>
     Send_Buff[i+8] = signature[i];
    94d0:	e0bff017 	ldw	r2,-64(fp)
    94d4:	11000204 	addi	r4,r2,8
    94d8:	00800074 	movhi	r2,1
    94dc:	10b48704 	addi	r2,r2,-11748
    94e0:	e0fff017 	ldw	r3,-64(fp)
    94e4:	10c5883a 	add	r2,r2,r3
    94e8:	10c00003 	ldbu	r3,0(r2)
    94ec:	e0bff104 	addi	r2,fp,-60
    94f0:	1105883a 	add	r2,r2,r4
    94f4:	10c00005 	stb	r3,0(r2)
  hmacsha256(hmackey,32,message,8,signature);	// caculate signature by SHA256

  for(i=0;i<8;i++){
     Send_Buff[i] = message[i];
  }
  for(i=0;i<32;i++){
    94f8:	e0bff017 	ldw	r2,-64(fp)
    94fc:	10800044 	addi	r2,r2,1
    9500:	e0bff015 	stw	r2,-64(fp)
    9504:	e0bff017 	ldw	r2,-64(fp)
    9508:	10800830 	cmpltui	r2,r2,32
    950c:	103ff01e 	bne	r2,zero,94d0 <_gp+0xffff45c8>
     Send_Buff[i+8] = signature[i];
  }

  alt_avalon_spi_command(SPI_0_BASE, 0, 40, Send_Buff, 0, Get_Buff, 0);
    9510:	e0fff104 	addi	r3,fp,-60
    9514:	d8000215 	stw	zero,8(sp)
    9518:	e0bffb04 	addi	r2,fp,-20
    951c:	d8800115 	stw	r2,4(sp)
    9520:	d8000015 	stw	zero,0(sp)
    9524:	180f883a 	mov	r7,r3
    9528:	01800a04 	movi	r6,40
    952c:	000b883a 	mov	r5,zero
    9530:	01000074 	movhi	r4,1
    9534:	21040004 	addi	r4,r4,4096
    9538:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
  while(WB_RPMC_ReadRPMCstatus(0)&0x01==0x01){
    953c:	0001883a 	nop
    9540:	0009883a 	mov	r4,zero
    9544:	0008ccc0 	call	8ccc <WB_RPMC_ReadRPMCstatus>
    9548:	1080004c 	andi	r2,r2,1
    954c:	103ffc1e 	bne	r2,zero,9540 <_gp+0xffff4638>
	// wait until RPMC operation done
  }
  return WB_RPMC_ReadRPMCstatus(0);
    9550:	0009883a 	mov	r4,zero
    9554:	0008ccc0 	call	8ccc <WB_RPMC_ReadRPMCstatus>
}
    9558:	e037883a 	mov	sp,fp
    955c:	dfc00117 	ldw	ra,4(sp)
    9560:	df000017 	ldw	fp,0(sp)
    9564:	dec00204 	addi	sp,sp,8
    9568:	f800283a 	ret

0000956c <WB_RPMC_IncCounter>:
	input_tag: 12 byte input Tag data, which can be time stamp, serial number or random number.
	these data would repeat after success WB_RPMC_ReqCounter() operation
return:
date: 2015/8/12
*********************/
unsigned int WB_RPMC_IncCounter(unsigned int cadr,unsigned char *hmackey,unsigned char *input_tag){
    956c:	deffec04 	addi	sp,sp,-80
    9570:	dfc01315 	stw	ra,76(sp)
    9574:	df001215 	stw	fp,72(sp)
    9578:	df001204 	addi	fp,sp,72
    957c:	e13ffd15 	stw	r4,-12(fp)
    9580:	e17ffe15 	stw	r5,-8(fp)
    9584:	e1bfff15 	stw	r6,-4(fp)
  unsigned int i;
  unsigned char Send_Buff[40] = {0};
    9588:	e03ff215 	stw	zero,-56(fp)
    958c:	e03ff315 	stw	zero,-52(fp)
    9590:	e03ff415 	stw	zero,-48(fp)
    9594:	e03ff515 	stw	zero,-44(fp)
    9598:	e03ff615 	stw	zero,-40(fp)
    959c:	e03ff715 	stw	zero,-36(fp)
    95a0:	e03ff815 	stw	zero,-32(fp)
    95a4:	e03ff915 	stw	zero,-28(fp)
    95a8:	e03ffa15 	stw	zero,-24(fp)
    95ac:	e03ffb15 	stw	zero,-20(fp)
  unsigned char Get_Buff[1] = {0xFF};
    95b0:	00bfffc4 	movi	r2,-1
    95b4:	e0bffc05 	stb	r2,-16(fp)
  memset(Send_Buff, 0XFF, sizeof(Send_Buff));
    95b8:	e0bff204 	addi	r2,fp,-56
    95bc:	01800a04 	movi	r6,40
    95c0:	01403fc4 	movi	r5,255
    95c4:	1009883a 	mov	r4,r2
    95c8:	000ab840 	call	ab84 <memset>

  WB_RPMC_ReqCounter(cadr, hmackey, input_tag);
    95cc:	e1bfff17 	ldw	r6,-4(fp)
    95d0:	e17ffe17 	ldw	r5,-8(fp)
    95d4:	e13ffd17 	ldw	r4,-12(fp)
    95d8:	0008f380 	call	8f38 <WB_RPMC_ReqCounter>
  WB_RPMC_ReadRPMCstatus(1);	// Get counter information
    95dc:	01000044 	movi	r4,1
    95e0:	0008ccc0 	call	8ccc <WB_RPMC_ReadRPMCstatus>

  message[0]=0x9B;
    95e4:	00800074 	movhi	r2,1
    95e8:	10b48f04 	addi	r2,r2,-11716
    95ec:	00ffe6c4 	movi	r3,-101
    95f0:	10c00005 	stb	r3,0(r2)
  message[1]=0x02;
    95f4:	00800074 	movhi	r2,1
    95f8:	10b48f04 	addi	r2,r2,-11716
    95fc:	00c00084 	movi	r3,2
    9600:	10c00045 	stb	r3,1(r2)
  message[2]=cadr-1;
    9604:	e0bffd17 	ldw	r2,-12(fp)
    9608:	10bfffc4 	addi	r2,r2,-1
    960c:	1007883a 	mov	r3,r2
    9610:	00800074 	movhi	r2,1
    9614:	10b48f04 	addi	r2,r2,-11716
    9618:	10c00085 	stb	r3,2(r2)
  message[3]=0x00;
    961c:	00800074 	movhi	r2,1
    9620:	10b48f04 	addi	r2,r2,-11716
    9624:	100000c5 	stb	zero,3(r2)
  for(i=0;i<4;i++){
    9628:	e03ff115 	stw	zero,-60(fp)
    962c:	00000d06 	br	9664 <WB_RPMC_IncCounter+0xf8>
     message[i+4]=counter[i];  //counter[i];
    9630:	e0bff117 	ldw	r2,-60(fp)
    9634:	11000104 	addi	r4,r2,4
    9638:	e0fff117 	ldw	r3,-60(fp)
    963c:	d0a0bd04 	addi	r2,gp,-32012
    9640:	1885883a 	add	r2,r3,r2
    9644:	10c00003 	ldbu	r3,0(r2)
    9648:	00800074 	movhi	r2,1
    964c:	10b48f04 	addi	r2,r2,-11716
    9650:	1105883a 	add	r2,r2,r4
    9654:	10c00005 	stb	r3,0(r2)

  message[0]=0x9B;
  message[1]=0x02;
  message[2]=cadr-1;
  message[3]=0x00;
  for(i=0;i<4;i++){
    9658:	e0bff117 	ldw	r2,-60(fp)
    965c:	10800044 	addi	r2,r2,1
    9660:	e0bff115 	stw	r2,-60(fp)
    9664:	e0bff117 	ldw	r2,-60(fp)
    9668:	10800130 	cmpltui	r2,r2,4
    966c:	103ff01e 	bne	r2,zero,9630 <_gp+0xffff4728>
     message[i+4]=counter[i];  //counter[i];
  }
  hmacsha256(hmackey,32,message,8,signature);	// caculate signature by SHA256
    9670:	00800074 	movhi	r2,1
    9674:	10b48704 	addi	r2,r2,-11748
    9678:	d8800015 	stw	r2,0(sp)
    967c:	01c00204 	movi	r7,8
    9680:	01800074 	movhi	r6,1
    9684:	31b48f04 	addi	r6,r6,-11716
    9688:	01400804 	movi	r5,32
    968c:	e13ffe17 	ldw	r4,-8(fp)
    9690:	000a6ac0 	call	a6ac <hmacsha256>

  for(i=0;i<8;i++){
    9694:	e03ff115 	stw	zero,-60(fp)
    9698:	00000c06 	br	96cc <WB_RPMC_IncCounter+0x160>
     Send_Buff[i] = message[i]; //message[i+i];
    969c:	00800074 	movhi	r2,1
    96a0:	10b48f04 	addi	r2,r2,-11716
    96a4:	e0fff117 	ldw	r3,-60(fp)
    96a8:	10c5883a 	add	r2,r2,r3
    96ac:	10c00003 	ldbu	r3,0(r2)
    96b0:	e13ff204 	addi	r4,fp,-56
    96b4:	e0bff117 	ldw	r2,-60(fp)
    96b8:	2085883a 	add	r2,r4,r2
    96bc:	10c00005 	stb	r3,0(r2)
  for(i=0;i<4;i++){
     message[i+4]=counter[i];  //counter[i];
  }
  hmacsha256(hmackey,32,message,8,signature);	// caculate signature by SHA256

  for(i=0;i<8;i++){
    96c0:	e0bff117 	ldw	r2,-60(fp)
    96c4:	10800044 	addi	r2,r2,1
    96c8:	e0bff115 	stw	r2,-60(fp)
    96cc:	e0bff117 	ldw	r2,-60(fp)
    96d0:	10800230 	cmpltui	r2,r2,8
    96d4:	103ff11e 	bne	r2,zero,969c <_gp+0xffff4794>
     Send_Buff[i] = message[i]; //message[i+i];
  }
  for(i=0;i<32;i++){
    96d8:	e03ff115 	stw	zero,-60(fp)
    96dc:	00000d06 	br	9714 <WB_RPMC_IncCounter+0x1a8>
     Send_Buff[i+8] = signature[i]; //signature[i];
    96e0:	e0bff117 	ldw	r2,-60(fp)
    96e4:	11000204 	addi	r4,r2,8
    96e8:	00800074 	movhi	r2,1
    96ec:	10b48704 	addi	r2,r2,-11748
    96f0:	e0fff117 	ldw	r3,-60(fp)
    96f4:	10c5883a 	add	r2,r2,r3
    96f8:	10c00003 	ldbu	r3,0(r2)
    96fc:	e0bff204 	addi	r2,fp,-56
    9700:	1105883a 	add	r2,r2,r4
    9704:	10c00005 	stb	r3,0(r2)
  hmacsha256(hmackey,32,message,8,signature);	// caculate signature by SHA256

  for(i=0;i<8;i++){
     Send_Buff[i] = message[i]; //message[i+i];
  }
  for(i=0;i<32;i++){
    9708:	e0bff117 	ldw	r2,-60(fp)
    970c:	10800044 	addi	r2,r2,1
    9710:	e0bff115 	stw	r2,-60(fp)
    9714:	e0bff117 	ldw	r2,-60(fp)
    9718:	10800830 	cmpltui	r2,r2,32
    971c:	103ff01e 	bne	r2,zero,96e0 <_gp+0xffff47d8>
     Send_Buff[i+8] = signature[i]; //signature[i];
  }
  alt_avalon_spi_command(SPI_0_BASE, 0, 40, Send_Buff, 0, Get_Buff, 0);
    9720:	e0fff204 	addi	r3,fp,-56
    9724:	d8000215 	stw	zero,8(sp)
    9728:	e0bffc04 	addi	r2,fp,-16
    972c:	d8800115 	stw	r2,4(sp)
    9730:	d8000015 	stw	zero,0(sp)
    9734:	180f883a 	mov	r7,r3
    9738:	01800a04 	movi	r6,40
    973c:	000b883a 	mov	r5,zero
    9740:	01000074 	movhi	r4,1
    9744:	21040004 	addi	r4,r4,4096
    9748:	000bbc80 	call	bbc8 <alt_avalon_spi_command>
  while(WB_RPMC_ReadRPMCstatus(0)&0x01==0x01){
    974c:	0001883a 	nop
    9750:	0009883a 	mov	r4,zero
    9754:	0008ccc0 	call	8ccc <WB_RPMC_ReadRPMCstatus>
    9758:	1080004c 	andi	r2,r2,1
    975c:	103ffc1e 	bne	r2,zero,9750 <_gp+0xffff4848>
	// wait until RPMC operation done
  }
  return WB_RPMC_ReadRPMCstatus(0);
    9760:	0009883a 	mov	r4,zero
    9764:	0008ccc0 	call	8ccc <WB_RPMC_ReadRPMCstatus>
}
    9768:	e037883a 	mov	sp,fp
    976c:	dfc00117 	ldw	ra,4(sp)
    9770:	df000017 	ldw	fp,0(sp)
    9774:	dec00204 	addi	sp,sp,8
    9778:	f800283a 	ret

0000977c <WB_RPMC_Challenge>:
	input_tag: 12 byte input Tag data, which can be time stamp, serial number or random number.
return:
	Challlenge result. if signature match, return 0.
date: 2015/12/09
*********************/
unsigned char WB_RPMC_Challenge(unsigned int cadr, unsigned char *hmackey,unsigned char *input_tag){
    977c:	defff104 	addi	sp,sp,-60
    9780:	dfc00e15 	stw	ra,56(sp)
    9784:	df000d15 	stw	fp,52(sp)
    9788:	df000d04 	addi	fp,sp,52
    978c:	e13ffd15 	stw	r4,-12(fp)
    9790:	e17ffe15 	stw	r5,-8(fp)
    9794:	e1bfff15 	stw	r6,-4(fp)
	unsigned char Verify_signature[32];	// signature for verification. should match signature[32]
	unsigned int i;
	WB_RPMC_ReqCounter(cadr, hmackey, input_tag);
    9798:	e1bfff17 	ldw	r6,-4(fp)
    979c:	e17ffe17 	ldw	r5,-8(fp)
    97a0:	e13ffd17 	ldw	r4,-12(fp)
    97a4:	0008f380 	call	8f38 <WB_RPMC_ReqCounter>
	WB_RPMC_ReadRPMCstatus(1);	// Get counter information. In this stage, tag[12], counter[4], signature[32] is updated.
    97a8:	01000044 	movi	r4,1
    97ac:	0008ccc0 	call	8ccc <WB_RPMC_ReadRPMCstatus>
	// Comment: the message using for signature is tag[0:11]+count[0:3] data, you can also use memcpy to casecade these data
	/*
	memcpy(message, tag, 12);
	memcpy(message+12, counter, 4);
	*/
	for(i = 0; i < 12; i++){
    97b0:	e03ff415 	stw	zero,-48(fp)
    97b4:	00000d06 	br	97ec <WB_RPMC_Challenge+0x70>
		message[i] = tag[i];	// message [0:11] = tag[0:11]
    97b8:	00800074 	movhi	r2,1
    97bc:	10b48404 	addi	r2,r2,-11760
    97c0:	e0fff417 	ldw	r3,-48(fp)
    97c4:	10c5883a 	add	r2,r2,r3
    97c8:	10c00003 	ldbu	r3,0(r2)
    97cc:	00800074 	movhi	r2,1
    97d0:	10b48f04 	addi	r2,r2,-11716
    97d4:	e13ff417 	ldw	r4,-48(fp)
    97d8:	1105883a 	add	r2,r2,r4
    97dc:	10c00005 	stb	r3,0(r2)
	// Comment: the message using for signature is tag[0:11]+count[0:3] data, you can also use memcpy to casecade these data
	/*
	memcpy(message, tag, 12);
	memcpy(message+12, counter, 4);
	*/
	for(i = 0; i < 12; i++){
    97e0:	e0bff417 	ldw	r2,-48(fp)
    97e4:	10800044 	addi	r2,r2,1
    97e8:	e0bff415 	stw	r2,-48(fp)
    97ec:	e0bff417 	ldw	r2,-48(fp)
    97f0:	10800330 	cmpltui	r2,r2,12
    97f4:	103ff01e 	bne	r2,zero,97b8 <_gp+0xffff48b0>
		message[i] = tag[i];	// message [0:11] = tag[0:11]
	}
	for(i = 0; i < 4; i++){
    97f8:	e03ff415 	stw	zero,-48(fp)
    97fc:	00000d06 	br	9834 <WB_RPMC_Challenge+0xb8>
		message[12+i] = counter[i];	// message [12:15] = counter[0:3]  //count[i];
    9800:	e0bff417 	ldw	r2,-48(fp)
    9804:	11000304 	addi	r4,r2,12
    9808:	e0fff417 	ldw	r3,-48(fp)
    980c:	d0a0bd04 	addi	r2,gp,-32012
    9810:	1885883a 	add	r2,r3,r2
    9814:	10c00003 	ldbu	r3,0(r2)
    9818:	00800074 	movhi	r2,1
    981c:	10b48f04 	addi	r2,r2,-11716
    9820:	1105883a 	add	r2,r2,r4
    9824:	10c00005 	stb	r3,0(r2)
	memcpy(message+12, counter, 4);
	*/
	for(i = 0; i < 12; i++){
		message[i] = tag[i];	// message [0:11] = tag[0:11]
	}
	for(i = 0; i < 4; i++){
    9828:	e0bff417 	ldw	r2,-48(fp)
    982c:	10800044 	addi	r2,r2,1
    9830:	e0bff415 	stw	r2,-48(fp)
    9834:	e0bff417 	ldw	r2,-48(fp)
    9838:	10800130 	cmpltui	r2,r2,4
    983c:	103ff01e 	bne	r2,zero,9800 <_gp+0xffff48f8>
		message[12+i] = counter[i];	// message [12:15] = counter[0:3]  //count[i];
	}
	hmacsha256(hmackey,32,message,16,Verify_signature);	// Verification signature should as same as security output
    9840:	e0bff504 	addi	r2,fp,-44
    9844:	d8800015 	stw	r2,0(sp)
    9848:	01c00404 	movi	r7,16
    984c:	01800074 	movhi	r6,1
    9850:	31b48f04 	addi	r6,r6,-11716
    9854:	01400804 	movi	r5,32
    9858:	e13ffe17 	ldw	r4,-8(fp)
    985c:	000a6ac0 	call	a6ac <hmacsha256>
	printf("Verify_signature:\r\n");
    9860:	01000074 	movhi	r4,1
    9864:	21326604 	addi	r4,r4,-13928
    9868:	000acd00 	call	acd0 <puts>
	for(i = 0; i < 32; i++){
    986c:	e03ff415 	stw	zero,-48(fp)
    9870:	00000c06 	br	98a4 <WB_RPMC_Challenge+0x128>
		printf("%d ",Verify_signature[i]);
    9874:	e0fff504 	addi	r3,fp,-44
    9878:	e0bff417 	ldw	r2,-48(fp)
    987c:	1885883a 	add	r2,r3,r2
    9880:	10800003 	ldbu	r2,0(r2)
    9884:	10803fcc 	andi	r2,r2,255
    9888:	100b883a 	mov	r5,r2
    988c:	01000074 	movhi	r4,1
    9890:	21325204 	addi	r4,r4,-14008
    9894:	000abe00 	call	abe0 <printf>
	for(i = 0; i < 4; i++){
		message[12+i] = counter[i];	// message [12:15] = counter[0:3]  //count[i];
	}
	hmacsha256(hmackey,32,message,16,Verify_signature);	// Verification signature should as same as security output
	printf("Verify_signature:\r\n");
	for(i = 0; i < 32; i++){
    9898:	e0bff417 	ldw	r2,-48(fp)
    989c:	10800044 	addi	r2,r2,1
    98a0:	e0bff415 	stw	r2,-48(fp)
    98a4:	e0bff417 	ldw	r2,-48(fp)
    98a8:	10800830 	cmpltui	r2,r2,32
    98ac:	103ff11e 	bne	r2,zero,9874 <_gp+0xffff496c>
		printf("%d ",Verify_signature[i]);
	}
	printf("\n");
    98b0:	01000284 	movi	r4,10
    98b4:	000ac340 	call	ac34 <putchar>
	return memcmp(Verify_signature, signature, 32);		// Compare Verification signature (computed by controllor) and internal signature (return from security Flash by request counter operation)
    98b8:	e0bff504 	addi	r2,fp,-44
    98bc:	01800804 	movi	r6,32
    98c0:	01400074 	movhi	r5,1
    98c4:	29748704 	addi	r5,r5,-11748
    98c8:	1009883a 	mov	r4,r2
    98cc:	000ab2c0 	call	ab2c <memcmp>
}
    98d0:	e037883a 	mov	sp,fp
    98d4:	dfc00117 	ldw	ra,4(sp)
    98d8:	df000017 	ldw	fp,0(sp)
    98dc:	dec00204 	addi	sp,sp,8
    98e0:	f800283a 	ret

000098e4 <sha256>:
//unsigned char message[16];
//unsigned char counter[4];
//unsigned char tag[12];
//unsigned char signature[32];

void sha256(unsigned char *text1 ,unsigned char *output,unsigned int length) {
    98e4:	deffe004 	addi	sp,sp,-128
    98e8:	dfc01f15 	stw	ra,124(sp)
    98ec:	df001e15 	stw	fp,120(sp)
    98f0:	df001e04 	addi	fp,sp,120
    98f4:	e13ffd15 	stw	r4,-12(fp)
    98f8:	e17ffe15 	stw	r5,-8(fp)
    98fc:	e1bfff15 	stw	r6,-4(fp)
	//volatile unsigned long a,b,c,d,e,f,g,h,t1,t2,m[64];
	//volatile unsigned int length1;
	//volatile unsigned char hash[32];
	SHA256_CTX ctx;
	//initial
	sha256_init(&ctx);
    9900:	e13fe204 	addi	r4,fp,-120
    9904:	000993c0 	call	993c <sha256_init>
	sha256_update(&ctx,text1,length);
    9908:	e1bfff17 	ldw	r6,-4(fp)
    990c:	e17ffd17 	ldw	r5,-12(fp)
    9910:	e13fe204 	addi	r4,fp,-120
    9914:	00099f80 	call	99f8 <sha256_update>
	sha256_final(&ctx,output);
    9918:	e17ffe17 	ldw	r5,-8(fp)
    991c:	e13fe204 	addi	r4,fp,-120
    9920:	0009ae40 	call	9ae4 <sha256_final>
}
    9924:	0001883a 	nop
    9928:	e037883a 	mov	sp,fp
    992c:	dfc00117 	ldw	ra,4(sp)
    9930:	df000017 	ldw	fp,0(sp)
    9934:	dec00204 	addi	sp,sp,8
    9938:	f800283a 	ret

0000993c <sha256_init>:

void sha256_init(SHA256_CTX *ctx) {
    993c:	defffe04 	addi	sp,sp,-8
    9940:	df000115 	stw	fp,4(sp)
    9944:	df000104 	addi	fp,sp,4
    9948:	e13fff15 	stw	r4,-4(fp)
	ctx->datalen = 0;
    994c:	e0bfff17 	ldw	r2,-4(fp)
    9950:	10001015 	stw	zero,64(r2)
	ctx->bitlen[0] = 0;
    9954:	e0bfff17 	ldw	r2,-4(fp)
    9958:	10001115 	stw	zero,68(r2)
	ctx->bitlen[1] = 0;
    995c:	e0bfff17 	ldw	r2,-4(fp)
    9960:	10001215 	stw	zero,72(r2)
	ctx->state[0] = 0x6a09e667;
    9964:	e0ffff17 	ldw	r3,-4(fp)
    9968:	009a82b4 	movhi	r2,27146
    996c:	10b999c4 	addi	r2,r2,-6553
    9970:	18801315 	stw	r2,76(r3)
	ctx->state[1] = 0xbb67ae85;
    9974:	e0ffff17 	ldw	r3,-4(fp)
    9978:	00aeda34 	movhi	r2,47976
    997c:	10aba144 	addi	r2,r2,-20859
    9980:	18801415 	stw	r2,80(r3)
	ctx->state[2] = 0x3c6ef372;
    9984:	e0ffff17 	ldw	r3,-4(fp)
    9988:	008f1bf4 	movhi	r2,15471
    998c:	10bcdc84 	addi	r2,r2,-3214
    9990:	18801515 	stw	r2,84(r3)
	ctx->state[3] = 0xa54ff53a;
    9994:	e0ffff17 	ldw	r3,-4(fp)
    9998:	00a95434 	movhi	r2,42320
    999c:	10bd4e84 	addi	r2,r2,-2758
    99a0:	18801615 	stw	r2,88(r3)
	ctx->state[4] = 0x510e527f;
    99a4:	e0ffff17 	ldw	r3,-4(fp)
    99a8:	009443b4 	movhi	r2,20750
    99ac:	10949fc4 	addi	r2,r2,21119
    99b0:	18801715 	stw	r2,92(r3)
	ctx->state[5] = 0x9b05688c;
    99b4:	e0ffff17 	ldw	r3,-4(fp)
    99b8:	00a6c174 	movhi	r2,39685
    99bc:	109a2304 	addi	r2,r2,26764
    99c0:	18801815 	stw	r2,96(r3)
	ctx->state[6] = 0x1f83d9ab;
    99c4:	e0ffff17 	ldw	r3,-4(fp)
    99c8:	0087e134 	movhi	r2,8068
    99cc:	10b66ac4 	addi	r2,r2,-9813
    99d0:	18801915 	stw	r2,100(r3)
	ctx->state[7] = 0x5be0cd19;
    99d4:	e0ffff17 	ldw	r3,-4(fp)
    99d8:	0096f874 	movhi	r2,23521
    99dc:	10b34644 	addi	r2,r2,-13031
    99e0:	18801a15 	stw	r2,104(r3)
	}
    99e4:	0001883a 	nop
    99e8:	e037883a 	mov	sp,fp
    99ec:	df000017 	ldw	fp,0(sp)
    99f0:	dec00104 	addi	sp,sp,4
    99f4:	f800283a 	ret

000099f8 <sha256_update>:

void sha256_update(SHA256_CTX *ctx, alt_u8 data[], alt_u32 len) {
    99f8:	defffa04 	addi	sp,sp,-24
    99fc:	dfc00515 	stw	ra,20(sp)
    9a00:	df000415 	stw	fp,16(sp)
    9a04:	df000404 	addi	fp,sp,16
    9a08:	e13ffd15 	stw	r4,-12(fp)
    9a0c:	e17ffe15 	stw	r5,-8(fp)
    9a10:	e1bfff15 	stw	r6,-4(fp)
	uint i;
	for (i=0; i < len; ++i) {
    9a14:	e03ffc15 	stw	zero,-16(fp)
    9a18:	00002906 	br	9ac0 <sha256_update+0xc8>
		ctx->data[ctx->datalen] = data[i];
    9a1c:	e0bffd17 	ldw	r2,-12(fp)
    9a20:	10801017 	ldw	r2,64(r2)
    9a24:	e13ffe17 	ldw	r4,-8(fp)
    9a28:	e0fffc17 	ldw	r3,-16(fp)
    9a2c:	20c7883a 	add	r3,r4,r3
    9a30:	18c00003 	ldbu	r3,0(r3)
    9a34:	e13ffd17 	ldw	r4,-12(fp)
    9a38:	2085883a 	add	r2,r4,r2
    9a3c:	10c00005 	stb	r3,0(r2)
		ctx->datalen++;
    9a40:	e0bffd17 	ldw	r2,-12(fp)
    9a44:	10801017 	ldw	r2,64(r2)
    9a48:	10c00044 	addi	r3,r2,1
    9a4c:	e0bffd17 	ldw	r2,-12(fp)
    9a50:	10c01015 	stw	r3,64(r2)
		if (ctx->datalen == 64) {
    9a54:	e0bffd17 	ldw	r2,-12(fp)
    9a58:	10801017 	ldw	r2,64(r2)
    9a5c:	10801018 	cmpnei	r2,r2,64
    9a60:	1000141e 	bne	r2,zero,9ab4 <sha256_update+0xbc>
			sha256_transform(ctx,ctx->data);
    9a64:	e0bffd17 	ldw	r2,-12(fp)
    9a68:	100b883a 	mov	r5,r2
    9a6c:	e13ffd17 	ldw	r4,-12(fp)
    9a70:	000a11c0 	call	a11c <sha256_transform>
			DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],512);
    9a74:	e0bffd17 	ldw	r2,-12(fp)
    9a78:	10801117 	ldw	r2,68(r2)
    9a7c:	00ff7fc4 	movi	r3,-513
    9a80:	1880052e 	bgeu	r3,r2,9a98 <sha256_update+0xa0>
    9a84:	e0bffd17 	ldw	r2,-12(fp)
    9a88:	10801217 	ldw	r2,72(r2)
    9a8c:	10c00044 	addi	r3,r2,1
    9a90:	e0bffd17 	ldw	r2,-12(fp)
    9a94:	10c01215 	stw	r3,72(r2)
    9a98:	e0bffd17 	ldw	r2,-12(fp)
    9a9c:	10801117 	ldw	r2,68(r2)
    9aa0:	10c08004 	addi	r3,r2,512
    9aa4:	e0bffd17 	ldw	r2,-12(fp)
    9aa8:	10c01115 	stw	r3,68(r2)
			ctx->datalen = 0;
    9aac:	e0bffd17 	ldw	r2,-12(fp)
    9ab0:	10001015 	stw	zero,64(r2)
	ctx->state[7] = 0x5be0cd19;
	}

void sha256_update(SHA256_CTX *ctx, alt_u8 data[], alt_u32 len) {
	uint i;
	for (i=0; i < len; ++i) {
    9ab4:	e0bffc17 	ldw	r2,-16(fp)
    9ab8:	10800044 	addi	r2,r2,1
    9abc:	e0bffc15 	stw	r2,-16(fp)
    9ac0:	e0fffc17 	ldw	r3,-16(fp)
    9ac4:	e0bfff17 	ldw	r2,-4(fp)
    9ac8:	18bfd436 	bltu	r3,r2,9a1c <_gp+0xffff4b14>
			sha256_transform(ctx,ctx->data);
			DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],512);
			ctx->datalen = 0;
		}
	}
}
    9acc:	0001883a 	nop
    9ad0:	e037883a 	mov	sp,fp
    9ad4:	dfc00117 	ldw	ra,4(sp)
    9ad8:	df000017 	ldw	fp,0(sp)
    9adc:	dec00204 	addi	sp,sp,8
    9ae0:	f800283a 	ret

00009ae4 <sha256_final>:
void sha256_final(SHA256_CTX *ctx, alt_u8 hash[]) {
    9ae4:	defffb04 	addi	sp,sp,-20
    9ae8:	dfc00415 	stw	ra,16(sp)
    9aec:	df000315 	stw	fp,12(sp)
    9af0:	df000304 	addi	fp,sp,12
    9af4:	e13ffe15 	stw	r4,-8(fp)
    9af8:	e17fff15 	stw	r5,-4(fp)
	alt_u32 i;

	i = ctx->datalen;
    9afc:	e0bffe17 	ldw	r2,-8(fp)
    9b00:	10801017 	ldw	r2,64(r2)
    9b04:	e0bffd15 	stw	r2,-12(fp)

	// Pad whatever data is left in the buffer.
	if (ctx->datalen < 56) {
    9b08:	e0bffe17 	ldw	r2,-8(fp)
    9b0c:	10801017 	ldw	r2,64(r2)
    9b10:	10800e28 	cmpgeui	r2,r2,56
    9b14:	1000121e 	bne	r2,zero,9b60 <sha256_final+0x7c>
		ctx->data[i++] = 0x80;
    9b18:	e0bffd17 	ldw	r2,-12(fp)
    9b1c:	10c00044 	addi	r3,r2,1
    9b20:	e0fffd15 	stw	r3,-12(fp)
    9b24:	e0fffe17 	ldw	r3,-8(fp)
    9b28:	1885883a 	add	r2,r3,r2
    9b2c:	00ffe004 	movi	r3,-128
    9b30:	10c00005 	stb	r3,0(r2)
		while (i < 56)
    9b34:	00000606 	br	9b50 <sha256_final+0x6c>
			ctx->data[i++] = 0x00;
    9b38:	e0bffd17 	ldw	r2,-12(fp)
    9b3c:	10c00044 	addi	r3,r2,1
    9b40:	e0fffd15 	stw	r3,-12(fp)
    9b44:	e0fffe17 	ldw	r3,-8(fp)
    9b48:	1885883a 	add	r2,r3,r2
    9b4c:	10000005 	stb	zero,0(r2)
	i = ctx->datalen;

	// Pad whatever data is left in the buffer.
	if (ctx->datalen < 56) {
		ctx->data[i++] = 0x80;
		while (i < 56)
    9b50:	e0bffd17 	ldw	r2,-12(fp)
    9b54:	10800e30 	cmpltui	r2,r2,56
    9b58:	103ff71e 	bne	r2,zero,9b38 <_gp+0xffff4c30>
    9b5c:	00001a06 	br	9bc8 <sha256_final+0xe4>
			ctx->data[i++] = 0x00;
	}
	else {
		ctx->data[i++] = 0x80;
    9b60:	e0bffd17 	ldw	r2,-12(fp)
    9b64:	10c00044 	addi	r3,r2,1
    9b68:	e0fffd15 	stw	r3,-12(fp)
    9b6c:	e0fffe17 	ldw	r3,-8(fp)
    9b70:	1885883a 	add	r2,r3,r2
    9b74:	00ffe004 	movi	r3,-128
    9b78:	10c00005 	stb	r3,0(r2)
		while (i < 64)
    9b7c:	00000606 	br	9b98 <sha256_final+0xb4>
			ctx->data[i++] = 0x00;
    9b80:	e0bffd17 	ldw	r2,-12(fp)
    9b84:	10c00044 	addi	r3,r2,1
    9b88:	e0fffd15 	stw	r3,-12(fp)
    9b8c:	e0fffe17 	ldw	r3,-8(fp)
    9b90:	1885883a 	add	r2,r3,r2
    9b94:	10000005 	stb	zero,0(r2)
		while (i < 56)
			ctx->data[i++] = 0x00;
	}
	else {
		ctx->data[i++] = 0x80;
		while (i < 64)
    9b98:	e0bffd17 	ldw	r2,-12(fp)
    9b9c:	10801030 	cmpltui	r2,r2,64
    9ba0:	103ff71e 	bne	r2,zero,9b80 <_gp+0xffff4c78>
			ctx->data[i++] = 0x00;
		sha256_transform(ctx,ctx->data);
    9ba4:	e0bffe17 	ldw	r2,-8(fp)
    9ba8:	100b883a 	mov	r5,r2
    9bac:	e13ffe17 	ldw	r4,-8(fp)
    9bb0:	000a11c0 	call	a11c <sha256_transform>
		memset(ctx->data,0,56);
    9bb4:	e0bffe17 	ldw	r2,-8(fp)
    9bb8:	01800e04 	movi	r6,56
    9bbc:	000b883a 	mov	r5,zero
    9bc0:	1009883a 	mov	r4,r2
    9bc4:	000ab840 	call	ab84 <memset>
	}

	// Append to the padding the total message's length in bits and transform.
	DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],ctx->datalen * 8);
    9bc8:	e0bffe17 	ldw	r2,-8(fp)
    9bcc:	10801117 	ldw	r2,68(r2)
    9bd0:	e0fffe17 	ldw	r3,-8(fp)
    9bd4:	18c01017 	ldw	r3,64(r3)
    9bd8:	180690fa 	slli	r3,r3,3
    9bdc:	00c6303a 	nor	r3,zero,r3
    9be0:	1880052e 	bgeu	r3,r2,9bf8 <sha256_final+0x114>
    9be4:	e0bffe17 	ldw	r2,-8(fp)
    9be8:	10801217 	ldw	r2,72(r2)
    9bec:	10c00044 	addi	r3,r2,1
    9bf0:	e0bffe17 	ldw	r2,-8(fp)
    9bf4:	10c01215 	stw	r3,72(r2)
    9bf8:	e0bffe17 	ldw	r2,-8(fp)
    9bfc:	10c01117 	ldw	r3,68(r2)
    9c00:	e0bffe17 	ldw	r2,-8(fp)
    9c04:	10801017 	ldw	r2,64(r2)
    9c08:	100490fa 	slli	r2,r2,3
    9c0c:	1887883a 	add	r3,r3,r2
    9c10:	e0bffe17 	ldw	r2,-8(fp)
    9c14:	10c01115 	stw	r3,68(r2)
	ctx->data[63] = ctx->bitlen[0];
    9c18:	e0bffe17 	ldw	r2,-8(fp)
    9c1c:	10801117 	ldw	r2,68(r2)
    9c20:	1007883a 	mov	r3,r2
    9c24:	e0bffe17 	ldw	r2,-8(fp)
    9c28:	10c00fc5 	stb	r3,63(r2)
	//ctx->data[62] = ctx->bitlen[0] >> 8;
	//ctx->data[61] = ctx->bitlen[0] >> 16;
	//ctx->data[60] = ctx->bitlen[0] >> 24;
	ctx->data[62] = ctx->bitlen[0] /0x100;
    9c2c:	e0bffe17 	ldw	r2,-8(fp)
    9c30:	10801117 	ldw	r2,68(r2)
    9c34:	1004d23a 	srli	r2,r2,8
    9c38:	1007883a 	mov	r3,r2
    9c3c:	e0bffe17 	ldw	r2,-8(fp)
    9c40:	10c00f85 	stb	r3,62(r2)
	ctx->data[61] = ctx->bitlen[0] /0x10000;
    9c44:	e0bffe17 	ldw	r2,-8(fp)
    9c48:	10801117 	ldw	r2,68(r2)
    9c4c:	1004d43a 	srli	r2,r2,16
    9c50:	1007883a 	mov	r3,r2
    9c54:	e0bffe17 	ldw	r2,-8(fp)
    9c58:	10c00f45 	stb	r3,61(r2)
	ctx->data[60] = ctx->bitlen[0] /0x1000000;
    9c5c:	e0bffe17 	ldw	r2,-8(fp)
    9c60:	10801117 	ldw	r2,68(r2)
    9c64:	1004d63a 	srli	r2,r2,24
    9c68:	1007883a 	mov	r3,r2
    9c6c:	e0bffe17 	ldw	r2,-8(fp)
    9c70:	10c00f05 	stb	r3,60(r2)
	ctx->data[59] = ctx->bitlen[1];
    9c74:	e0bffe17 	ldw	r2,-8(fp)
    9c78:	10801217 	ldw	r2,72(r2)
    9c7c:	1007883a 	mov	r3,r2
    9c80:	e0bffe17 	ldw	r2,-8(fp)
    9c84:	10c00ec5 	stb	r3,59(r2)
	//ctx->data[58] = ctx->bitlen[1] >> 8;
	//ctx->data[57] = ctx->bitlen[1] >> 16;
	//ctx->data[56] = ctx->bitlen[1] >> 24;
	ctx->data[58] = ctx->bitlen[1] /0x100;
    9c88:	e0bffe17 	ldw	r2,-8(fp)
    9c8c:	10801217 	ldw	r2,72(r2)
    9c90:	1004d23a 	srli	r2,r2,8
    9c94:	1007883a 	mov	r3,r2
    9c98:	e0bffe17 	ldw	r2,-8(fp)
    9c9c:	10c00e85 	stb	r3,58(r2)
	ctx->data[57] = ctx->bitlen[1] /0x10000;
    9ca0:	e0bffe17 	ldw	r2,-8(fp)
    9ca4:	10801217 	ldw	r2,72(r2)
    9ca8:	1004d43a 	srli	r2,r2,16
    9cac:	1007883a 	mov	r3,r2
    9cb0:	e0bffe17 	ldw	r2,-8(fp)
    9cb4:	10c00e45 	stb	r3,57(r2)
	ctx->data[56] = ctx->bitlen[1] /0x1000000;
    9cb8:	e0bffe17 	ldw	r2,-8(fp)
    9cbc:	10801217 	ldw	r2,72(r2)
    9cc0:	1004d63a 	srli	r2,r2,24
    9cc4:	1007883a 	mov	r3,r2
    9cc8:	e0bffe17 	ldw	r2,-8(fp)
    9ccc:	10c00e05 	stb	r3,56(r2)
	sha256_transform(ctx,ctx->data);
    9cd0:	e0bffe17 	ldw	r2,-8(fp)
    9cd4:	100b883a 	mov	r5,r2
    9cd8:	e13ffe17 	ldw	r4,-8(fp)
    9cdc:	000a11c0 	call	a11c <sha256_transform>

	// Since this implementation uses little endian byte ordering and SHA uses big endian,
	// reverse all the bytes when copying the final state to the output hash.
	for (i=0; i < 4; ++i) {/*
    9ce0:	e03ffd15 	stw	zero,-12(fp)
    9ce4:	00010406 	br	a0f8 <sha256_final+0x614>
		hash[i+16] = (ctx->state[4] >> (24-i*8)) & 0x000000ff;
		hash[i+20] = (ctx->state[5] >> (24-i*8)) & 0x000000ff;
		hash[i+24] = (ctx->state[6] >> (24-i*8)) & 0x000000ff;
		hash[i+28] = (ctx->state[7] >> (24-i*8)) & 0x000000ff;
		*/
		switch (i)
    9ce8:	e0bffd17 	ldw	r2,-12(fp)
    9cec:	10c00060 	cmpeqi	r3,r2,1
    9cf0:	1800461e 	bne	r3,zero,9e0c <sha256_final+0x328>
    9cf4:	0080052e 	bgeu	zero,r2,9d0c <sha256_final+0x228>
    9cf8:	10c000a0 	cmpeqi	r3,r2,2
    9cfc:	1800831e 	bne	r3,zero,9f0c <sha256_final+0x428>
    9d00:	108000e0 	cmpeqi	r2,r2,3
    9d04:	1000c11e 	bne	r2,zero,a00c <sha256_final+0x528>
    9d08:	0000f806 	br	a0ec <sha256_final+0x608>
		{
		case 0:
			hash[i]    = (ctx->state[0] /0x1000000) & 0x000000ff;
    9d0c:	e0ffff17 	ldw	r3,-4(fp)
    9d10:	e0bffd17 	ldw	r2,-12(fp)
    9d14:	1885883a 	add	r2,r3,r2
    9d18:	e0fffe17 	ldw	r3,-8(fp)
    9d1c:	18c01317 	ldw	r3,76(r3)
    9d20:	1806d63a 	srli	r3,r3,24
    9d24:	10c00005 	stb	r3,0(r2)
			hash[i+4]  = (ctx->state[1] /0x1000000) & 0x000000ff;
    9d28:	e0bffd17 	ldw	r2,-12(fp)
    9d2c:	10800104 	addi	r2,r2,4
    9d30:	e0ffff17 	ldw	r3,-4(fp)
    9d34:	1885883a 	add	r2,r3,r2
    9d38:	e0fffe17 	ldw	r3,-8(fp)
    9d3c:	18c01417 	ldw	r3,80(r3)
    9d40:	1806d63a 	srli	r3,r3,24
    9d44:	10c00005 	stb	r3,0(r2)
			hash[i+8]  = (ctx->state[2] /0x1000000) & 0x000000ff;
    9d48:	e0bffd17 	ldw	r2,-12(fp)
    9d4c:	10800204 	addi	r2,r2,8
    9d50:	e0ffff17 	ldw	r3,-4(fp)
    9d54:	1885883a 	add	r2,r3,r2
    9d58:	e0fffe17 	ldw	r3,-8(fp)
    9d5c:	18c01517 	ldw	r3,84(r3)
    9d60:	1806d63a 	srli	r3,r3,24
    9d64:	10c00005 	stb	r3,0(r2)
			hash[i+12] = (ctx->state[3] /0x1000000) & 0x000000ff;
    9d68:	e0bffd17 	ldw	r2,-12(fp)
    9d6c:	10800304 	addi	r2,r2,12
    9d70:	e0ffff17 	ldw	r3,-4(fp)
    9d74:	1885883a 	add	r2,r3,r2
    9d78:	e0fffe17 	ldw	r3,-8(fp)
    9d7c:	18c01617 	ldw	r3,88(r3)
    9d80:	1806d63a 	srli	r3,r3,24
    9d84:	10c00005 	stb	r3,0(r2)
			hash[i+16] = (ctx->state[4] /0x1000000) & 0x000000ff;
    9d88:	e0bffd17 	ldw	r2,-12(fp)
    9d8c:	10800404 	addi	r2,r2,16
    9d90:	e0ffff17 	ldw	r3,-4(fp)
    9d94:	1885883a 	add	r2,r3,r2
    9d98:	e0fffe17 	ldw	r3,-8(fp)
    9d9c:	18c01717 	ldw	r3,92(r3)
    9da0:	1806d63a 	srli	r3,r3,24
    9da4:	10c00005 	stb	r3,0(r2)
			hash[i+20] = (ctx->state[5] /0x1000000) & 0x000000ff;
    9da8:	e0bffd17 	ldw	r2,-12(fp)
    9dac:	10800504 	addi	r2,r2,20
    9db0:	e0ffff17 	ldw	r3,-4(fp)
    9db4:	1885883a 	add	r2,r3,r2
    9db8:	e0fffe17 	ldw	r3,-8(fp)
    9dbc:	18c01817 	ldw	r3,96(r3)
    9dc0:	1806d63a 	srli	r3,r3,24
    9dc4:	10c00005 	stb	r3,0(r2)
			hash[i+24] = (ctx->state[6] /0x1000000) & 0x000000ff;
    9dc8:	e0bffd17 	ldw	r2,-12(fp)
    9dcc:	10800604 	addi	r2,r2,24
    9dd0:	e0ffff17 	ldw	r3,-4(fp)
    9dd4:	1885883a 	add	r2,r3,r2
    9dd8:	e0fffe17 	ldw	r3,-8(fp)
    9ddc:	18c01917 	ldw	r3,100(r3)
    9de0:	1806d63a 	srli	r3,r3,24
    9de4:	10c00005 	stb	r3,0(r2)
			hash[i+28] = (ctx->state[7] /0x1000000) & 0x000000ff;
    9de8:	e0bffd17 	ldw	r2,-12(fp)
    9dec:	10800704 	addi	r2,r2,28
    9df0:	e0ffff17 	ldw	r3,-4(fp)
    9df4:	1885883a 	add	r2,r3,r2
    9df8:	e0fffe17 	ldw	r3,-8(fp)
    9dfc:	18c01a17 	ldw	r3,104(r3)
    9e00:	1806d63a 	srli	r3,r3,24
    9e04:	10c00005 	stb	r3,0(r2)
			break;
    9e08:	0000b806 	br	a0ec <sha256_final+0x608>
		case 1:
			hash[i]    = (ctx->state[0] /0x10000) & 0x000000ff;
    9e0c:	e0ffff17 	ldw	r3,-4(fp)
    9e10:	e0bffd17 	ldw	r2,-12(fp)
    9e14:	1885883a 	add	r2,r3,r2
    9e18:	e0fffe17 	ldw	r3,-8(fp)
    9e1c:	18c01317 	ldw	r3,76(r3)
    9e20:	1806d43a 	srli	r3,r3,16
    9e24:	10c00005 	stb	r3,0(r2)
			hash[i+4]  = (ctx->state[1] /0x10000) & 0x000000ff;
    9e28:	e0bffd17 	ldw	r2,-12(fp)
    9e2c:	10800104 	addi	r2,r2,4
    9e30:	e0ffff17 	ldw	r3,-4(fp)
    9e34:	1885883a 	add	r2,r3,r2
    9e38:	e0fffe17 	ldw	r3,-8(fp)
    9e3c:	18c01417 	ldw	r3,80(r3)
    9e40:	1806d43a 	srli	r3,r3,16
    9e44:	10c00005 	stb	r3,0(r2)
			hash[i+8]  = (ctx->state[2] /0x10000) & 0x000000ff;
    9e48:	e0bffd17 	ldw	r2,-12(fp)
    9e4c:	10800204 	addi	r2,r2,8
    9e50:	e0ffff17 	ldw	r3,-4(fp)
    9e54:	1885883a 	add	r2,r3,r2
    9e58:	e0fffe17 	ldw	r3,-8(fp)
    9e5c:	18c01517 	ldw	r3,84(r3)
    9e60:	1806d43a 	srli	r3,r3,16
    9e64:	10c00005 	stb	r3,0(r2)
			hash[i+12] = (ctx->state[3] /0x10000) & 0x000000ff;
    9e68:	e0bffd17 	ldw	r2,-12(fp)
    9e6c:	10800304 	addi	r2,r2,12
    9e70:	e0ffff17 	ldw	r3,-4(fp)
    9e74:	1885883a 	add	r2,r3,r2
    9e78:	e0fffe17 	ldw	r3,-8(fp)
    9e7c:	18c01617 	ldw	r3,88(r3)
    9e80:	1806d43a 	srli	r3,r3,16
    9e84:	10c00005 	stb	r3,0(r2)
			hash[i+16] = (ctx->state[4] /0x10000) & 0x000000ff;
    9e88:	e0bffd17 	ldw	r2,-12(fp)
    9e8c:	10800404 	addi	r2,r2,16
    9e90:	e0ffff17 	ldw	r3,-4(fp)
    9e94:	1885883a 	add	r2,r3,r2
    9e98:	e0fffe17 	ldw	r3,-8(fp)
    9e9c:	18c01717 	ldw	r3,92(r3)
    9ea0:	1806d43a 	srli	r3,r3,16
    9ea4:	10c00005 	stb	r3,0(r2)
			hash[i+20] = (ctx->state[5] /0x10000) & 0x000000ff;
    9ea8:	e0bffd17 	ldw	r2,-12(fp)
    9eac:	10800504 	addi	r2,r2,20
    9eb0:	e0ffff17 	ldw	r3,-4(fp)
    9eb4:	1885883a 	add	r2,r3,r2
    9eb8:	e0fffe17 	ldw	r3,-8(fp)
    9ebc:	18c01817 	ldw	r3,96(r3)
    9ec0:	1806d43a 	srli	r3,r3,16
    9ec4:	10c00005 	stb	r3,0(r2)
			hash[i+24] = (ctx->state[6] /0x10000) & 0x000000ff;
    9ec8:	e0bffd17 	ldw	r2,-12(fp)
    9ecc:	10800604 	addi	r2,r2,24
    9ed0:	e0ffff17 	ldw	r3,-4(fp)
    9ed4:	1885883a 	add	r2,r3,r2
    9ed8:	e0fffe17 	ldw	r3,-8(fp)
    9edc:	18c01917 	ldw	r3,100(r3)
    9ee0:	1806d43a 	srli	r3,r3,16
    9ee4:	10c00005 	stb	r3,0(r2)
			hash[i+28] = (ctx->state[7] /0x10000) & 0x000000ff;
    9ee8:	e0bffd17 	ldw	r2,-12(fp)
    9eec:	10800704 	addi	r2,r2,28
    9ef0:	e0ffff17 	ldw	r3,-4(fp)
    9ef4:	1885883a 	add	r2,r3,r2
    9ef8:	e0fffe17 	ldw	r3,-8(fp)
    9efc:	18c01a17 	ldw	r3,104(r3)
    9f00:	1806d43a 	srli	r3,r3,16
    9f04:	10c00005 	stb	r3,0(r2)
			break;
    9f08:	00007806 	br	a0ec <sha256_final+0x608>
		case 2:
			hash[i]    = (ctx->state[0] /0x100) & 0x000000ff;
    9f0c:	e0ffff17 	ldw	r3,-4(fp)
    9f10:	e0bffd17 	ldw	r2,-12(fp)
    9f14:	1885883a 	add	r2,r3,r2
    9f18:	e0fffe17 	ldw	r3,-8(fp)
    9f1c:	18c01317 	ldw	r3,76(r3)
    9f20:	1806d23a 	srli	r3,r3,8
    9f24:	10c00005 	stb	r3,0(r2)
			hash[i+4]  = (ctx->state[1] /0x100) & 0x000000ff;
    9f28:	e0bffd17 	ldw	r2,-12(fp)
    9f2c:	10800104 	addi	r2,r2,4
    9f30:	e0ffff17 	ldw	r3,-4(fp)
    9f34:	1885883a 	add	r2,r3,r2
    9f38:	e0fffe17 	ldw	r3,-8(fp)
    9f3c:	18c01417 	ldw	r3,80(r3)
    9f40:	1806d23a 	srli	r3,r3,8
    9f44:	10c00005 	stb	r3,0(r2)
			hash[i+8]  = (ctx->state[2] /0x100) & 0x000000ff;
    9f48:	e0bffd17 	ldw	r2,-12(fp)
    9f4c:	10800204 	addi	r2,r2,8
    9f50:	e0ffff17 	ldw	r3,-4(fp)
    9f54:	1885883a 	add	r2,r3,r2
    9f58:	e0fffe17 	ldw	r3,-8(fp)
    9f5c:	18c01517 	ldw	r3,84(r3)
    9f60:	1806d23a 	srli	r3,r3,8
    9f64:	10c00005 	stb	r3,0(r2)
			hash[i+12] = (ctx->state[3] /0x100) & 0x000000ff;
    9f68:	e0bffd17 	ldw	r2,-12(fp)
    9f6c:	10800304 	addi	r2,r2,12
    9f70:	e0ffff17 	ldw	r3,-4(fp)
    9f74:	1885883a 	add	r2,r3,r2
    9f78:	e0fffe17 	ldw	r3,-8(fp)
    9f7c:	18c01617 	ldw	r3,88(r3)
    9f80:	1806d23a 	srli	r3,r3,8
    9f84:	10c00005 	stb	r3,0(r2)
			hash[i+16] = (ctx->state[4] /0x100) & 0x000000ff;
    9f88:	e0bffd17 	ldw	r2,-12(fp)
    9f8c:	10800404 	addi	r2,r2,16
    9f90:	e0ffff17 	ldw	r3,-4(fp)
    9f94:	1885883a 	add	r2,r3,r2
    9f98:	e0fffe17 	ldw	r3,-8(fp)
    9f9c:	18c01717 	ldw	r3,92(r3)
    9fa0:	1806d23a 	srli	r3,r3,8
    9fa4:	10c00005 	stb	r3,0(r2)
			hash[i+20] = (ctx->state[5] /0x100) & 0x000000ff;
    9fa8:	e0bffd17 	ldw	r2,-12(fp)
    9fac:	10800504 	addi	r2,r2,20
    9fb0:	e0ffff17 	ldw	r3,-4(fp)
    9fb4:	1885883a 	add	r2,r3,r2
    9fb8:	e0fffe17 	ldw	r3,-8(fp)
    9fbc:	18c01817 	ldw	r3,96(r3)
    9fc0:	1806d23a 	srli	r3,r3,8
    9fc4:	10c00005 	stb	r3,0(r2)
			hash[i+24] = (ctx->state[6] /0x100) & 0x000000ff;
    9fc8:	e0bffd17 	ldw	r2,-12(fp)
    9fcc:	10800604 	addi	r2,r2,24
    9fd0:	e0ffff17 	ldw	r3,-4(fp)
    9fd4:	1885883a 	add	r2,r3,r2
    9fd8:	e0fffe17 	ldw	r3,-8(fp)
    9fdc:	18c01917 	ldw	r3,100(r3)
    9fe0:	1806d23a 	srli	r3,r3,8
    9fe4:	10c00005 	stb	r3,0(r2)
			hash[i+28] = (ctx->state[7] /0x100) & 0x000000ff;
    9fe8:	e0bffd17 	ldw	r2,-12(fp)
    9fec:	10800704 	addi	r2,r2,28
    9ff0:	e0ffff17 	ldw	r3,-4(fp)
    9ff4:	1885883a 	add	r2,r3,r2
    9ff8:	e0fffe17 	ldw	r3,-8(fp)
    9ffc:	18c01a17 	ldw	r3,104(r3)
    a000:	1806d23a 	srli	r3,r3,8
    a004:	10c00005 	stb	r3,0(r2)
			break;
    a008:	00003806 	br	a0ec <sha256_final+0x608>
		case 3:
			hash[i]    = (ctx->state[0] ) & 0x000000ff;
    a00c:	e0ffff17 	ldw	r3,-4(fp)
    a010:	e0bffd17 	ldw	r2,-12(fp)
    a014:	1885883a 	add	r2,r3,r2
    a018:	e0fffe17 	ldw	r3,-8(fp)
    a01c:	18c01317 	ldw	r3,76(r3)
    a020:	10c00005 	stb	r3,0(r2)
			hash[i+4]  = (ctx->state[1] ) & 0x000000ff;
    a024:	e0bffd17 	ldw	r2,-12(fp)
    a028:	10800104 	addi	r2,r2,4
    a02c:	e0ffff17 	ldw	r3,-4(fp)
    a030:	1885883a 	add	r2,r3,r2
    a034:	e0fffe17 	ldw	r3,-8(fp)
    a038:	18c01417 	ldw	r3,80(r3)
    a03c:	10c00005 	stb	r3,0(r2)
			hash[i+8]  = (ctx->state[2] ) & 0x000000ff;
    a040:	e0bffd17 	ldw	r2,-12(fp)
    a044:	10800204 	addi	r2,r2,8
    a048:	e0ffff17 	ldw	r3,-4(fp)
    a04c:	1885883a 	add	r2,r3,r2
    a050:	e0fffe17 	ldw	r3,-8(fp)
    a054:	18c01517 	ldw	r3,84(r3)
    a058:	10c00005 	stb	r3,0(r2)
			hash[i+12] = (ctx->state[3] ) & 0x000000ff;
    a05c:	e0bffd17 	ldw	r2,-12(fp)
    a060:	10800304 	addi	r2,r2,12
    a064:	e0ffff17 	ldw	r3,-4(fp)
    a068:	1885883a 	add	r2,r3,r2
    a06c:	e0fffe17 	ldw	r3,-8(fp)
    a070:	18c01617 	ldw	r3,88(r3)
    a074:	10c00005 	stb	r3,0(r2)
			hash[i+16] = (ctx->state[4] ) & 0x000000ff;
    a078:	e0bffd17 	ldw	r2,-12(fp)
    a07c:	10800404 	addi	r2,r2,16
    a080:	e0ffff17 	ldw	r3,-4(fp)
    a084:	1885883a 	add	r2,r3,r2
    a088:	e0fffe17 	ldw	r3,-8(fp)
    a08c:	18c01717 	ldw	r3,92(r3)
    a090:	10c00005 	stb	r3,0(r2)
			hash[i+20] = (ctx->state[5] ) & 0x000000ff;
    a094:	e0bffd17 	ldw	r2,-12(fp)
    a098:	10800504 	addi	r2,r2,20
    a09c:	e0ffff17 	ldw	r3,-4(fp)
    a0a0:	1885883a 	add	r2,r3,r2
    a0a4:	e0fffe17 	ldw	r3,-8(fp)
    a0a8:	18c01817 	ldw	r3,96(r3)
    a0ac:	10c00005 	stb	r3,0(r2)
			hash[i+24] = (ctx->state[6] ) & 0x000000ff;
    a0b0:	e0bffd17 	ldw	r2,-12(fp)
    a0b4:	10800604 	addi	r2,r2,24
    a0b8:	e0ffff17 	ldw	r3,-4(fp)
    a0bc:	1885883a 	add	r2,r3,r2
    a0c0:	e0fffe17 	ldw	r3,-8(fp)
    a0c4:	18c01917 	ldw	r3,100(r3)
    a0c8:	10c00005 	stb	r3,0(r2)
			hash[i+28] = (ctx->state[7] ) & 0x000000ff;
    a0cc:	e0bffd17 	ldw	r2,-12(fp)
    a0d0:	10800704 	addi	r2,r2,28
    a0d4:	e0ffff17 	ldw	r3,-4(fp)
    a0d8:	1885883a 	add	r2,r3,r2
    a0dc:	e0fffe17 	ldw	r3,-8(fp)
    a0e0:	18c01a17 	ldw	r3,104(r3)
    a0e4:	10c00005 	stb	r3,0(r2)
			break;
    a0e8:	0001883a 	nop
	ctx->data[56] = ctx->bitlen[1] /0x1000000;
	sha256_transform(ctx,ctx->data);

	// Since this implementation uses little endian byte ordering and SHA uses big endian,
	// reverse all the bytes when copying the final state to the output hash.
	for (i=0; i < 4; ++i) {/*
    a0ec:	e0bffd17 	ldw	r2,-12(fp)
    a0f0:	10800044 	addi	r2,r2,1
    a0f4:	e0bffd15 	stw	r2,-12(fp)
    a0f8:	e0bffd17 	ldw	r2,-12(fp)
    a0fc:	10800130 	cmpltui	r2,r2,4
    a100:	103ef91e 	bne	r2,zero,9ce8 <_gp+0xffff4de0>
			hash[i+24] = (ctx->state[6] ) & 0x000000ff;
			hash[i+28] = (ctx->state[7] ) & 0x000000ff;
			break;
		}
	}
}
    a104:	0001883a 	nop
    a108:	e037883a 	mov	sp,fp
    a10c:	dfc00117 	ldw	ra,4(sp)
    a110:	df000017 	ldw	fp,0(sp)
    a114:	dec00204 	addi	sp,sp,8
    a118:	f800283a 	ret

0000a11c <sha256_transform>:

void sha256_transform(SHA256_CTX *ctx, alt_u8 data[]) {
    a11c:	deff3004 	addi	sp,sp,-832
    a120:	dfc0cf15 	stw	ra,828(sp)
    a124:	df00ce15 	stw	fp,824(sp)
    a128:	df00ce04 	addi	fp,sp,824
    a12c:	e13ffe15 	stw	r4,-8(fp)
    a130:	e17fff15 	stw	r5,-4(fp)
	alt_u32 a,b,c,d,e,f,g,h,i,j,t1,t2,m[64];
	unsigned long data2[64] ={0}; 	// Long(original data is char)
    a134:	e0bf7e04 	addi	r2,fp,-520
    a138:	00c04004 	movi	r3,256
    a13c:	180d883a 	mov	r6,r3
    a140:	000b883a 	mov	r5,zero
    a144:	1009883a 	mov	r4,r2
    a148:	000ab840 	call	ab84 <memset>
	volatile unsigned long k[64] = {
    a14c:	00800074 	movhi	r2,1
    a150:	10b26b04 	addi	r2,r2,-13908
    a154:	e0ffbe04 	addi	r3,fp,-264
    a158:	1009883a 	mov	r4,r2
    a15c:	00804004 	movi	r2,256
    a160:	100d883a 	mov	r6,r2
    a164:	200b883a 	mov	r5,r4
    a168:	1809883a 	mov	r4,r3
    a16c:	000ab5c0 	call	ab5c <memcpy>
		0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
		0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
		0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
		0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2
	};
	for(i=0;i<64;i++)
    a170:	e03f3a15 	stw	zero,-792(fp)
    a174:	00000f06 	br	a1b4 <sha256_transform+0x98>
	{
		data2[i]=data[i]%0x100;
    a178:	e0ffff17 	ldw	r3,-4(fp)
    a17c:	e0bf3a17 	ldw	r2,-792(fp)
    a180:	1885883a 	add	r2,r3,r2
    a184:	10800003 	ldbu	r2,0(r2)
    a188:	10c03fcc 	andi	r3,r2,255
    a18c:	e0bf3a17 	ldw	r2,-792(fp)
    a190:	1085883a 	add	r2,r2,r2
    a194:	1085883a 	add	r2,r2,r2
    a198:	e13f3204 	addi	r4,fp,-824
    a19c:	2085883a 	add	r2,r4,r2
    a1a0:	10804c04 	addi	r2,r2,304
    a1a4:	10c00015 	stw	r3,0(r2)
		0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
		0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
		0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
		0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2
	};
	for(i=0;i<64;i++)
    a1a8:	e0bf3a17 	ldw	r2,-792(fp)
    a1ac:	10800044 	addi	r2,r2,1
    a1b0:	e0bf3a15 	stw	r2,-792(fp)
    a1b4:	e0bf3a17 	ldw	r2,-792(fp)
    a1b8:	10801030 	cmpltui	r2,r2,64
    a1bc:	103fee1e 	bne	r2,zero,a178 <_gp+0xffff5270>
	{
		data2[i]=data[i]%0x100;
	}
	for (i=0,j=0; i < 16; ++i, j += 4)
    a1c0:	e03f3a15 	stw	zero,-792(fp)
    a1c4:	e03f3b15 	stw	zero,-788(fp)
    a1c8:	00003206 	br	a294 <sha256_transform+0x178>
		//m[i] = (data[j] << 24) | (data[j+1] << 16) | (data[j+2] << 8) | (data[j+3]);
		m[i] = (data2[j] << 24) | (data2[j+1] << 16) | (data2[j+2] << 8) | (data2[j+3]);
    a1cc:	e0bf3b17 	ldw	r2,-788(fp)
    a1d0:	1085883a 	add	r2,r2,r2
    a1d4:	1085883a 	add	r2,r2,r2
    a1d8:	e17f3204 	addi	r5,fp,-824
    a1dc:	2885883a 	add	r2,r5,r2
    a1e0:	10804c04 	addi	r2,r2,304
    a1e4:	10800017 	ldw	r2,0(r2)
    a1e8:	1006963a 	slli	r3,r2,24
    a1ec:	e0bf3b17 	ldw	r2,-788(fp)
    a1f0:	10800044 	addi	r2,r2,1
    a1f4:	1085883a 	add	r2,r2,r2
    a1f8:	1085883a 	add	r2,r2,r2
    a1fc:	e13f3204 	addi	r4,fp,-824
    a200:	2085883a 	add	r2,r4,r2
    a204:	10804c04 	addi	r2,r2,304
    a208:	10800017 	ldw	r2,0(r2)
    a20c:	1004943a 	slli	r2,r2,16
    a210:	1886b03a 	or	r3,r3,r2
    a214:	e0bf3b17 	ldw	r2,-788(fp)
    a218:	10800084 	addi	r2,r2,2
    a21c:	1085883a 	add	r2,r2,r2
    a220:	1085883a 	add	r2,r2,r2
    a224:	e17f3204 	addi	r5,fp,-824
    a228:	2885883a 	add	r2,r5,r2
    a22c:	10804c04 	addi	r2,r2,304
    a230:	10800017 	ldw	r2,0(r2)
    a234:	1004923a 	slli	r2,r2,8
    a238:	1886b03a 	or	r3,r3,r2
    a23c:	e0bf3b17 	ldw	r2,-788(fp)
    a240:	108000c4 	addi	r2,r2,3
    a244:	1085883a 	add	r2,r2,r2
    a248:	1085883a 	add	r2,r2,r2
    a24c:	e13f3204 	addi	r4,fp,-824
    a250:	2085883a 	add	r2,r4,r2
    a254:	10804c04 	addi	r2,r2,304
    a258:	10800017 	ldw	r2,0(r2)
    a25c:	1886b03a 	or	r3,r3,r2
    a260:	e0bf3a17 	ldw	r2,-792(fp)
    a264:	1085883a 	add	r2,r2,r2
    a268:	1085883a 	add	r2,r2,r2
    a26c:	e17f3204 	addi	r5,fp,-824
    a270:	2885883a 	add	r2,r5,r2
    a274:	10800c04 	addi	r2,r2,48
    a278:	10c00015 	stw	r3,0(r2)
	};
	for(i=0;i<64;i++)
	{
		data2[i]=data[i]%0x100;
	}
	for (i=0,j=0; i < 16; ++i, j += 4)
    a27c:	e0bf3a17 	ldw	r2,-792(fp)
    a280:	10800044 	addi	r2,r2,1
    a284:	e0bf3a15 	stw	r2,-792(fp)
    a288:	e0bf3b17 	ldw	r2,-788(fp)
    a28c:	10800104 	addi	r2,r2,4
    a290:	e0bf3b15 	stw	r2,-788(fp)
    a294:	e0bf3a17 	ldw	r2,-792(fp)
    a298:	10800430 	cmpltui	r2,r2,16
    a29c:	103fcb1e 	bne	r2,zero,a1cc <_gp+0xffff52c4>
		//m[i] = (data[j] << 24) | (data[j+1] << 16) | (data[j+2] << 8) | (data[j+3]);
		m[i] = (data2[j] << 24) | (data2[j+1] << 16) | (data2[j+2] << 8) | (data2[j+3]);
	for ( ; i < 64; ++i)
    a2a0:	00005806 	br	a404 <sha256_transform+0x2e8>
		m[i] = SIG1(m[i-2]) + m[i-7] + SIG0(m[i-15]) + m[i-16];
    a2a4:	e0bf3a17 	ldw	r2,-792(fp)
    a2a8:	10bfff84 	addi	r2,r2,-2
    a2ac:	1085883a 	add	r2,r2,r2
    a2b0:	1085883a 	add	r2,r2,r2
    a2b4:	e0ff3204 	addi	r3,fp,-824
    a2b8:	1885883a 	add	r2,r3,r2
    a2bc:	10800c04 	addi	r2,r2,48
    a2c0:	10800017 	ldw	r2,0(r2)
    a2c4:	100613fa 	roli	r3,r2,15
    a2c8:	e0bf3a17 	ldw	r2,-792(fp)
    a2cc:	10bfff84 	addi	r2,r2,-2
    a2d0:	1085883a 	add	r2,r2,r2
    a2d4:	1085883a 	add	r2,r2,r2
    a2d8:	e13f3204 	addi	r4,fp,-824
    a2dc:	2085883a 	add	r2,r4,r2
    a2e0:	10800c04 	addi	r2,r2,48
    a2e4:	10800017 	ldw	r2,0(r2)
    a2e8:	1004137a 	roli	r2,r2,13
    a2ec:	1886f03a 	xor	r3,r3,r2
    a2f0:	e0bf3a17 	ldw	r2,-792(fp)
    a2f4:	10bfff84 	addi	r2,r2,-2
    a2f8:	1085883a 	add	r2,r2,r2
    a2fc:	1085883a 	add	r2,r2,r2
    a300:	e17f3204 	addi	r5,fp,-824
    a304:	2885883a 	add	r2,r5,r2
    a308:	10800c04 	addi	r2,r2,48
    a30c:	10800017 	ldw	r2,0(r2)
    a310:	1004d2ba 	srli	r2,r2,10
    a314:	1886f03a 	xor	r3,r3,r2
    a318:	e0bf3a17 	ldw	r2,-792(fp)
    a31c:	10bffe44 	addi	r2,r2,-7
    a320:	1085883a 	add	r2,r2,r2
    a324:	1085883a 	add	r2,r2,r2
    a328:	e13f3204 	addi	r4,fp,-824
    a32c:	2085883a 	add	r2,r4,r2
    a330:	10800c04 	addi	r2,r2,48
    a334:	10800017 	ldw	r2,0(r2)
    a338:	1887883a 	add	r3,r3,r2
    a33c:	e0bf3a17 	ldw	r2,-792(fp)
    a340:	10bffc44 	addi	r2,r2,-15
    a344:	1085883a 	add	r2,r2,r2
    a348:	1085883a 	add	r2,r2,r2
    a34c:	e17f3204 	addi	r5,fp,-824
    a350:	2885883a 	add	r2,r5,r2
    a354:	10800c04 	addi	r2,r2,48
    a358:	11000017 	ldw	r4,0(r2)
    a35c:	008001c4 	movi	r2,7
    a360:	2088583a 	ror	r4,r4,r2
    a364:	e0bf3a17 	ldw	r2,-792(fp)
    a368:	10bffc44 	addi	r2,r2,-15
    a36c:	1085883a 	add	r2,r2,r2
    a370:	1085883a 	add	r2,r2,r2
    a374:	e17f3204 	addi	r5,fp,-824
    a378:	2885883a 	add	r2,r5,r2
    a37c:	10800c04 	addi	r2,r2,48
    a380:	10800017 	ldw	r2,0(r2)
    a384:	100413ba 	roli	r2,r2,14
    a388:	2088f03a 	xor	r4,r4,r2
    a38c:	e0bf3a17 	ldw	r2,-792(fp)
    a390:	10bffc44 	addi	r2,r2,-15
    a394:	1085883a 	add	r2,r2,r2
    a398:	1085883a 	add	r2,r2,r2
    a39c:	e17f3204 	addi	r5,fp,-824
    a3a0:	2885883a 	add	r2,r5,r2
    a3a4:	10800c04 	addi	r2,r2,48
    a3a8:	10800017 	ldw	r2,0(r2)
    a3ac:	1004d0fa 	srli	r2,r2,3
    a3b0:	2084f03a 	xor	r2,r4,r2
    a3b4:	1887883a 	add	r3,r3,r2
    a3b8:	e0bf3a17 	ldw	r2,-792(fp)
    a3bc:	10bffc04 	addi	r2,r2,-16
    a3c0:	1085883a 	add	r2,r2,r2
    a3c4:	1085883a 	add	r2,r2,r2
    a3c8:	e13f3204 	addi	r4,fp,-824
    a3cc:	2085883a 	add	r2,r4,r2
    a3d0:	10800c04 	addi	r2,r2,48
    a3d4:	10800017 	ldw	r2,0(r2)
    a3d8:	1887883a 	add	r3,r3,r2
    a3dc:	e0bf3a17 	ldw	r2,-792(fp)
    a3e0:	1085883a 	add	r2,r2,r2
    a3e4:	1085883a 	add	r2,r2,r2
    a3e8:	e17f3204 	addi	r5,fp,-824
    a3ec:	2885883a 	add	r2,r5,r2
    a3f0:	10800c04 	addi	r2,r2,48
    a3f4:	10c00015 	stw	r3,0(r2)
		data2[i]=data[i]%0x100;
	}
	for (i=0,j=0; i < 16; ++i, j += 4)
		//m[i] = (data[j] << 24) | (data[j+1] << 16) | (data[j+2] << 8) | (data[j+3]);
		m[i] = (data2[j] << 24) | (data2[j+1] << 16) | (data2[j+2] << 8) | (data2[j+3]);
	for ( ; i < 64; ++i)
    a3f8:	e0bf3a17 	ldw	r2,-792(fp)
    a3fc:	10800044 	addi	r2,r2,1
    a400:	e0bf3a15 	stw	r2,-792(fp)
    a404:	e0bf3a17 	ldw	r2,-792(fp)
    a408:	10801030 	cmpltui	r2,r2,64
    a40c:	103fa51e 	bne	r2,zero,a2a4 <_gp+0xffff539c>
		m[i] = SIG1(m[i-2]) + m[i-7] + SIG0(m[i-15]) + m[i-16];

	a = ctx->state[0];
    a410:	e0bffe17 	ldw	r2,-8(fp)
    a414:	10801317 	ldw	r2,76(r2)
    a418:	e0bf3215 	stw	r2,-824(fp)
	b = ctx->state[1];
    a41c:	e0bffe17 	ldw	r2,-8(fp)
    a420:	10801417 	ldw	r2,80(r2)
    a424:	e0bf3315 	stw	r2,-820(fp)
	c = ctx->state[2];
    a428:	e0bffe17 	ldw	r2,-8(fp)
    a42c:	10801517 	ldw	r2,84(r2)
    a430:	e0bf3415 	stw	r2,-816(fp)
	d = ctx->state[3];
    a434:	e0bffe17 	ldw	r2,-8(fp)
    a438:	10801617 	ldw	r2,88(r2)
    a43c:	e0bf3515 	stw	r2,-812(fp)
	e = ctx->state[4];
    a440:	e0bffe17 	ldw	r2,-8(fp)
    a444:	10801717 	ldw	r2,92(r2)
    a448:	e0bf3615 	stw	r2,-808(fp)
	f = ctx->state[5];
    a44c:	e0bffe17 	ldw	r2,-8(fp)
    a450:	10801817 	ldw	r2,96(r2)
    a454:	e0bf3715 	stw	r2,-804(fp)
	g = ctx->state[6];
    a458:	e0bffe17 	ldw	r2,-8(fp)
    a45c:	10801917 	ldw	r2,100(r2)
    a460:	e0bf3815 	stw	r2,-800(fp)
	h = ctx->state[7];
    a464:	e0bffe17 	ldw	r2,-8(fp)
    a468:	10801a17 	ldw	r2,104(r2)
    a46c:	e0bf3915 	stw	r2,-796(fp)

	for (i = 0; i < 64; ++i) {
    a470:	e03f3a15 	stw	zero,-792(fp)
    a474:	00005406 	br	a5c8 <sha256_transform+0x4ac>
		t1 = h + EP1(e) + CH(e,f,g) + k[i] + m[i];
    a478:	e0ff3617 	ldw	r3,-808(fp)
    a47c:	00800184 	movi	r2,6
    a480:	1886583a 	ror	r3,r3,r2
    a484:	e13f3617 	ldw	r4,-808(fp)
    a488:	008002c4 	movi	r2,11
    a48c:	2084583a 	ror	r2,r4,r2
    a490:	1886f03a 	xor	r3,r3,r2
    a494:	e0bf3617 	ldw	r2,-808(fp)
    a498:	100411fa 	roli	r2,r2,7
    a49c:	1886f03a 	xor	r3,r3,r2
    a4a0:	e0bf3917 	ldw	r2,-796(fp)
    a4a4:	1887883a 	add	r3,r3,r2
    a4a8:	e13f3617 	ldw	r4,-808(fp)
    a4ac:	e0bf3717 	ldw	r2,-804(fp)
    a4b0:	2088703a 	and	r4,r4,r2
    a4b4:	e0bf3617 	ldw	r2,-808(fp)
    a4b8:	008a303a 	nor	r5,zero,r2
    a4bc:	e0bf3817 	ldw	r2,-800(fp)
    a4c0:	2884703a 	and	r2,r5,r2
    a4c4:	2084f03a 	xor	r2,r4,r2
    a4c8:	1887883a 	add	r3,r3,r2
    a4cc:	e0bf3a17 	ldw	r2,-792(fp)
    a4d0:	1085883a 	add	r2,r2,r2
    a4d4:	1085883a 	add	r2,r2,r2
    a4d8:	e13f3204 	addi	r4,fp,-824
    a4dc:	2085883a 	add	r2,r4,r2
    a4e0:	10808c04 	addi	r2,r2,560
    a4e4:	10800017 	ldw	r2,0(r2)
    a4e8:	1887883a 	add	r3,r3,r2
    a4ec:	e0bf3a17 	ldw	r2,-792(fp)
    a4f0:	1085883a 	add	r2,r2,r2
    a4f4:	1085883a 	add	r2,r2,r2
    a4f8:	e17f3204 	addi	r5,fp,-824
    a4fc:	2885883a 	add	r2,r5,r2
    a500:	10800c04 	addi	r2,r2,48
    a504:	10800017 	ldw	r2,0(r2)
    a508:	1885883a 	add	r2,r3,r2
    a50c:	e0bf3c15 	stw	r2,-784(fp)
		t2 = EP0(a) + MAJ(a,b,c);
    a510:	e0ff3217 	ldw	r3,-824(fp)
    a514:	00800084 	movi	r2,2
    a518:	1886583a 	ror	r3,r3,r2
    a51c:	e13f3217 	ldw	r4,-824(fp)
    a520:	00800344 	movi	r2,13
    a524:	2084583a 	ror	r2,r4,r2
    a528:	1886f03a 	xor	r3,r3,r2
    a52c:	e0bf3217 	ldw	r2,-824(fp)
    a530:	100412ba 	roli	r2,r2,10
    a534:	1886f03a 	xor	r3,r3,r2
    a538:	e13f3217 	ldw	r4,-824(fp)
    a53c:	e0bf3317 	ldw	r2,-820(fp)
    a540:	2088703a 	and	r4,r4,r2
    a544:	e17f3217 	ldw	r5,-824(fp)
    a548:	e0bf3417 	ldw	r2,-816(fp)
    a54c:	2884703a 	and	r2,r5,r2
    a550:	2088f03a 	xor	r4,r4,r2
    a554:	e17f3317 	ldw	r5,-820(fp)
    a558:	e0bf3417 	ldw	r2,-816(fp)
    a55c:	2884703a 	and	r2,r5,r2
    a560:	2084f03a 	xor	r2,r4,r2
    a564:	1885883a 	add	r2,r3,r2
    a568:	e0bf3d15 	stw	r2,-780(fp)
		h = g;
    a56c:	e0bf3817 	ldw	r2,-800(fp)
    a570:	e0bf3915 	stw	r2,-796(fp)
		g = f;
    a574:	e0bf3717 	ldw	r2,-804(fp)
    a578:	e0bf3815 	stw	r2,-800(fp)
		f = e;
    a57c:	e0bf3617 	ldw	r2,-808(fp)
    a580:	e0bf3715 	stw	r2,-804(fp)
		e = d + t1;
    a584:	e0ff3517 	ldw	r3,-812(fp)
    a588:	e0bf3c17 	ldw	r2,-784(fp)
    a58c:	1885883a 	add	r2,r3,r2
    a590:	e0bf3615 	stw	r2,-808(fp)
		d = c;
    a594:	e0bf3417 	ldw	r2,-816(fp)
    a598:	e0bf3515 	stw	r2,-812(fp)
		c = b;
    a59c:	e0bf3317 	ldw	r2,-820(fp)
    a5a0:	e0bf3415 	stw	r2,-816(fp)
		b = a;
    a5a4:	e0bf3217 	ldw	r2,-824(fp)
    a5a8:	e0bf3315 	stw	r2,-820(fp)
		a = t1 + t2;
    a5ac:	e0ff3c17 	ldw	r3,-784(fp)
    a5b0:	e0bf3d17 	ldw	r2,-780(fp)
    a5b4:	1885883a 	add	r2,r3,r2
    a5b8:	e0bf3215 	stw	r2,-824(fp)
	e = ctx->state[4];
	f = ctx->state[5];
	g = ctx->state[6];
	h = ctx->state[7];

	for (i = 0; i < 64; ++i) {
    a5bc:	e0bf3a17 	ldw	r2,-792(fp)
    a5c0:	10800044 	addi	r2,r2,1
    a5c4:	e0bf3a15 	stw	r2,-792(fp)
    a5c8:	e0bf3a17 	ldw	r2,-792(fp)
    a5cc:	10801030 	cmpltui	r2,r2,64
    a5d0:	103fa91e 	bne	r2,zero,a478 <_gp+0xffff5570>
		c = b;
		b = a;
		a = t1 + t2;
	}

	ctx->state[0] += a;
    a5d4:	e0bffe17 	ldw	r2,-8(fp)
    a5d8:	10c01317 	ldw	r3,76(r2)
    a5dc:	e0bf3217 	ldw	r2,-824(fp)
    a5e0:	1887883a 	add	r3,r3,r2
    a5e4:	e0bffe17 	ldw	r2,-8(fp)
    a5e8:	10c01315 	stw	r3,76(r2)
	ctx->state[1] += b;
    a5ec:	e0bffe17 	ldw	r2,-8(fp)
    a5f0:	10c01417 	ldw	r3,80(r2)
    a5f4:	e0bf3317 	ldw	r2,-820(fp)
    a5f8:	1887883a 	add	r3,r3,r2
    a5fc:	e0bffe17 	ldw	r2,-8(fp)
    a600:	10c01415 	stw	r3,80(r2)
	ctx->state[2] += c;
    a604:	e0bffe17 	ldw	r2,-8(fp)
    a608:	10c01517 	ldw	r3,84(r2)
    a60c:	e0bf3417 	ldw	r2,-816(fp)
    a610:	1887883a 	add	r3,r3,r2
    a614:	e0bffe17 	ldw	r2,-8(fp)
    a618:	10c01515 	stw	r3,84(r2)
	ctx->state[3] += d;
    a61c:	e0bffe17 	ldw	r2,-8(fp)
    a620:	10c01617 	ldw	r3,88(r2)
    a624:	e0bf3517 	ldw	r2,-812(fp)
    a628:	1887883a 	add	r3,r3,r2
    a62c:	e0bffe17 	ldw	r2,-8(fp)
    a630:	10c01615 	stw	r3,88(r2)
	ctx->state[4] += e;
    a634:	e0bffe17 	ldw	r2,-8(fp)
    a638:	10c01717 	ldw	r3,92(r2)
    a63c:	e0bf3617 	ldw	r2,-808(fp)
    a640:	1887883a 	add	r3,r3,r2
    a644:	e0bffe17 	ldw	r2,-8(fp)
    a648:	10c01715 	stw	r3,92(r2)
	ctx->state[5] += f;
    a64c:	e0bffe17 	ldw	r2,-8(fp)
    a650:	10c01817 	ldw	r3,96(r2)
    a654:	e0bf3717 	ldw	r2,-804(fp)
    a658:	1887883a 	add	r3,r3,r2
    a65c:	e0bffe17 	ldw	r2,-8(fp)
    a660:	10c01815 	stw	r3,96(r2)
	ctx->state[6] += g;
    a664:	e0bffe17 	ldw	r2,-8(fp)
    a668:	10c01917 	ldw	r3,100(r2)
    a66c:	e0bf3817 	ldw	r2,-800(fp)
    a670:	1887883a 	add	r3,r3,r2
    a674:	e0bffe17 	ldw	r2,-8(fp)
    a678:	10c01915 	stw	r3,100(r2)
	ctx->state[7] += h;
    a67c:	e0bffe17 	ldw	r2,-8(fp)
    a680:	10c01a17 	ldw	r3,104(r2)
    a684:	e0bf3917 	ldw	r2,-796(fp)
    a688:	1887883a 	add	r3,r3,r2
    a68c:	e0bffe17 	ldw	r2,-8(fp)
    a690:	10c01a15 	stw	r3,104(r2)
}
    a694:	0001883a 	nop
    a698:	e037883a 	mov	sp,fp
    a69c:	dfc00117 	ldw	ra,4(sp)
    a6a0:	df000017 	ldw	fp,0(sp)
    a6a4:	dec00204 	addi	sp,sp,8
    a6a8:	f800283a 	ret

0000a6ac <hmacsha256>:

unsigned int hmacsha256(unsigned char *key, unsigned int  key_len,unsigned char *text, unsigned int  text_len, unsigned char *digest) {
    a6ac:	deff5004 	addi	sp,sp,-704
    a6b0:	dfc0af15 	stw	ra,700(sp)
    a6b4:	df00ae15 	stw	fp,696(sp)
    a6b8:	df00ae04 	addi	fp,sp,696
    a6bc:	e13ffc15 	stw	r4,-16(fp)
    a6c0:	e17ffd15 	stw	r5,-12(fp)
    a6c4:	e1bffe15 	stw	r6,-8(fp)
    a6c8:	e1ffff15 	stw	r7,-4(fp)
	//volatile unsigned char tk[32];
	 unsigned char tk2[32];
	 unsigned char bufferIn[256];
	 unsigned char bufferOut[256];
	 unsigned int i;
	memset( k_ipad,0,sizeof k_ipad);
    a6cc:	e0bf5304 	addi	r2,fp,-692
    a6d0:	01801044 	movi	r6,65
    a6d4:	000b883a 	mov	r5,zero
    a6d8:	1009883a 	mov	r4,r2
    a6dc:	000ab840 	call	ab84 <memset>
	memset( k_opad, 0, sizeof k_opad);
    a6e0:	e0bf6344 	addi	r2,fp,-627
    a6e4:	01801044 	movi	r6,65
    a6e8:	000b883a 	mov	r5,zero
    a6ec:	1009883a 	mov	r4,r2
    a6f0:	000ab840 	call	ab84 <memset>
	memcpy( k_ipad, key , key_len);
    a6f4:	e0bf5304 	addi	r2,fp,-692
    a6f8:	e1bffd17 	ldw	r6,-12(fp)
    a6fc:	e17ffc17 	ldw	r5,-16(fp)
    a700:	1009883a 	mov	r4,r2
    a704:	000ab5c0 	call	ab5c <memcpy>
	memcpy( k_opad, key, key_len);
    a708:	e0bf6344 	addi	r2,fp,-627
    a70c:	e1bffd17 	ldw	r6,-12(fp)
    a710:	e17ffc17 	ldw	r5,-16(fp)
    a714:	1009883a 	mov	r4,r2
    a718:	000ab5c0 	call	ab5c <memcpy>
	for (i = 0; i<64; i++) {
    a71c:	e03f5215 	stw	zero,-696(fp)
    a720:	00001706 	br	a780 <hmacsha256+0xd4>
		k_ipad[i] ^= 0x36;
    a724:	e0ff5304 	addi	r3,fp,-692
    a728:	e0bf5217 	ldw	r2,-696(fp)
    a72c:	1885883a 	add	r2,r3,r2
    a730:	10800003 	ldbu	r2,0(r2)
    a734:	10800d9c 	xori	r2,r2,54
    a738:	1009883a 	mov	r4,r2
    a73c:	e0ff5304 	addi	r3,fp,-692
    a740:	e0bf5217 	ldw	r2,-696(fp)
    a744:	1885883a 	add	r2,r3,r2
    a748:	11000005 	stb	r4,0(r2)
		k_opad[i] ^= 0x5c;
    a74c:	e0ff6344 	addi	r3,fp,-627
    a750:	e0bf5217 	ldw	r2,-696(fp)
    a754:	1885883a 	add	r2,r3,r2
    a758:	10800003 	ldbu	r2,0(r2)
    a75c:	1080171c 	xori	r2,r2,92
    a760:	1009883a 	mov	r4,r2
    a764:	e0ff6344 	addi	r3,fp,-627
    a768:	e0bf5217 	ldw	r2,-696(fp)
    a76c:	1885883a 	add	r2,r3,r2
    a770:	11000005 	stb	r4,0(r2)
	 unsigned int i;
	memset( k_ipad,0,sizeof k_ipad);
	memset( k_opad, 0, sizeof k_opad);
	memcpy( k_ipad, key , key_len);
	memcpy( k_opad, key, key_len);
	for (i = 0; i<64; i++) {
    a774:	e0bf5217 	ldw	r2,-696(fp)
    a778:	10800044 	addi	r2,r2,1
    a77c:	e0bf5215 	stw	r2,-696(fp)
    a780:	e0bf5217 	ldw	r2,-696(fp)
    a784:	10801030 	cmpltui	r2,r2,64
    a788:	103fe61e 	bne	r2,zero,a724 <_gp+0xffff581c>
		k_ipad[i] ^= 0x36;
		k_opad[i] ^= 0x5c;
	}
	memset(bufferIn,0x00,256);
    a78c:	e0bf7b84 	addi	r2,fp,-530
    a790:	01804004 	movi	r6,256
    a794:	000b883a 	mov	r5,zero
    a798:	1009883a 	mov	r4,r2
    a79c:	000ab840 	call	ab84 <memset>
	memcpy(bufferIn,k_ipad,64);
    a7a0:	e0ff5304 	addi	r3,fp,-692
    a7a4:	e0bf7b84 	addi	r2,fp,-530
    a7a8:	01801004 	movi	r6,64
    a7ac:	180b883a 	mov	r5,r3
    a7b0:	1009883a 	mov	r4,r2
    a7b4:	000ab5c0 	call	ab5c <memcpy>
	memcpy(bufferIn + 64 , text,text_len);
    a7b8:	e0bf7b84 	addi	r2,fp,-530
    a7bc:	10801004 	addi	r2,r2,64
    a7c0:	e1bfff17 	ldw	r6,-4(fp)
    a7c4:	e17ffe17 	ldw	r5,-8(fp)
    a7c8:	1009883a 	mov	r4,r2
    a7cc:	000ab5c0 	call	ab5c <memcpy>
	sha256(bufferIn,tk2,64+text_len);
    a7d0:	e0bfff17 	ldw	r2,-4(fp)
    a7d4:	11001004 	addi	r4,r2,64
    a7d8:	e0ff7384 	addi	r3,fp,-562
    a7dc:	e0bf7b84 	addi	r2,fp,-530
    a7e0:	200d883a 	mov	r6,r4
    a7e4:	180b883a 	mov	r5,r3
    a7e8:	1009883a 	mov	r4,r2
    a7ec:	00098e40 	call	98e4 <sha256>

	memset( bufferOut,0x00,256);
    a7f0:	e0bfbb84 	addi	r2,fp,-274
    a7f4:	01804004 	movi	r6,256
    a7f8:	000b883a 	mov	r5,zero
    a7fc:	1009883a 	mov	r4,r2
    a800:	000ab840 	call	ab84 <memset>
	memcpy( bufferOut, k_opad,64);
    a804:	e0ff6344 	addi	r3,fp,-627
    a808:	e0bfbb84 	addi	r2,fp,-274
    a80c:	01801004 	movi	r6,64
    a810:	180b883a 	mov	r5,r3
    a814:	1009883a 	mov	r4,r2
    a818:	000ab5c0 	call	ab5c <memcpy>
	memcpy( bufferOut+64, tk2, 32);
    a81c:	e0bfbb84 	addi	r2,fp,-274
    a820:	10801004 	addi	r2,r2,64
    a824:	1009883a 	mov	r4,r2
    a828:	e0bf7384 	addi	r2,fp,-562
    a82c:	00c00804 	movi	r3,32
    a830:	180d883a 	mov	r6,r3
    a834:	100b883a 	mov	r5,r2
    a838:	000ab5c0 	call	ab5c <memcpy>

	sha256( bufferOut, digest,64+32);
    a83c:	e0bfbb84 	addi	r2,fp,-274
    a840:	01801804 	movi	r6,96
    a844:	e1400217 	ldw	r5,8(fp)
    a848:	1009883a 	mov	r4,r2
    a84c:	00098e40 	call	98e4 <sha256>
	return 0;
    a850:	0005883a 	mov	r2,zero
}
    a854:	e037883a 	mov	sp,fp
    a858:	dfc00117 	ldw	ra,4(sp)
    a85c:	df000017 	ldw	fp,0(sp)
    a860:	dec00204 	addi	sp,sp,8
    a864:	f800283a 	ret

0000a868 <main>:
#include "Nor_Flash.h"
#include "WB_Secureic.h"
#include "WB_Gneiss_Sample_Code_LLD.h"

int main()
{
    a868:	deff9604 	addi	sp,sp,-424
    a86c:	dfc06915 	stw	ra,420(sp)
    a870:	df006815 	stw	fp,416(sp)
    a874:	df006804 	addi	fp,sp,416
   alt_u8   data[6],Byte_Mode=0;
    a878:	e03f9805 	stb	zero,-416(fp)
   alt_u32  Address=0x000000;
    a87c:	e03f9915 	stw	zero,-412(fp)
   alt_u8   reg_Read_Data[256]= {0};
    a880:	e0bfa084 	addi	r2,fp,-382
    a884:	00c04004 	movi	r3,256
    a888:	180d883a 	mov	r6,r3
    a88c:	000b883a 	mov	r5,zero
    a890:	1009883a 	mov	r4,r2
    a894:	000ab840 	call	ab84 <memset>
   alt_u8 Input_tag[12];	// Input tag data for request conte
   alt_u8 Check_tag[12];	// Output tag data for verification
   alt_u8 Check_signature[32]; // Output signature
   alt_u8 RPMCStatus;
   unsigned int RPMC_counter;
   unsigned int i=0,j=0,a=0;
    a898:	e03f9a15 	stw	zero,-408(fp)
    a89c:	e03f9b15 	stw	zero,-404(fp)
    a8a0:	e03f9c15 	stw	zero,-400(fp)
   memset(ROOTKey, 0xFF, sizeof(ROOTKey));
    a8a4:	e0bfe084 	addi	r2,fp,-126
    a8a8:	01800804 	movi	r6,32
    a8ac:	01403fc4 	movi	r5,255
    a8b0:	1009883a 	mov	r4,r2
    a8b4:	000ab840 	call	ab84 <memset>
   memset(HMACKey, 0xFF, sizeof(HMACKey));
    a8b8:	e0bfe884 	addi	r2,fp,-94
    a8bc:	01800804 	movi	r6,32
    a8c0:	01403fc4 	movi	r5,255
    a8c4:	1009883a 	mov	r4,r2
    a8c8:	000ab840 	call	ab84 <memset>
   memset(Check_signature, 0xFF, sizeof(Check_signature));
    a8cc:	e0bff784 	addi	r2,fp,-34
    a8d0:	01800804 	movi	r6,32
    a8d4:	01403fc4 	movi	r5,255
    a8d8:	1009883a 	mov	r4,r2
    a8dc:	000ab840 	call	ab84 <memset>
   memset(Check_tag, 0xFF, sizeof(Check_tag));
    a8e0:	e0bff484 	addi	r2,fp,-46
    a8e4:	01800304 	movi	r6,12
    a8e8:	01403fc4 	movi	r5,255
    a8ec:	1009883a 	mov	r4,r2
    a8f0:	000ab840 	call	ab84 <memset>
   memset(Input_tag, 0xFF, sizeof(Input_tag));
    a8f4:	e0bff184 	addi	r2,fp,-58
    a8f8:	01800304 	movi	r6,12
    a8fc:	01403fc4 	movi	r5,255
    a900:	1009883a 	mov	r4,r2
    a904:	000ab840 	call	ab84 <memset>

   //Configuration Register
   printf("== MAX1000 WB_SPI_Flash Demo ==\r\n");
    a908:	01000074 	movhi	r4,1
    a90c:	2132ab04 	addi	r4,r4,-13652
    a910:	000acd00 	call	acd0 <puts>
   IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE,0x00);          //Initialize the spi control reg
    a914:	0007883a 	mov	r3,zero
    a918:	00800074 	movhi	r2,1
    a91c:	10840304 	addi	r2,r2,4108
    a920:	10c00035 	stwio	r3,0(r2)

   /* Read JEDEC ID Start */
   printf("JEDEC ID : %06x\n",Nor_JEDEC());
    a924:	0008bcc0 	call	8bcc <Nor_JEDEC>
    a928:	100b883a 	mov	r5,r2
    a92c:	01000074 	movhi	r4,1
    a930:	2132b404 	addi	r4,r4,-13616
    a934:	000abe00 	call	abe0 <printf>
   }

   /* Test SPI Flash Operation Over . */

   //set RootKey all 1
   memset(ROOTKey, 0xFF, sizeof(ROOTKey));
    a938:	e0bfe084 	addi	r2,fp,-126
    a93c:	01800804 	movi	r6,32
    a940:	01403fc4 	movi	r5,255
    a944:	1009883a 	mov	r4,r2
    a948:	000ab840 	call	ab84 <memset>

   RPMCStatus = WB_RPMC_WrRootKey(2, ROOTKey);        // initial Rootkey, use first rootkey/counter pair
    a94c:	e0bfe084 	addi	r2,fp,-126
    a950:	100b883a 	mov	r5,r2
    a954:	01000084 	movi	r4,2
    a958:	000915c0 	call	915c <WB_RPMC_WrRootKey>
    a95c:	e0bf9d05 	stb	r2,-396(fp)

   if(RPMCStatus == 0x80){
    a960:	e0bf9d03 	ldbu	r2,-396(fp)
    a964:	10802018 	cmpnei	r2,r2,128
    a968:	1000041e 	bne	r2,zero,a97c <main+0x114>
     printf("Write RootKey  Success!\r\n");
    a96c:	01000074 	movhi	r4,1
    a970:	2132b904 	addi	r4,r4,-13596
    a974:	000acd00 	call	acd0 <puts>
    a978:	00000506 	br	a990 <main+0x128>
   }
   else{
	 printf("Write RootKey Fail! RPMCStatus=0x%02x\r\n",RPMCStatus);
    a97c:	e0bf9d03 	ldbu	r2,-396(fp)
    a980:	100b883a 	mov	r5,r2
    a984:	01000074 	movhi	r4,1
    a988:	2132c004 	addi	r4,r4,-13568
    a98c:	000abe00 	call	abe0 <printf>
   /* Second stage, update HMACKey after ever power on. without update HMACkey, Gneiss would not function*/
   //HMACMessage[0] = rand()%0x100;        // Get random data for HMAC message, it can also be serial number, RTC information and so on.
   //HMACMessage[1] = rand()%0x100;
   //HMACMessage[2] = rand()%0x100;
   //HMACMessage[3] = rand()%0x100;
   HMACMessage[0] = 't';
    a990:	00801d04 	movi	r2,116
    a994:	e0bff085 	stb	r2,-62(fp)
   HMACMessage[1] = 'e';
    a998:	00801944 	movi	r2,101
    a99c:	e0bff0c5 	stb	r2,-61(fp)
   HMACMessage[2] =	's';
    a9a0:	00801cc4 	movi	r2,115
    a9a4:	e0bff105 	stb	r2,-60(fp)
   HMACMessage[3] = 't';
    a9a8:	00801d04 	movi	r2,116
    a9ac:	e0bff145 	stb	r2,-59(fp)
   /* Update HMAC key and get new HMACKey.
   HMACKey is generated by SW using Rootkey and HMACMessage.
   RPMC would also generate the same HMACKey by HW   */

   RPMCStatus = WB_RPMC_UpHMACkey(2, ROOTKey, HMACMessage, HMACKey);
    a9b0:	e13fe884 	addi	r4,fp,-94
    a9b4:	e0fff084 	addi	r3,fp,-62
    a9b8:	e0bfe084 	addi	r2,fp,-126
    a9bc:	200f883a 	mov	r7,r4
    a9c0:	180d883a 	mov	r6,r3
    a9c4:	100b883a 	mov	r5,r2
    a9c8:	01000084 	movi	r4,2
    a9cc:	000934c0 	call	934c <WB_RPMC_UpHMACkey>
    a9d0:	e0bf9d05 	stb	r2,-396(fp)
   if(RPMCStatus == 0x80){
    a9d4:	e0bf9d03 	ldbu	r2,-396(fp)
    a9d8:	10802018 	cmpnei	r2,r2,128
    a9dc:	1000041e 	bne	r2,zero,a9f0 <main+0x188>
     // update HMACkey success
	   printf("update HMACkey  Success!\r\n");
    a9e0:	01000074 	movhi	r4,1
    a9e4:	2132ca04 	addi	r4,r4,-13528
    a9e8:	000acd00 	call	acd0 <puts>
    a9ec:	00000506 	br	aa04 <main+0x19c>
   }
   else{
	   printf("update HMACkey  fail! RPMCStatus=0x%02x \r\n",RPMCStatus);
    a9f0:	e0bf9d03 	ldbu	r2,-396(fp)
    a9f4:	100b883a 	mov	r5,r2
    a9f8:	01000074 	movhi	r4,1
    a9fc:	2132d104 	addi	r4,r4,-13500
    aa00:	000abe00 	call	abe0 <printf>
   }
   /* update HMACKey operation done     */

   /* Third stage, increase RPMC counter */
   /* input tag is send in to RPMC, it could be time stamp, serial number and so on*/
   Input_tag[0] = '2'; //0x32  //50
    aa04:	00800c84 	movi	r2,50
    aa08:	e0bff185 	stb	r2,-58(fp)
   Input_tag[1] = '0'; //0x30  //48
    aa0c:	00800c04 	movi	r2,48
    aa10:	e0bff1c5 	stb	r2,-57(fp)
   Input_tag[2] = '1'; //0x31  //49
    aa14:	00800c44 	movi	r2,49
    aa18:	e0bff205 	stb	r2,-56(fp)
   Input_tag[3] = '5'; //0x35  //53
    aa1c:	00800d44 	movi	r2,53
    aa20:	e0bff245 	stb	r2,-55(fp)
   Input_tag[4] = '1'; //0x31  //49
    aa24:	00800c44 	movi	r2,49
    aa28:	e0bff285 	stb	r2,-54(fp)
   Input_tag[5] = '1'; //0x31  //49
    aa2c:	00800c44 	movi	r2,49
    aa30:	e0bff2c5 	stb	r2,-53(fp)
   Input_tag[6] = '1'; //0x31  //49
    aa34:	00800c44 	movi	r2,49
    aa38:	e0bff305 	stb	r2,-52(fp)
   Input_tag[7] = '1'; //0x31  //49
    aa3c:	00800c44 	movi	r2,49
    aa40:	e0bff345 	stb	r2,-51(fp)
   Input_tag[8] = '2'; //0x32  //50
    aa44:	00800c84 	movi	r2,50
    aa48:	e0bff385 	stb	r2,-50(fp)
   Input_tag[9] = '4'; //0x34  //52
    aa4c:	00800d04 	movi	r2,52
    aa50:	e0bff3c5 	stb	r2,-49(fp)
   Input_tag[10] = '5'; //0x35 //53
    aa54:	00800d44 	movi	r2,53
    aa58:	e0bff405 	stb	r2,-48(fp)
   Input_tag[11] = '7'; //0x36 //54
    aa5c:	00800dc4 	movi	r2,55
    aa60:	e0bff445 	stb	r2,-47(fp)

   RPMCStatus = WB_RPMC_IncCounter(2, HMACKey, Input_tag);
    aa64:	e0fff184 	addi	r3,fp,-58
    aa68:	e0bfe884 	addi	r2,fp,-94
    aa6c:	180d883a 	mov	r6,r3
    aa70:	100b883a 	mov	r5,r2
    aa74:	01000084 	movi	r4,2
    aa78:	000956c0 	call	956c <WB_RPMC_IncCounter>
    aa7c:	e0bf9d05 	stb	r2,-396(fp)
   if(RPMCStatus == 0x80){
    aa80:	e0bf9d03 	ldbu	r2,-396(fp)
    aa84:	10802018 	cmpnei	r2,r2,128
    aa88:	1000041e 	bne	r2,zero,aa9c <main+0x234>
     // increase counter success
	   printf("increase counter  Success!\r\n");
    aa8c:	01000074 	movhi	r4,1
    aa90:	2132dc04 	addi	r4,r4,-13456
    aa94:	000acd00 	call	acd0 <puts>
    aa98:	00000506 	br	aab0 <main+0x248>
   }
   else{
	   printf("increase counter  fail! RPMCStatus =0x%02x\r\n",RPMCStatus);
    aa9c:	e0bf9d03 	ldbu	r2,-396(fp)
    aaa0:	100b883a 	mov	r5,r2
    aaa4:	01000074 	movhi	r4,1
    aaa8:	2132e304 	addi	r4,r4,-13428
    aaac:	000abe00 	call	abe0 <printf>
	   // increase counter fail, check datasheet for the error bit
   }
   /* counter data in stoage in public array counter[], data is available if WB_RPMC_IncCounter() operation successed */
   RPMC_counter = WB_RPMC_ReadCounterData();
    aab0:	0008c780 	call	8c78 <WB_RPMC_ReadCounterData>
    aab4:	e0bf9e15 	stw	r2,-392(fp)
   printf("RPMC_Counter Data = %ld\r\n",RPMC_counter);
    aab8:	e17f9e17 	ldw	r5,-392(fp)
    aabc:	01000074 	movhi	r4,1
    aac0:	2132ef04 	addi	r4,r4,-13380
    aac4:	000abe00 	call	abe0 <printf>
   /* increase RPMC counter done*/

   /* Main security operation call challenge*/
   printf("-----Challenge-----:\r\n");
    aac8:	01000074 	movhi	r4,1
    aacc:	2132f604 	addi	r4,r4,-13352
    aad0:	000acd00 	call	acd0 <puts>
 	if(WB_RPMC_Challenge(2, HMACKey, Input_tag)!=0){
    aad4:	e0fff184 	addi	r3,fp,-58
    aad8:	e0bfe884 	addi	r2,fp,-94
    aadc:	180d883a 	mov	r6,r3
    aae0:	100b883a 	mov	r5,r2
    aae4:	01000084 	movi	r4,2
    aae8:	000977c0 	call	977c <WB_RPMC_Challenge>
    aaec:	10803fcc 	andi	r2,r2,255
    aaf0:	10000526 	beq	r2,zero,ab08 <main+0x2a0>
 		printf("signature miss-match!\r\n");
    aaf4:	01000074 	movhi	r4,1
    aaf8:	2132fc04 	addi	r4,r4,-13328
    aafc:	000acd00 	call	acd0 <puts>
 		/* return signature miss-match */
 		return 1;
    ab00:	00800044 	movi	r2,1
    ab04:	00000406 	br	ab18 <main+0x2b0>
 	}
	else printf("Challenge Success!\r\n");
    ab08:	01000074 	movhi	r4,1
    ab0c:	21330204 	addi	r4,r4,-13304
    ab10:	000acd00 	call	acd0 <puts>
    ab14:	0005883a 	mov	r2,zero

 }
    ab18:	e037883a 	mov	sp,fp
    ab1c:	dfc00117 	ldw	ra,4(sp)
    ab20:	df000017 	ldw	fp,0(sp)
    ab24:	dec00204 	addi	sp,sp,8
    ab28:	f800283a 	ret

0000ab2c <memcmp>:
    ab2c:	218d883a 	add	r6,r4,r6
    ab30:	21800826 	beq	r4,r6,ab54 <memcmp+0x28>
    ab34:	20800003 	ldbu	r2,0(r4)
    ab38:	28c00003 	ldbu	r3,0(r5)
    ab3c:	10c00226 	beq	r2,r3,ab48 <memcmp+0x1c>
    ab40:	10c5c83a 	sub	r2,r2,r3
    ab44:	f800283a 	ret
    ab48:	21000044 	addi	r4,r4,1
    ab4c:	29400044 	addi	r5,r5,1
    ab50:	003ff706 	br	ab30 <_gp+0xffff5c28>
    ab54:	0005883a 	mov	r2,zero
    ab58:	f800283a 	ret

0000ab5c <memcpy>:
    ab5c:	2005883a 	mov	r2,r4
    ab60:	2007883a 	mov	r3,r4
    ab64:	218d883a 	add	r6,r4,r6
    ab68:	19800526 	beq	r3,r6,ab80 <memcpy+0x24>
    ab6c:	29000003 	ldbu	r4,0(r5)
    ab70:	18c00044 	addi	r3,r3,1
    ab74:	29400044 	addi	r5,r5,1
    ab78:	193fffc5 	stb	r4,-1(r3)
    ab7c:	003ffa06 	br	ab68 <_gp+0xffff5c60>
    ab80:	f800283a 	ret

0000ab84 <memset>:
    ab84:	2005883a 	mov	r2,r4
    ab88:	2007883a 	mov	r3,r4
    ab8c:	218d883a 	add	r6,r4,r6
    ab90:	19800326 	beq	r3,r6,aba0 <memset+0x1c>
    ab94:	19400005 	stb	r5,0(r3)
    ab98:	18c00044 	addi	r3,r3,1
    ab9c:	003ffc06 	br	ab90 <_gp+0xffff5c88>
    aba0:	f800283a 	ret

0000aba4 <_printf_r>:
    aba4:	defffd04 	addi	sp,sp,-12
    aba8:	dfc00015 	stw	ra,0(sp)
    abac:	d9800115 	stw	r6,4(sp)
    abb0:	d9c00215 	stw	r7,8(sp)
    abb4:	20c00217 	ldw	r3,8(r4)
    abb8:	01800074 	movhi	r6,1
    abbc:	31acad04 	addi	r6,r6,-19788
    abc0:	19800115 	stw	r6,4(r3)
    abc4:	280d883a 	mov	r6,r5
    abc8:	21400217 	ldw	r5,8(r4)
    abcc:	d9c00104 	addi	r7,sp,4
    abd0:	000ad6c0 	call	ad6c <___vfprintf_internal_r>
    abd4:	dfc00017 	ldw	ra,0(sp)
    abd8:	dec00304 	addi	sp,sp,12
    abdc:	f800283a 	ret

0000abe0 <printf>:
    abe0:	defffc04 	addi	sp,sp,-16
    abe4:	dfc00015 	stw	ra,0(sp)
    abe8:	d9400115 	stw	r5,4(sp)
    abec:	d9800215 	stw	r6,8(sp)
    abf0:	d9c00315 	stw	r7,12(sp)
    abf4:	00800074 	movhi	r2,1
    abf8:	10b3c304 	addi	r2,r2,-12532
    abfc:	10800017 	ldw	r2,0(r2)
    ac00:	01400074 	movhi	r5,1
    ac04:	296cad04 	addi	r5,r5,-19788
    ac08:	10c00217 	ldw	r3,8(r2)
    ac0c:	d9800104 	addi	r6,sp,4
    ac10:	19400115 	stw	r5,4(r3)
    ac14:	200b883a 	mov	r5,r4
    ac18:	11000217 	ldw	r4,8(r2)
    ac1c:	000b2980 	call	b298 <__vfprintf_internal>
    ac20:	dfc00017 	ldw	ra,0(sp)
    ac24:	dec00404 	addi	sp,sp,16
    ac28:	f800283a 	ret

0000ac2c <_putchar_r>:
    ac2c:	21800217 	ldw	r6,8(r4)
    ac30:	000b3c01 	jmpi	b3c0 <_putc_r>

0000ac34 <putchar>:
    ac34:	00800074 	movhi	r2,1
    ac38:	10b3c304 	addi	r2,r2,-12532
    ac3c:	10800017 	ldw	r2,0(r2)
    ac40:	200b883a 	mov	r5,r4
    ac44:	11800217 	ldw	r6,8(r2)
    ac48:	1009883a 	mov	r4,r2
    ac4c:	000b3c01 	jmpi	b3c0 <_putc_r>

0000ac50 <_puts_r>:
    ac50:	defffd04 	addi	sp,sp,-12
    ac54:	dc000015 	stw	r16,0(sp)
    ac58:	2021883a 	mov	r16,r4
    ac5c:	2809883a 	mov	r4,r5
    ac60:	dfc00215 	stw	ra,8(sp)
    ac64:	dc400115 	stw	r17,4(sp)
    ac68:	2823883a 	mov	r17,r5
    ac6c:	000ace40 	call	ace4 <strlen>
    ac70:	81400217 	ldw	r5,8(r16)
    ac74:	01000074 	movhi	r4,1
    ac78:	212cad04 	addi	r4,r4,-19788
    ac7c:	29000115 	stw	r4,4(r5)
    ac80:	100f883a 	mov	r7,r2
    ac84:	880d883a 	mov	r6,r17
    ac88:	8009883a 	mov	r4,r16
    ac8c:	000b2b40 	call	b2b4 <__sfvwrite_small_dev>
    ac90:	00ffffc4 	movi	r3,-1
    ac94:	10c00926 	beq	r2,r3,acbc <_puts_r+0x6c>
    ac98:	81400217 	ldw	r5,8(r16)
    ac9c:	01800074 	movhi	r6,1
    aca0:	01c00044 	movi	r7,1
    aca4:	28800117 	ldw	r2,4(r5)
    aca8:	31b30704 	addi	r6,r6,-13284
    acac:	8009883a 	mov	r4,r16
    acb0:	103ee83a 	callr	r2
    acb4:	10bfffe0 	cmpeqi	r2,r2,-1
    acb8:	0085c83a 	sub	r2,zero,r2
    acbc:	dfc00217 	ldw	ra,8(sp)
    acc0:	dc400117 	ldw	r17,4(sp)
    acc4:	dc000017 	ldw	r16,0(sp)
    acc8:	dec00304 	addi	sp,sp,12
    accc:	f800283a 	ret

0000acd0 <puts>:
    acd0:	00800074 	movhi	r2,1
    acd4:	10b3c304 	addi	r2,r2,-12532
    acd8:	200b883a 	mov	r5,r4
    acdc:	11000017 	ldw	r4,0(r2)
    ace0:	000ac501 	jmpi	ac50 <_puts_r>

0000ace4 <strlen>:
    ace4:	2005883a 	mov	r2,r4
    ace8:	10c00007 	ldb	r3,0(r2)
    acec:	18000226 	beq	r3,zero,acf8 <strlen+0x14>
    acf0:	10800044 	addi	r2,r2,1
    acf4:	003ffc06 	br	ace8 <_gp+0xffff5de0>
    acf8:	1105c83a 	sub	r2,r2,r4
    acfc:	f800283a 	ret

0000ad00 <print_repeat>:
    ad00:	defffb04 	addi	sp,sp,-20
    ad04:	dc800315 	stw	r18,12(sp)
    ad08:	dc400215 	stw	r17,8(sp)
    ad0c:	dc000115 	stw	r16,4(sp)
    ad10:	dfc00415 	stw	ra,16(sp)
    ad14:	2025883a 	mov	r18,r4
    ad18:	2823883a 	mov	r17,r5
    ad1c:	d9800005 	stb	r6,0(sp)
    ad20:	3821883a 	mov	r16,r7
    ad24:	04000a0e 	bge	zero,r16,ad50 <print_repeat+0x50>
    ad28:	88800117 	ldw	r2,4(r17)
    ad2c:	01c00044 	movi	r7,1
    ad30:	d80d883a 	mov	r6,sp
    ad34:	880b883a 	mov	r5,r17
    ad38:	9009883a 	mov	r4,r18
    ad3c:	103ee83a 	callr	r2
    ad40:	843fffc4 	addi	r16,r16,-1
    ad44:	103ff726 	beq	r2,zero,ad24 <_gp+0xffff5e1c>
    ad48:	00bfffc4 	movi	r2,-1
    ad4c:	00000106 	br	ad54 <print_repeat+0x54>
    ad50:	0005883a 	mov	r2,zero
    ad54:	dfc00417 	ldw	ra,16(sp)
    ad58:	dc800317 	ldw	r18,12(sp)
    ad5c:	dc400217 	ldw	r17,8(sp)
    ad60:	dc000117 	ldw	r16,4(sp)
    ad64:	dec00504 	addi	sp,sp,20
    ad68:	f800283a 	ret

0000ad6c <___vfprintf_internal_r>:
    ad6c:	deffe504 	addi	sp,sp,-108
    ad70:	d8c00804 	addi	r3,sp,32
    ad74:	ddc01815 	stw	r23,96(sp)
    ad78:	dd801715 	stw	r22,92(sp)
    ad7c:	dd401615 	stw	r21,88(sp)
    ad80:	dd001515 	stw	r20,84(sp)
    ad84:	dcc01415 	stw	r19,80(sp)
    ad88:	dc801315 	stw	r18,76(sp)
    ad8c:	dc401215 	stw	r17,72(sp)
    ad90:	dc001115 	stw	r16,68(sp)
    ad94:	dfc01a15 	stw	ra,104(sp)
    ad98:	df001915 	stw	fp,100(sp)
    ad9c:	2029883a 	mov	r20,r4
    ada0:	2823883a 	mov	r17,r5
    ada4:	382d883a 	mov	r22,r7
    ada8:	d9800f15 	stw	r6,60(sp)
    adac:	0021883a 	mov	r16,zero
    adb0:	d8000e15 	stw	zero,56(sp)
    adb4:	d8000a15 	stw	zero,40(sp)
    adb8:	002b883a 	mov	r21,zero
    adbc:	0027883a 	mov	r19,zero
    adc0:	0025883a 	mov	r18,zero
    adc4:	d8000c15 	stw	zero,48(sp)
    adc8:	d8000b15 	stw	zero,44(sp)
    adcc:	002f883a 	mov	r23,zero
    add0:	d8c00915 	stw	r3,36(sp)
    add4:	d8c00f17 	ldw	r3,60(sp)
    add8:	19000003 	ldbu	r4,0(r3)
    addc:	20803fcc 	andi	r2,r4,255
    ade0:	1080201c 	xori	r2,r2,128
    ade4:	10bfe004 	addi	r2,r2,-128
    ade8:	10011e26 	beq	r2,zero,b264 <___vfprintf_internal_r+0x4f8>
    adec:	00c00044 	movi	r3,1
    adf0:	b8c01426 	beq	r23,r3,ae44 <___vfprintf_internal_r+0xd8>
    adf4:	1dc00216 	blt	r3,r23,ae00 <___vfprintf_internal_r+0x94>
    adf8:	b8000626 	beq	r23,zero,ae14 <___vfprintf_internal_r+0xa8>
    adfc:	00011506 	br	b254 <___vfprintf_internal_r+0x4e8>
    ae00:	01400084 	movi	r5,2
    ae04:	b9401d26 	beq	r23,r5,ae7c <___vfprintf_internal_r+0x110>
    ae08:	014000c4 	movi	r5,3
    ae0c:	b9402b26 	beq	r23,r5,aebc <___vfprintf_internal_r+0x150>
    ae10:	00011006 	br	b254 <___vfprintf_internal_r+0x4e8>
    ae14:	01400944 	movi	r5,37
    ae18:	1140fc26 	beq	r2,r5,b20c <___vfprintf_internal_r+0x4a0>
    ae1c:	88800117 	ldw	r2,4(r17)
    ae20:	d9000005 	stb	r4,0(sp)
    ae24:	01c00044 	movi	r7,1
    ae28:	d80d883a 	mov	r6,sp
    ae2c:	880b883a 	mov	r5,r17
    ae30:	a009883a 	mov	r4,r20
    ae34:	103ee83a 	callr	r2
    ae38:	1000d81e 	bne	r2,zero,b19c <___vfprintf_internal_r+0x430>
    ae3c:	84000044 	addi	r16,r16,1
    ae40:	00010406 	br	b254 <___vfprintf_internal_r+0x4e8>
    ae44:	01400c04 	movi	r5,48
    ae48:	1140fa26 	beq	r2,r5,b234 <___vfprintf_internal_r+0x4c8>
    ae4c:	01400944 	movi	r5,37
    ae50:	11400a1e 	bne	r2,r5,ae7c <___vfprintf_internal_r+0x110>
    ae54:	d8800005 	stb	r2,0(sp)
    ae58:	88800117 	ldw	r2,4(r17)
    ae5c:	b80f883a 	mov	r7,r23
    ae60:	d80d883a 	mov	r6,sp
    ae64:	880b883a 	mov	r5,r17
    ae68:	a009883a 	mov	r4,r20
    ae6c:	103ee83a 	callr	r2
    ae70:	1000ca1e 	bne	r2,zero,b19c <___vfprintf_internal_r+0x430>
    ae74:	84000044 	addi	r16,r16,1
    ae78:	0000f506 	br	b250 <___vfprintf_internal_r+0x4e4>
    ae7c:	25fff404 	addi	r23,r4,-48
    ae80:	bdc03fcc 	andi	r23,r23,255
    ae84:	00c00244 	movi	r3,9
    ae88:	1dc00936 	bltu	r3,r23,aeb0 <___vfprintf_internal_r+0x144>
    ae8c:	00bfffc4 	movi	r2,-1
    ae90:	90800426 	beq	r18,r2,aea4 <___vfprintf_internal_r+0x138>
    ae94:	01400284 	movi	r5,10
    ae98:	9009883a 	mov	r4,r18
    ae9c:	000b6240 	call	b624 <__mulsi3>
    aea0:	00000106 	br	aea8 <___vfprintf_internal_r+0x13c>
    aea4:	0005883a 	mov	r2,zero
    aea8:	b8a5883a 	add	r18,r23,r2
    aeac:	0000e206 	br	b238 <___vfprintf_internal_r+0x4cc>
    aeb0:	01400b84 	movi	r5,46
    aeb4:	1140e426 	beq	r2,r5,b248 <___vfprintf_internal_r+0x4dc>
    aeb8:	05c00084 	movi	r23,2
    aebc:	213ff404 	addi	r4,r4,-48
    aec0:	27003fcc 	andi	fp,r4,255
    aec4:	00c00244 	movi	r3,9
    aec8:	1f000936 	bltu	r3,fp,aef0 <___vfprintf_internal_r+0x184>
    aecc:	00bfffc4 	movi	r2,-1
    aed0:	98800426 	beq	r19,r2,aee4 <___vfprintf_internal_r+0x178>
    aed4:	01400284 	movi	r5,10
    aed8:	9809883a 	mov	r4,r19
    aedc:	000b6240 	call	b624 <__mulsi3>
    aee0:	00000106 	br	aee8 <___vfprintf_internal_r+0x17c>
    aee4:	0005883a 	mov	r2,zero
    aee8:	e0a7883a 	add	r19,fp,r2
    aeec:	0000d906 	br	b254 <___vfprintf_internal_r+0x4e8>
    aef0:	00c01b04 	movi	r3,108
    aef4:	10c0d226 	beq	r2,r3,b240 <___vfprintf_internal_r+0x4d4>
    aef8:	013fffc4 	movi	r4,-1
    aefc:	99000226 	beq	r19,r4,af08 <___vfprintf_internal_r+0x19c>
    af00:	d8000b15 	stw	zero,44(sp)
    af04:	00000106 	br	af0c <___vfprintf_internal_r+0x1a0>
    af08:	04c00044 	movi	r19,1
    af0c:	01001a44 	movi	r4,105
    af10:	11001626 	beq	r2,r4,af6c <___vfprintf_internal_r+0x200>
    af14:	20800916 	blt	r4,r2,af3c <___vfprintf_internal_r+0x1d0>
    af18:	010018c4 	movi	r4,99
    af1c:	11008826 	beq	r2,r4,b140 <___vfprintf_internal_r+0x3d4>
    af20:	01001904 	movi	r4,100
    af24:	11001126 	beq	r2,r4,af6c <___vfprintf_internal_r+0x200>
    af28:	01001604 	movi	r4,88
    af2c:	1100c81e 	bne	r2,r4,b250 <___vfprintf_internal_r+0x4e4>
    af30:	00c00044 	movi	r3,1
    af34:	d8c00e15 	stw	r3,56(sp)
    af38:	00001506 	br	af90 <___vfprintf_internal_r+0x224>
    af3c:	01001cc4 	movi	r4,115
    af40:	11009826 	beq	r2,r4,b1a4 <___vfprintf_internal_r+0x438>
    af44:	20800416 	blt	r4,r2,af58 <___vfprintf_internal_r+0x1ec>
    af48:	01001bc4 	movi	r4,111
    af4c:	1100c01e 	bne	r2,r4,b250 <___vfprintf_internal_r+0x4e4>
    af50:	05400204 	movi	r21,8
    af54:	00000f06 	br	af94 <___vfprintf_internal_r+0x228>
    af58:	01001d44 	movi	r4,117
    af5c:	11000d26 	beq	r2,r4,af94 <___vfprintf_internal_r+0x228>
    af60:	01001e04 	movi	r4,120
    af64:	11000a26 	beq	r2,r4,af90 <___vfprintf_internal_r+0x224>
    af68:	0000b906 	br	b250 <___vfprintf_internal_r+0x4e4>
    af6c:	d8c00a17 	ldw	r3,40(sp)
    af70:	b7000104 	addi	fp,r22,4
    af74:	18000726 	beq	r3,zero,af94 <___vfprintf_internal_r+0x228>
    af78:	df000d15 	stw	fp,52(sp)
    af7c:	b5c00017 	ldw	r23,0(r22)
    af80:	b800080e 	bge	r23,zero,afa4 <___vfprintf_internal_r+0x238>
    af84:	05efc83a 	sub	r23,zero,r23
    af88:	02400044 	movi	r9,1
    af8c:	00000606 	br	afa8 <___vfprintf_internal_r+0x23c>
    af90:	05400404 	movi	r21,16
    af94:	b0c00104 	addi	r3,r22,4
    af98:	d8c00d15 	stw	r3,52(sp)
    af9c:	b5c00017 	ldw	r23,0(r22)
    afa0:	d8000a15 	stw	zero,40(sp)
    afa4:	0013883a 	mov	r9,zero
    afa8:	d839883a 	mov	fp,sp
    afac:	b8001726 	beq	r23,zero,b00c <___vfprintf_internal_r+0x2a0>
    afb0:	a80b883a 	mov	r5,r21
    afb4:	b809883a 	mov	r4,r23
    afb8:	da401015 	stw	r9,64(sp)
    afbc:	000b5680 	call	b568 <__udivsi3>
    afc0:	a80b883a 	mov	r5,r21
    afc4:	1009883a 	mov	r4,r2
    afc8:	102d883a 	mov	r22,r2
    afcc:	000b6240 	call	b624 <__mulsi3>
    afd0:	b885c83a 	sub	r2,r23,r2
    afd4:	00c00244 	movi	r3,9
    afd8:	da401017 	ldw	r9,64(sp)
    afdc:	18800216 	blt	r3,r2,afe8 <___vfprintf_internal_r+0x27c>
    afe0:	10800c04 	addi	r2,r2,48
    afe4:	00000506 	br	affc <___vfprintf_internal_r+0x290>
    afe8:	d8c00e17 	ldw	r3,56(sp)
    afec:	18000226 	beq	r3,zero,aff8 <___vfprintf_internal_r+0x28c>
    aff0:	10800dc4 	addi	r2,r2,55
    aff4:	00000106 	br	affc <___vfprintf_internal_r+0x290>
    aff8:	108015c4 	addi	r2,r2,87
    affc:	e0800005 	stb	r2,0(fp)
    b000:	b02f883a 	mov	r23,r22
    b004:	e7000044 	addi	fp,fp,1
    b008:	003fe806 	br	afac <_gp+0xffff60a4>
    b00c:	e6efc83a 	sub	r23,fp,sp
    b010:	9dc5c83a 	sub	r2,r19,r23
    b014:	0080090e 	bge	zero,r2,b03c <___vfprintf_internal_r+0x2d0>
    b018:	e085883a 	add	r2,fp,r2
    b01c:	01400c04 	movi	r5,48
    b020:	d8c00917 	ldw	r3,36(sp)
    b024:	e009883a 	mov	r4,fp
    b028:	e0c0032e 	bgeu	fp,r3,b038 <___vfprintf_internal_r+0x2cc>
    b02c:	e7000044 	addi	fp,fp,1
    b030:	21400005 	stb	r5,0(r4)
    b034:	e0bffa1e 	bne	fp,r2,b020 <_gp+0xffff6118>
    b038:	e6efc83a 	sub	r23,fp,sp
    b03c:	d8c00b17 	ldw	r3,44(sp)
    b040:	4dd1883a 	add	r8,r9,r23
    b044:	922dc83a 	sub	r22,r18,r8
    b048:	18001626 	beq	r3,zero,b0a4 <___vfprintf_internal_r+0x338>
    b04c:	48000a26 	beq	r9,zero,b078 <___vfprintf_internal_r+0x30c>
    b050:	00800b44 	movi	r2,45
    b054:	d8800805 	stb	r2,32(sp)
    b058:	88800117 	ldw	r2,4(r17)
    b05c:	01c00044 	movi	r7,1
    b060:	d9800804 	addi	r6,sp,32
    b064:	880b883a 	mov	r5,r17
    b068:	a009883a 	mov	r4,r20
    b06c:	103ee83a 	callr	r2
    b070:	10004a1e 	bne	r2,zero,b19c <___vfprintf_internal_r+0x430>
    b074:	84000044 	addi	r16,r16,1
    b078:	0580070e 	bge	zero,r22,b098 <___vfprintf_internal_r+0x32c>
    b07c:	b00f883a 	mov	r7,r22
    b080:	01800c04 	movi	r6,48
    b084:	880b883a 	mov	r5,r17
    b088:	a009883a 	mov	r4,r20
    b08c:	000ad000 	call	ad00 <print_repeat>
    b090:	1000421e 	bne	r2,zero,b19c <___vfprintf_internal_r+0x430>
    b094:	85a1883a 	add	r16,r16,r22
    b098:	e02d883a 	mov	r22,fp
    b09c:	bf2fc83a 	sub	r23,r23,fp
    b0a0:	00002006 	br	b124 <___vfprintf_internal_r+0x3b8>
    b0a4:	0580090e 	bge	zero,r22,b0cc <___vfprintf_internal_r+0x360>
    b0a8:	b00f883a 	mov	r7,r22
    b0ac:	01800804 	movi	r6,32
    b0b0:	880b883a 	mov	r5,r17
    b0b4:	a009883a 	mov	r4,r20
    b0b8:	da401015 	stw	r9,64(sp)
    b0bc:	000ad000 	call	ad00 <print_repeat>
    b0c0:	da401017 	ldw	r9,64(sp)
    b0c4:	1000351e 	bne	r2,zero,b19c <___vfprintf_internal_r+0x430>
    b0c8:	85a1883a 	add	r16,r16,r22
    b0cc:	483ff226 	beq	r9,zero,b098 <_gp+0xffff6190>
    b0d0:	00800b44 	movi	r2,45
    b0d4:	d8800805 	stb	r2,32(sp)
    b0d8:	88800117 	ldw	r2,4(r17)
    b0dc:	01c00044 	movi	r7,1
    b0e0:	d9800804 	addi	r6,sp,32
    b0e4:	880b883a 	mov	r5,r17
    b0e8:	a009883a 	mov	r4,r20
    b0ec:	103ee83a 	callr	r2
    b0f0:	10002a1e 	bne	r2,zero,b19c <___vfprintf_internal_r+0x430>
    b0f4:	84000044 	addi	r16,r16,1
    b0f8:	003fe706 	br	b098 <_gp+0xffff6190>
    b0fc:	b5bfffc4 	addi	r22,r22,-1
    b100:	b0800003 	ldbu	r2,0(r22)
    b104:	01c00044 	movi	r7,1
    b108:	d9800804 	addi	r6,sp,32
    b10c:	d8800805 	stb	r2,32(sp)
    b110:	88800117 	ldw	r2,4(r17)
    b114:	880b883a 	mov	r5,r17
    b118:	a009883a 	mov	r4,r20
    b11c:	103ee83a 	callr	r2
    b120:	10001e1e 	bne	r2,zero,b19c <___vfprintf_internal_r+0x430>
    b124:	8585c83a 	sub	r2,r16,r22
    b128:	b5c9883a 	add	r4,r22,r23
    b12c:	e085883a 	add	r2,fp,r2
    b130:	013ff216 	blt	zero,r4,b0fc <_gp+0xffff61f4>
    b134:	1021883a 	mov	r16,r2
    b138:	dd800d17 	ldw	r22,52(sp)
    b13c:	00004406 	br	b250 <___vfprintf_internal_r+0x4e4>
    b140:	00800044 	movi	r2,1
    b144:	1480080e 	bge	r2,r18,b168 <___vfprintf_internal_r+0x3fc>
    b148:	95ffffc4 	addi	r23,r18,-1
    b14c:	b80f883a 	mov	r7,r23
    b150:	01800804 	movi	r6,32
    b154:	880b883a 	mov	r5,r17
    b158:	a009883a 	mov	r4,r20
    b15c:	000ad000 	call	ad00 <print_repeat>
    b160:	10000e1e 	bne	r2,zero,b19c <___vfprintf_internal_r+0x430>
    b164:	85e1883a 	add	r16,r16,r23
    b168:	b0800017 	ldw	r2,0(r22)
    b16c:	01c00044 	movi	r7,1
    b170:	d80d883a 	mov	r6,sp
    b174:	d8800005 	stb	r2,0(sp)
    b178:	88800117 	ldw	r2,4(r17)
    b17c:	880b883a 	mov	r5,r17
    b180:	a009883a 	mov	r4,r20
    b184:	b5c00104 	addi	r23,r22,4
    b188:	103ee83a 	callr	r2
    b18c:	1000031e 	bne	r2,zero,b19c <___vfprintf_internal_r+0x430>
    b190:	84000044 	addi	r16,r16,1
    b194:	b82d883a 	mov	r22,r23
    b198:	00002d06 	br	b250 <___vfprintf_internal_r+0x4e4>
    b19c:	00bfffc4 	movi	r2,-1
    b1a0:	00003106 	br	b268 <___vfprintf_internal_r+0x4fc>
    b1a4:	b5c00017 	ldw	r23,0(r22)
    b1a8:	b7000104 	addi	fp,r22,4
    b1ac:	b809883a 	mov	r4,r23
    b1b0:	000ace40 	call	ace4 <strlen>
    b1b4:	9091c83a 	sub	r8,r18,r2
    b1b8:	102d883a 	mov	r22,r2
    b1bc:	0200090e 	bge	zero,r8,b1e4 <___vfprintf_internal_r+0x478>
    b1c0:	400f883a 	mov	r7,r8
    b1c4:	01800804 	movi	r6,32
    b1c8:	880b883a 	mov	r5,r17
    b1cc:	a009883a 	mov	r4,r20
    b1d0:	da001015 	stw	r8,64(sp)
    b1d4:	000ad000 	call	ad00 <print_repeat>
    b1d8:	da001017 	ldw	r8,64(sp)
    b1dc:	103fef1e 	bne	r2,zero,b19c <_gp+0xffff6294>
    b1e0:	8221883a 	add	r16,r16,r8
    b1e4:	88800117 	ldw	r2,4(r17)
    b1e8:	b00f883a 	mov	r7,r22
    b1ec:	b80d883a 	mov	r6,r23
    b1f0:	880b883a 	mov	r5,r17
    b1f4:	a009883a 	mov	r4,r20
    b1f8:	103ee83a 	callr	r2
    b1fc:	103fe71e 	bne	r2,zero,b19c <_gp+0xffff6294>
    b200:	85a1883a 	add	r16,r16,r22
    b204:	e02d883a 	mov	r22,fp
    b208:	00001106 	br	b250 <___vfprintf_internal_r+0x4e4>
    b20c:	00c00044 	movi	r3,1
    b210:	04ffffc4 	movi	r19,-1
    b214:	d8000e15 	stw	zero,56(sp)
    b218:	d8c00a15 	stw	r3,40(sp)
    b21c:	05400284 	movi	r21,10
    b220:	9825883a 	mov	r18,r19
    b224:	d8000c15 	stw	zero,48(sp)
    b228:	d8000b15 	stw	zero,44(sp)
    b22c:	182f883a 	mov	r23,r3
    b230:	00000806 	br	b254 <___vfprintf_internal_r+0x4e8>
    b234:	ddc00b15 	stw	r23,44(sp)
    b238:	05c00084 	movi	r23,2
    b23c:	00000506 	br	b254 <___vfprintf_internal_r+0x4e8>
    b240:	00c00044 	movi	r3,1
    b244:	d8c00c15 	stw	r3,48(sp)
    b248:	05c000c4 	movi	r23,3
    b24c:	00000106 	br	b254 <___vfprintf_internal_r+0x4e8>
    b250:	002f883a 	mov	r23,zero
    b254:	d8c00f17 	ldw	r3,60(sp)
    b258:	18c00044 	addi	r3,r3,1
    b25c:	d8c00f15 	stw	r3,60(sp)
    b260:	003edc06 	br	add4 <_gp+0xffff5ecc>
    b264:	8005883a 	mov	r2,r16
    b268:	dfc01a17 	ldw	ra,104(sp)
    b26c:	df001917 	ldw	fp,100(sp)
    b270:	ddc01817 	ldw	r23,96(sp)
    b274:	dd801717 	ldw	r22,92(sp)
    b278:	dd401617 	ldw	r21,88(sp)
    b27c:	dd001517 	ldw	r20,84(sp)
    b280:	dcc01417 	ldw	r19,80(sp)
    b284:	dc801317 	ldw	r18,76(sp)
    b288:	dc401217 	ldw	r17,72(sp)
    b28c:	dc001117 	ldw	r16,68(sp)
    b290:	dec01b04 	addi	sp,sp,108
    b294:	f800283a 	ret

0000b298 <__vfprintf_internal>:
    b298:	00800074 	movhi	r2,1
    b29c:	10b3c304 	addi	r2,r2,-12532
    b2a0:	300f883a 	mov	r7,r6
    b2a4:	280d883a 	mov	r6,r5
    b2a8:	200b883a 	mov	r5,r4
    b2ac:	11000017 	ldw	r4,0(r2)
    b2b0:	000ad6c1 	jmpi	ad6c <___vfprintf_internal_r>

0000b2b4 <__sfvwrite_small_dev>:
    b2b4:	2880000b 	ldhu	r2,0(r5)
    b2b8:	1080020c 	andi	r2,r2,8
    b2bc:	10002126 	beq	r2,zero,b344 <__sfvwrite_small_dev+0x90>
    b2c0:	2880008f 	ldh	r2,2(r5)
    b2c4:	defffa04 	addi	sp,sp,-24
    b2c8:	dc000015 	stw	r16,0(sp)
    b2cc:	dfc00515 	stw	ra,20(sp)
    b2d0:	dd000415 	stw	r20,16(sp)
    b2d4:	dcc00315 	stw	r19,12(sp)
    b2d8:	dc800215 	stw	r18,8(sp)
    b2dc:	dc400115 	stw	r17,4(sp)
    b2e0:	2821883a 	mov	r16,r5
    b2e4:	10001216 	blt	r2,zero,b330 <__sfvwrite_small_dev+0x7c>
    b2e8:	2027883a 	mov	r19,r4
    b2ec:	3025883a 	mov	r18,r6
    b2f0:	3823883a 	mov	r17,r7
    b2f4:	05010004 	movi	r20,1024
    b2f8:	04400b0e 	bge	zero,r17,b328 <__sfvwrite_small_dev+0x74>
    b2fc:	880f883a 	mov	r7,r17
    b300:	a440010e 	bge	r20,r17,b308 <__sfvwrite_small_dev+0x54>
    b304:	01c10004 	movi	r7,1024
    b308:	8140008f 	ldh	r5,2(r16)
    b30c:	900d883a 	mov	r6,r18
    b310:	9809883a 	mov	r4,r19
    b314:	000b4180 	call	b418 <_write_r>
    b318:	0080050e 	bge	zero,r2,b330 <__sfvwrite_small_dev+0x7c>
    b31c:	88a3c83a 	sub	r17,r17,r2
    b320:	90a5883a 	add	r18,r18,r2
    b324:	003ff406 	br	b2f8 <_gp+0xffff63f0>
    b328:	0005883a 	mov	r2,zero
    b32c:	00000706 	br	b34c <__sfvwrite_small_dev+0x98>
    b330:	8080000b 	ldhu	r2,0(r16)
    b334:	10801014 	ori	r2,r2,64
    b338:	8080000d 	sth	r2,0(r16)
    b33c:	00bfffc4 	movi	r2,-1
    b340:	00000206 	br	b34c <__sfvwrite_small_dev+0x98>
    b344:	00bfffc4 	movi	r2,-1
    b348:	f800283a 	ret
    b34c:	dfc00517 	ldw	ra,20(sp)
    b350:	dd000417 	ldw	r20,16(sp)
    b354:	dcc00317 	ldw	r19,12(sp)
    b358:	dc800217 	ldw	r18,8(sp)
    b35c:	dc400117 	ldw	r17,4(sp)
    b360:	dc000017 	ldw	r16,0(sp)
    b364:	dec00604 	addi	sp,sp,24
    b368:	f800283a 	ret

0000b36c <putc>:
    b36c:	defffd04 	addi	sp,sp,-12
    b370:	00800074 	movhi	r2,1
    b374:	dc000115 	stw	r16,4(sp)
    b378:	dfc00215 	stw	ra,8(sp)
    b37c:	10acad04 	addi	r2,r2,-19788
    b380:	28800115 	stw	r2,4(r5)
    b384:	00800074 	movhi	r2,1
    b388:	10b3c304 	addi	r2,r2,-12532
    b38c:	d9000005 	stb	r4,0(sp)
    b390:	2021883a 	mov	r16,r4
    b394:	11000017 	ldw	r4,0(r2)
    b398:	01c00044 	movi	r7,1
    b39c:	d80d883a 	mov	r6,sp
    b3a0:	000b2b40 	call	b2b4 <__sfvwrite_small_dev>
    b3a4:	00ffffc4 	movi	r3,-1
    b3a8:	10c00126 	beq	r2,r3,b3b0 <putc+0x44>
    b3ac:	8005883a 	mov	r2,r16
    b3b0:	dfc00217 	ldw	ra,8(sp)
    b3b4:	dc000117 	ldw	r16,4(sp)
    b3b8:	dec00304 	addi	sp,sp,12
    b3bc:	f800283a 	ret

0000b3c0 <_putc_r>:
    b3c0:	defffd04 	addi	sp,sp,-12
    b3c4:	00800074 	movhi	r2,1
    b3c8:	dc000115 	stw	r16,4(sp)
    b3cc:	dfc00215 	stw	ra,8(sp)
    b3d0:	10acad04 	addi	r2,r2,-19788
    b3d4:	30800115 	stw	r2,4(r6)
    b3d8:	00800074 	movhi	r2,1
    b3dc:	10b3c304 	addi	r2,r2,-12532
    b3e0:	11000017 	ldw	r4,0(r2)
    b3e4:	2821883a 	mov	r16,r5
    b3e8:	01c00044 	movi	r7,1
    b3ec:	300b883a 	mov	r5,r6
    b3f0:	d80d883a 	mov	r6,sp
    b3f4:	dc000005 	stb	r16,0(sp)
    b3f8:	000b2b40 	call	b2b4 <__sfvwrite_small_dev>
    b3fc:	00ffffc4 	movi	r3,-1
    b400:	10c00126 	beq	r2,r3,b408 <_putc_r+0x48>
    b404:	8005883a 	mov	r2,r16
    b408:	dfc00217 	ldw	ra,8(sp)
    b40c:	dc000117 	ldw	r16,4(sp)
    b410:	dec00304 	addi	sp,sp,12
    b414:	f800283a 	ret

0000b418 <_write_r>:
    b418:	defffd04 	addi	sp,sp,-12
    b41c:	dc000015 	stw	r16,0(sp)
    b420:	04000074 	movhi	r16,1
    b424:	dc400115 	stw	r17,4(sp)
    b428:	84348004 	addi	r16,r16,-11776
    b42c:	2023883a 	mov	r17,r4
    b430:	2809883a 	mov	r4,r5
    b434:	300b883a 	mov	r5,r6
    b438:	380d883a 	mov	r6,r7
    b43c:	dfc00215 	stw	ra,8(sp)
    b440:	80000015 	stw	zero,0(r16)
    b444:	000b7e00 	call	b7e0 <write>
    b448:	00ffffc4 	movi	r3,-1
    b44c:	10c0031e 	bne	r2,r3,b45c <_write_r+0x44>
    b450:	80c00017 	ldw	r3,0(r16)
    b454:	18000126 	beq	r3,zero,b45c <_write_r+0x44>
    b458:	88c00015 	stw	r3,0(r17)
    b45c:	dfc00217 	ldw	ra,8(sp)
    b460:	dc400117 	ldw	r17,4(sp)
    b464:	dc000017 	ldw	r16,0(sp)
    b468:	dec00304 	addi	sp,sp,12
    b46c:	f800283a 	ret

0000b470 <__divsi3>:
    b470:	20001b16 	blt	r4,zero,b4e0 <__divsi3+0x70>
    b474:	000f883a 	mov	r7,zero
    b478:	28001616 	blt	r5,zero,b4d4 <__divsi3+0x64>
    b47c:	200d883a 	mov	r6,r4
    b480:	29001a2e 	bgeu	r5,r4,b4ec <__divsi3+0x7c>
    b484:	00800804 	movi	r2,32
    b488:	00c00044 	movi	r3,1
    b48c:	00000106 	br	b494 <__divsi3+0x24>
    b490:	10000d26 	beq	r2,zero,b4c8 <__divsi3+0x58>
    b494:	294b883a 	add	r5,r5,r5
    b498:	10bfffc4 	addi	r2,r2,-1
    b49c:	18c7883a 	add	r3,r3,r3
    b4a0:	293ffb36 	bltu	r5,r4,b490 <_gp+0xffff6588>
    b4a4:	0005883a 	mov	r2,zero
    b4a8:	18000726 	beq	r3,zero,b4c8 <__divsi3+0x58>
    b4ac:	0005883a 	mov	r2,zero
    b4b0:	31400236 	bltu	r6,r5,b4bc <__divsi3+0x4c>
    b4b4:	314dc83a 	sub	r6,r6,r5
    b4b8:	10c4b03a 	or	r2,r2,r3
    b4bc:	1806d07a 	srli	r3,r3,1
    b4c0:	280ad07a 	srli	r5,r5,1
    b4c4:	183ffa1e 	bne	r3,zero,b4b0 <_gp+0xffff65a8>
    b4c8:	38000126 	beq	r7,zero,b4d0 <__divsi3+0x60>
    b4cc:	0085c83a 	sub	r2,zero,r2
    b4d0:	f800283a 	ret
    b4d4:	014bc83a 	sub	r5,zero,r5
    b4d8:	39c0005c 	xori	r7,r7,1
    b4dc:	003fe706 	br	b47c <_gp+0xffff6574>
    b4e0:	0109c83a 	sub	r4,zero,r4
    b4e4:	01c00044 	movi	r7,1
    b4e8:	003fe306 	br	b478 <_gp+0xffff6570>
    b4ec:	00c00044 	movi	r3,1
    b4f0:	003fee06 	br	b4ac <_gp+0xffff65a4>

0000b4f4 <__modsi3>:
    b4f4:	20001716 	blt	r4,zero,b554 <__modsi3+0x60>
    b4f8:	000f883a 	mov	r7,zero
    b4fc:	2005883a 	mov	r2,r4
    b500:	28001216 	blt	r5,zero,b54c <__modsi3+0x58>
    b504:	2900162e 	bgeu	r5,r4,b560 <__modsi3+0x6c>
    b508:	01800804 	movi	r6,32
    b50c:	00c00044 	movi	r3,1
    b510:	00000106 	br	b518 <__modsi3+0x24>
    b514:	30000a26 	beq	r6,zero,b540 <__modsi3+0x4c>
    b518:	294b883a 	add	r5,r5,r5
    b51c:	31bfffc4 	addi	r6,r6,-1
    b520:	18c7883a 	add	r3,r3,r3
    b524:	293ffb36 	bltu	r5,r4,b514 <_gp+0xffff660c>
    b528:	18000526 	beq	r3,zero,b540 <__modsi3+0x4c>
    b52c:	1806d07a 	srli	r3,r3,1
    b530:	11400136 	bltu	r2,r5,b538 <__modsi3+0x44>
    b534:	1145c83a 	sub	r2,r2,r5
    b538:	280ad07a 	srli	r5,r5,1
    b53c:	183ffb1e 	bne	r3,zero,b52c <_gp+0xffff6624>
    b540:	38000126 	beq	r7,zero,b548 <__modsi3+0x54>
    b544:	0085c83a 	sub	r2,zero,r2
    b548:	f800283a 	ret
    b54c:	014bc83a 	sub	r5,zero,r5
    b550:	003fec06 	br	b504 <_gp+0xffff65fc>
    b554:	0109c83a 	sub	r4,zero,r4
    b558:	01c00044 	movi	r7,1
    b55c:	003fe706 	br	b4fc <_gp+0xffff65f4>
    b560:	00c00044 	movi	r3,1
    b564:	003ff106 	br	b52c <_gp+0xffff6624>

0000b568 <__udivsi3>:
    b568:	200d883a 	mov	r6,r4
    b56c:	2900152e 	bgeu	r5,r4,b5c4 <__udivsi3+0x5c>
    b570:	28001416 	blt	r5,zero,b5c4 <__udivsi3+0x5c>
    b574:	00800804 	movi	r2,32
    b578:	00c00044 	movi	r3,1
    b57c:	00000206 	br	b588 <__udivsi3+0x20>
    b580:	10000e26 	beq	r2,zero,b5bc <__udivsi3+0x54>
    b584:	28000516 	blt	r5,zero,b59c <__udivsi3+0x34>
    b588:	294b883a 	add	r5,r5,r5
    b58c:	10bfffc4 	addi	r2,r2,-1
    b590:	18c7883a 	add	r3,r3,r3
    b594:	293ffa36 	bltu	r5,r4,b580 <_gp+0xffff6678>
    b598:	18000826 	beq	r3,zero,b5bc <__udivsi3+0x54>
    b59c:	0005883a 	mov	r2,zero
    b5a0:	31400236 	bltu	r6,r5,b5ac <__udivsi3+0x44>
    b5a4:	314dc83a 	sub	r6,r6,r5
    b5a8:	10c4b03a 	or	r2,r2,r3
    b5ac:	1806d07a 	srli	r3,r3,1
    b5b0:	280ad07a 	srli	r5,r5,1
    b5b4:	183ffa1e 	bne	r3,zero,b5a0 <_gp+0xffff6698>
    b5b8:	f800283a 	ret
    b5bc:	0005883a 	mov	r2,zero
    b5c0:	f800283a 	ret
    b5c4:	00c00044 	movi	r3,1
    b5c8:	003ff406 	br	b59c <_gp+0xffff6694>

0000b5cc <__umodsi3>:
    b5cc:	2005883a 	mov	r2,r4
    b5d0:	2900122e 	bgeu	r5,r4,b61c <__umodsi3+0x50>
    b5d4:	28001116 	blt	r5,zero,b61c <__umodsi3+0x50>
    b5d8:	01800804 	movi	r6,32
    b5dc:	00c00044 	movi	r3,1
    b5e0:	00000206 	br	b5ec <__umodsi3+0x20>
    b5e4:	30000c26 	beq	r6,zero,b618 <__umodsi3+0x4c>
    b5e8:	28000516 	blt	r5,zero,b600 <__umodsi3+0x34>
    b5ec:	294b883a 	add	r5,r5,r5
    b5f0:	31bfffc4 	addi	r6,r6,-1
    b5f4:	18c7883a 	add	r3,r3,r3
    b5f8:	293ffa36 	bltu	r5,r4,b5e4 <_gp+0xffff66dc>
    b5fc:	18000626 	beq	r3,zero,b618 <__umodsi3+0x4c>
    b600:	1806d07a 	srli	r3,r3,1
    b604:	11400136 	bltu	r2,r5,b60c <__umodsi3+0x40>
    b608:	1145c83a 	sub	r2,r2,r5
    b60c:	280ad07a 	srli	r5,r5,1
    b610:	183ffb1e 	bne	r3,zero,b600 <_gp+0xffff66f8>
    b614:	f800283a 	ret
    b618:	f800283a 	ret
    b61c:	00c00044 	movi	r3,1
    b620:	003ff706 	br	b600 <_gp+0xffff66f8>

0000b624 <__mulsi3>:
    b624:	0005883a 	mov	r2,zero
    b628:	20000726 	beq	r4,zero,b648 <__mulsi3+0x24>
    b62c:	20c0004c 	andi	r3,r4,1
    b630:	2008d07a 	srli	r4,r4,1
    b634:	18000126 	beq	r3,zero,b63c <__mulsi3+0x18>
    b638:	1145883a 	add	r2,r2,r5
    b63c:	294b883a 	add	r5,r5,r5
    b640:	203ffa1e 	bne	r4,zero,b62c <_gp+0xffff6724>
    b644:	f800283a 	ret
    b648:	f800283a 	ret

0000b64c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b64c:	defffc04 	addi	sp,sp,-16
    b650:	df000315 	stw	fp,12(sp)
    b654:	df000304 	addi	fp,sp,12
    b658:	e13ffd15 	stw	r4,-12(fp)
    b65c:	e17ffe15 	stw	r5,-8(fp)
    b660:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b664:	e0fffe17 	ldw	r3,-8(fp)
    b668:	e0bffd17 	ldw	r2,-12(fp)
    b66c:	18800c26 	beq	r3,r2,b6a0 <alt_load_section+0x54>
  {
    while( to != end )
    b670:	00000806 	br	b694 <alt_load_section+0x48>
    {
      *to++ = *from++;
    b674:	e0bffe17 	ldw	r2,-8(fp)
    b678:	10c00104 	addi	r3,r2,4
    b67c:	e0fffe15 	stw	r3,-8(fp)
    b680:	e0fffd17 	ldw	r3,-12(fp)
    b684:	19000104 	addi	r4,r3,4
    b688:	e13ffd15 	stw	r4,-12(fp)
    b68c:	18c00017 	ldw	r3,0(r3)
    b690:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b694:	e0fffe17 	ldw	r3,-8(fp)
    b698:	e0bfff17 	ldw	r2,-4(fp)
    b69c:	18bff51e 	bne	r3,r2,b674 <_gp+0xffff676c>
    {
      *to++ = *from++;
    }
  }
}
    b6a0:	0001883a 	nop
    b6a4:	e037883a 	mov	sp,fp
    b6a8:	df000017 	ldw	fp,0(sp)
    b6ac:	dec00104 	addi	sp,sp,4
    b6b0:	f800283a 	ret

0000b6b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b6b4:	defffe04 	addi	sp,sp,-8
    b6b8:	dfc00115 	stw	ra,4(sp)
    b6bc:	df000015 	stw	fp,0(sp)
    b6c0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b6c4:	01800074 	movhi	r6,1
    b6c8:	31b3ca04 	addi	r6,r6,-12504
    b6cc:	01400074 	movhi	r5,1
    b6d0:	29731504 	addi	r5,r5,-13228
    b6d4:	01000074 	movhi	r4,1
    b6d8:	2133ca04 	addi	r4,r4,-12504
    b6dc:	000b64c0 	call	b64c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b6e0:	01800074 	movhi	r6,1
    b6e4:	31a00804 	addi	r6,r6,-32736
    b6e8:	01400074 	movhi	r5,1
    b6ec:	29600804 	addi	r5,r5,-32736
    b6f0:	01000074 	movhi	r4,1
    b6f4:	21200804 	addi	r4,r4,-32736
    b6f8:	000b64c0 	call	b64c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b6fc:	01800074 	movhi	r6,1
    b700:	31b31504 	addi	r6,r6,-13228
    b704:	01400074 	movhi	r5,1
    b708:	29723c04 	addi	r5,r5,-14096
    b70c:	01000074 	movhi	r4,1
    b710:	21323c04 	addi	r4,r4,-14096
    b714:	000b64c0 	call	b64c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b718:	000bed80 	call	bed8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b71c:	000c0040 	call	c004 <alt_icache_flush_all>
}
    b720:	0001883a 	nop
    b724:	e037883a 	mov	sp,fp
    b728:	dfc00117 	ldw	ra,4(sp)
    b72c:	df000017 	ldw	fp,0(sp)
    b730:	dec00204 	addi	sp,sp,8
    b734:	f800283a 	ret

0000b738 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b738:	defffd04 	addi	sp,sp,-12
    b73c:	dfc00215 	stw	ra,8(sp)
    b740:	df000115 	stw	fp,4(sp)
    b744:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b748:	0009883a 	mov	r4,zero
    b74c:	000b9140 	call	b914 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    b750:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b754:	000b94c0 	call	b94c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b758:	01800074 	movhi	r6,1
    b75c:	31b30804 	addi	r6,r6,-13280
    b760:	01400074 	movhi	r5,1
    b764:	29730804 	addi	r5,r5,-13280
    b768:	01000074 	movhi	r4,1
    b76c:	21330804 	addi	r4,r4,-13280
    b770:	000c1080 	call	c108 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b774:	d0a0bf17 	ldw	r2,-32004(gp)
    b778:	d0e0c017 	ldw	r3,-32000(gp)
    b77c:	d120c117 	ldw	r4,-31996(gp)
    b780:	200d883a 	mov	r6,r4
    b784:	180b883a 	mov	r5,r3
    b788:	1009883a 	mov	r4,r2
    b78c:	000a8680 	call	a868 <main>
    b790:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b794:	01000044 	movi	r4,1
    b798:	000be000 	call	be00 <close>
  exit (result);
    b79c:	e13fff17 	ldw	r4,-4(fp)
    b7a0:	000c70c0 	call	c70c <exit>

0000b7a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b7a4:	defffe04 	addi	sp,sp,-8
    b7a8:	dfc00115 	stw	ra,4(sp)
    b7ac:	df000015 	stw	fp,0(sp)
    b7b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b7b4:	d0a00717 	ldw	r2,-32740(gp)
    b7b8:	10000326 	beq	r2,zero,b7c8 <alt_get_errno+0x24>
    b7bc:	d0a00717 	ldw	r2,-32740(gp)
    b7c0:	103ee83a 	callr	r2
    b7c4:	00000106 	br	b7cc <alt_get_errno+0x28>
    b7c8:	d0a0be04 	addi	r2,gp,-32008
}
    b7cc:	e037883a 	mov	sp,fp
    b7d0:	dfc00117 	ldw	ra,4(sp)
    b7d4:	df000017 	ldw	fp,0(sp)
    b7d8:	dec00204 	addi	sp,sp,8
    b7dc:	f800283a 	ret

0000b7e0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b7e0:	defff904 	addi	sp,sp,-28
    b7e4:	dfc00615 	stw	ra,24(sp)
    b7e8:	df000515 	stw	fp,20(sp)
    b7ec:	df000504 	addi	fp,sp,20
    b7f0:	e13ffd15 	stw	r4,-12(fp)
    b7f4:	e17ffe15 	stw	r5,-8(fp)
    b7f8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b7fc:	e0bffd17 	ldw	r2,-12(fp)
    b800:	10000816 	blt	r2,zero,b824 <write+0x44>
    b804:	01400304 	movi	r5,12
    b808:	e13ffd17 	ldw	r4,-12(fp)
    b80c:	000b6240 	call	b624 <__mulsi3>
    b810:	1007883a 	mov	r3,r2
    b814:	00800074 	movhi	r2,1
    b818:	10b36204 	addi	r2,r2,-12920
    b81c:	1885883a 	add	r2,r3,r2
    b820:	00000106 	br	b828 <write+0x48>
    b824:	0005883a 	mov	r2,zero
    b828:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b82c:	e0bffb17 	ldw	r2,-20(fp)
    b830:	10002126 	beq	r2,zero,b8b8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b834:	e0bffb17 	ldw	r2,-20(fp)
    b838:	10800217 	ldw	r2,8(r2)
    b83c:	108000cc 	andi	r2,r2,3
    b840:	10001826 	beq	r2,zero,b8a4 <write+0xc4>
    b844:	e0bffb17 	ldw	r2,-20(fp)
    b848:	10800017 	ldw	r2,0(r2)
    b84c:	10800617 	ldw	r2,24(r2)
    b850:	10001426 	beq	r2,zero,b8a4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b854:	e0bffb17 	ldw	r2,-20(fp)
    b858:	10800017 	ldw	r2,0(r2)
    b85c:	10800617 	ldw	r2,24(r2)
    b860:	e0ffff17 	ldw	r3,-4(fp)
    b864:	180d883a 	mov	r6,r3
    b868:	e17ffe17 	ldw	r5,-8(fp)
    b86c:	e13ffb17 	ldw	r4,-20(fp)
    b870:	103ee83a 	callr	r2
    b874:	e0bffc15 	stw	r2,-16(fp)
    b878:	e0bffc17 	ldw	r2,-16(fp)
    b87c:	1000070e 	bge	r2,zero,b89c <write+0xbc>
      {
        ALT_ERRNO = -rval;
    b880:	000b7a40 	call	b7a4 <alt_get_errno>
    b884:	1007883a 	mov	r3,r2
    b888:	e0bffc17 	ldw	r2,-16(fp)
    b88c:	0085c83a 	sub	r2,zero,r2
    b890:	18800015 	stw	r2,0(r3)
        return -1;
    b894:	00bfffc4 	movi	r2,-1
    b898:	00000c06 	br	b8cc <write+0xec>
      }
      return rval;
    b89c:	e0bffc17 	ldw	r2,-16(fp)
    b8a0:	00000a06 	br	b8cc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b8a4:	000b7a40 	call	b7a4 <alt_get_errno>
    b8a8:	1007883a 	mov	r3,r2
    b8ac:	00800344 	movi	r2,13
    b8b0:	18800015 	stw	r2,0(r3)
    b8b4:	00000406 	br	b8c8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b8b8:	000b7a40 	call	b7a4 <alt_get_errno>
    b8bc:	1007883a 	mov	r3,r2
    b8c0:	00801444 	movi	r2,81
    b8c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b8c8:	00bfffc4 	movi	r2,-1
}
    b8cc:	e037883a 	mov	sp,fp
    b8d0:	dfc00117 	ldw	ra,4(sp)
    b8d4:	df000017 	ldw	fp,0(sp)
    b8d8:	dec00204 	addi	sp,sp,8
    b8dc:	f800283a 	ret

0000b8e0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b8e0:	defffd04 	addi	sp,sp,-12
    b8e4:	dfc00215 	stw	ra,8(sp)
    b8e8:	df000115 	stw	fp,4(sp)
    b8ec:	df000104 	addi	fp,sp,4
    b8f0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b8f4:	d1600404 	addi	r5,gp,-32752
    b8f8:	e13fff17 	ldw	r4,-4(fp)
    b8fc:	000bf600 	call	bf60 <alt_dev_llist_insert>
}
    b900:	e037883a 	mov	sp,fp
    b904:	dfc00117 	ldw	ra,4(sp)
    b908:	df000017 	ldw	fp,0(sp)
    b90c:	dec00204 	addi	sp,sp,8
    b910:	f800283a 	ret

0000b914 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b914:	defffd04 	addi	sp,sp,-12
    b918:	dfc00215 	stw	ra,8(sp)
    b91c:	df000115 	stw	fp,4(sp)
    b920:	df000104 	addi	fp,sp,4
    b924:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    b928:	000c48c0 	call	c48c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b92c:	00800044 	movi	r2,1
    b930:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b934:	0001883a 	nop
    b938:	e037883a 	mov	sp,fp
    b93c:	dfc00117 	ldw	ra,4(sp)
    b940:	df000017 	ldw	fp,0(sp)
    b944:	dec00204 	addi	sp,sp,8
    b948:	f800283a 	ret

0000b94c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b94c:	defffe04 	addi	sp,sp,-8
    b950:	dfc00115 	stw	ra,4(sp)
    b954:	df000015 	stw	fp,0(sp)
    b958:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    b95c:	01000074 	movhi	r4,1
    b960:	21334d04 	addi	r4,r4,-13004
    b964:	000b8e00 	call	b8e0 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
    b968:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    b96c:	0001883a 	nop
}
    b970:	0001883a 	nop
    b974:	e037883a 	mov	sp,fp
    b978:	dfc00117 	ldw	ra,4(sp)
    b97c:	df000017 	ldw	fp,0(sp)
    b980:	dec00204 	addi	sp,sp,8
    b984:	f800283a 	ret

0000b988 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b988:	defffa04 	addi	sp,sp,-24
    b98c:	dfc00515 	stw	ra,20(sp)
    b990:	df000415 	stw	fp,16(sp)
    b994:	df000404 	addi	fp,sp,16
    b998:	e13ffd15 	stw	r4,-12(fp)
    b99c:	e17ffe15 	stw	r5,-8(fp)
    b9a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b9a4:	e0bffd17 	ldw	r2,-12(fp)
    b9a8:	10800017 	ldw	r2,0(r2)
    b9ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b9b0:	e0bffc17 	ldw	r2,-16(fp)
    b9b4:	10c00a04 	addi	r3,r2,40
    b9b8:	e0bffd17 	ldw	r2,-12(fp)
    b9bc:	10800217 	ldw	r2,8(r2)
    b9c0:	100f883a 	mov	r7,r2
    b9c4:	e1bfff17 	ldw	r6,-4(fp)
    b9c8:	e17ffe17 	ldw	r5,-8(fp)
    b9cc:	1809883a 	mov	r4,r3
    b9d0:	000ba480 	call	ba48 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b9d4:	e037883a 	mov	sp,fp
    b9d8:	dfc00117 	ldw	ra,4(sp)
    b9dc:	df000017 	ldw	fp,0(sp)
    b9e0:	dec00204 	addi	sp,sp,8
    b9e4:	f800283a 	ret

0000b9e8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b9e8:	defffa04 	addi	sp,sp,-24
    b9ec:	dfc00515 	stw	ra,20(sp)
    b9f0:	df000415 	stw	fp,16(sp)
    b9f4:	df000404 	addi	fp,sp,16
    b9f8:	e13ffd15 	stw	r4,-12(fp)
    b9fc:	e17ffe15 	stw	r5,-8(fp)
    ba00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ba04:	e0bffd17 	ldw	r2,-12(fp)
    ba08:	10800017 	ldw	r2,0(r2)
    ba0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ba10:	e0bffc17 	ldw	r2,-16(fp)
    ba14:	10c00a04 	addi	r3,r2,40
    ba18:	e0bffd17 	ldw	r2,-12(fp)
    ba1c:	10800217 	ldw	r2,8(r2)
    ba20:	100f883a 	mov	r7,r2
    ba24:	e1bfff17 	ldw	r6,-4(fp)
    ba28:	e17ffe17 	ldw	r5,-8(fp)
    ba2c:	1809883a 	mov	r4,r3
    ba30:	000bb340 	call	bb34 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    ba34:	e037883a 	mov	sp,fp
    ba38:	dfc00117 	ldw	ra,4(sp)
    ba3c:	df000017 	ldw	fp,0(sp)
    ba40:	dec00204 	addi	sp,sp,8
    ba44:	f800283a 	ret

0000ba48 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    ba48:	defff704 	addi	sp,sp,-36
    ba4c:	df000815 	stw	fp,32(sp)
    ba50:	df000804 	addi	fp,sp,32
    ba54:	e13ffc15 	stw	r4,-16(fp)
    ba58:	e17ffd15 	stw	r5,-12(fp)
    ba5c:	e1bffe15 	stw	r6,-8(fp)
    ba60:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    ba64:	e0bffc17 	ldw	r2,-16(fp)
    ba68:	10800017 	ldw	r2,0(r2)
    ba6c:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    ba70:	e0bffd17 	ldw	r2,-12(fp)
    ba74:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    ba78:	e0bffe17 	ldw	r2,-8(fp)
    ba7c:	e0fffd17 	ldw	r3,-12(fp)
    ba80:	1885883a 	add	r2,r3,r2
    ba84:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    ba88:	00001206 	br	bad4 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ba8c:	e0bff917 	ldw	r2,-28(fp)
    ba90:	10800037 	ldwio	r2,0(r2)
    ba94:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    ba98:	e0bffb17 	ldw	r2,-20(fp)
    ba9c:	10a0000c 	andi	r2,r2,32768
    baa0:	10000626 	beq	r2,zero,babc <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    baa4:	e0bff817 	ldw	r2,-32(fp)
    baa8:	10c00044 	addi	r3,r2,1
    baac:	e0fff815 	stw	r3,-32(fp)
    bab0:	e0fffb17 	ldw	r3,-20(fp)
    bab4:	10c00005 	stb	r3,0(r2)
    bab8:	00000606 	br	bad4 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    babc:	e0fff817 	ldw	r3,-32(fp)
    bac0:	e0bffd17 	ldw	r2,-12(fp)
    bac4:	1880071e 	bne	r3,r2,bae4 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    bac8:	e0bfff17 	ldw	r2,-4(fp)
    bacc:	1090000c 	andi	r2,r2,16384
    bad0:	1000061e 	bne	r2,zero,baec <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    bad4:	e0fff817 	ldw	r3,-32(fp)
    bad8:	e0bffa17 	ldw	r2,-24(fp)
    badc:	18bfeb36 	bltu	r3,r2,ba8c <_gp+0xffff6b84>
    bae0:	00000306 	br	baf0 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    bae4:	0001883a 	nop
    bae8:	00000106 	br	baf0 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    baec:	0001883a 	nop
    
  }

  if (ptr != buffer)
    baf0:	e0fff817 	ldw	r3,-32(fp)
    baf4:	e0bffd17 	ldw	r2,-12(fp)
    baf8:	18800426 	beq	r3,r2,bb0c <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    bafc:	e0fff817 	ldw	r3,-32(fp)
    bb00:	e0bffd17 	ldw	r2,-12(fp)
    bb04:	1885c83a 	sub	r2,r3,r2
    bb08:	00000606 	br	bb24 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    bb0c:	e0bfff17 	ldw	r2,-4(fp)
    bb10:	1090000c 	andi	r2,r2,16384
    bb14:	10000226 	beq	r2,zero,bb20 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    bb18:	00bffd44 	movi	r2,-11
    bb1c:	00000106 	br	bb24 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    bb20:	00bffec4 	movi	r2,-5
}
    bb24:	e037883a 	mov	sp,fp
    bb28:	df000017 	ldw	fp,0(sp)
    bb2c:	dec00104 	addi	sp,sp,4
    bb30:	f800283a 	ret

0000bb34 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    bb34:	defff904 	addi	sp,sp,-28
    bb38:	df000615 	stw	fp,24(sp)
    bb3c:	df000604 	addi	fp,sp,24
    bb40:	e13ffc15 	stw	r4,-16(fp)
    bb44:	e17ffd15 	stw	r5,-12(fp)
    bb48:	e1bffe15 	stw	r6,-8(fp)
    bb4c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    bb50:	e0bffc17 	ldw	r2,-16(fp)
    bb54:	10800017 	ldw	r2,0(r2)
    bb58:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    bb5c:	e0bffe17 	ldw	r2,-8(fp)
    bb60:	e0fffd17 	ldw	r3,-12(fp)
    bb64:	1885883a 	add	r2,r3,r2
    bb68:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    bb6c:	00000e06 	br	bba8 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    bb70:	e0bffa17 	ldw	r2,-24(fp)
    bb74:	10800104 	addi	r2,r2,4
    bb78:	10800037 	ldwio	r2,0(r2)
    bb7c:	10bfffec 	andhi	r2,r2,65535
    bb80:	10000926 	beq	r2,zero,bba8 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    bb84:	e0fffa17 	ldw	r3,-24(fp)
    bb88:	e0bffd17 	ldw	r2,-12(fp)
    bb8c:	11000044 	addi	r4,r2,1
    bb90:	e13ffd15 	stw	r4,-12(fp)
    bb94:	10800003 	ldbu	r2,0(r2)
    bb98:	10803fcc 	andi	r2,r2,255
    bb9c:	1080201c 	xori	r2,r2,128
    bba0:	10bfe004 	addi	r2,r2,-128
    bba4:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    bba8:	e0fffd17 	ldw	r3,-12(fp)
    bbac:	e0bffb17 	ldw	r2,-20(fp)
    bbb0:	18bfef36 	bltu	r3,r2,bb70 <_gp+0xffff6c68>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    bbb4:	e0bffe17 	ldw	r2,-8(fp)
}
    bbb8:	e037883a 	mov	sp,fp
    bbbc:	df000017 	ldw	fp,0(sp)
    bbc0:	dec00104 	addi	sp,sp,4
    bbc4:	f800283a 	ret

0000bbc8 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    bbc8:	defff404 	addi	sp,sp,-48
    bbcc:	df000b15 	stw	fp,44(sp)
    bbd0:	df000b04 	addi	fp,sp,44
    bbd4:	e13ffc15 	stw	r4,-16(fp)
    bbd8:	e17ffd15 	stw	r5,-12(fp)
    bbdc:	e1bffe15 	stw	r6,-8(fp)
    bbe0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    bbe4:	e0ffff17 	ldw	r3,-4(fp)
    bbe8:	e0bffe17 	ldw	r2,-8(fp)
    bbec:	1885883a 	add	r2,r3,r2
    bbf0:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
    bbf4:	e0c00217 	ldw	r3,8(fp)
    bbf8:	e0800117 	ldw	r2,4(fp)
    bbfc:	1885883a 	add	r2,r3,r2
    bc00:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
    bc04:	e0800117 	ldw	r2,4(fp)
    bc08:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
    bc0c:	e0bffe17 	ldw	r2,-8(fp)
    bc10:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    bc14:	00800044 	movi	r2,1
    bc18:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    bc1c:	e0bffc17 	ldw	r2,-16(fp)
    bc20:	10800504 	addi	r2,r2,20
    bc24:	1009883a 	mov	r4,r2
    bc28:	00c00044 	movi	r3,1
    bc2c:	e0bffd17 	ldw	r2,-12(fp)
    bc30:	1884983a 	sll	r2,r3,r2
    bc34:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    bc38:	e0800317 	ldw	r2,12(fp)
    bc3c:	1080008c 	andi	r2,r2,2
    bc40:	1000051e 	bne	r2,zero,bc58 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    bc44:	e0bffc17 	ldw	r2,-16(fp)
    bc48:	10800304 	addi	r2,r2,12
    bc4c:	1007883a 	mov	r3,r2
    bc50:	00810004 	movi	r2,1024
    bc54:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    bc58:	e0bffc17 	ldw	r2,-16(fp)
    bc5c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    bc60:	e0bffc17 	ldw	r2,-16(fp)
    bc64:	10800204 	addi	r2,r2,8
    bc68:	10800037 	ldwio	r2,0(r2)
    bc6c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    bc70:	e0bffa17 	ldw	r2,-24(fp)
    bc74:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    bc78:	10000226 	beq	r2,zero,bc84 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    bc7c:	e0bff717 	ldw	r2,-36(fp)
    bc80:	1000031e 	bne	r2,zero,bc90 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    bc84:	e0bffa17 	ldw	r2,-24(fp)
    bc88:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    bc8c:	103ff426 	beq	r2,zero,bc60 <_gp+0xffff6d58>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    bc90:	e0bffa17 	ldw	r2,-24(fp)
    bc94:	1080100c 	andi	r2,r2,64
    bc98:	10001e26 	beq	r2,zero,bd14 <alt_avalon_spi_command+0x14c>
    bc9c:	e0bff717 	ldw	r2,-36(fp)
    bca0:	00801c0e 	bge	zero,r2,bd14 <alt_avalon_spi_command+0x14c>
    {
      credits--;
    bca4:	e0bff717 	ldw	r2,-36(fp)
    bca8:	10bfffc4 	addi	r2,r2,-1
    bcac:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
    bcb0:	e0ffff17 	ldw	r3,-4(fp)
    bcb4:	e0bff817 	ldw	r2,-32(fp)
    bcb8:	18800a2e 	bgeu	r3,r2,bce4 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    bcbc:	e0bffc17 	ldw	r2,-16(fp)
    bcc0:	10800104 	addi	r2,r2,4
    bcc4:	1009883a 	mov	r4,r2
    bcc8:	e0bfff17 	ldw	r2,-4(fp)
    bccc:	10c00044 	addi	r3,r2,1
    bcd0:	e0ffff15 	stw	r3,-4(fp)
    bcd4:	10800003 	ldbu	r2,0(r2)
    bcd8:	10803fcc 	andi	r2,r2,255
    bcdc:	20800035 	stwio	r2,0(r4)
    bce0:	00000c06 	br	bd14 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
    bce4:	e0bff517 	ldw	r2,-44(fp)
    bce8:	10000826 	beq	r2,zero,bd0c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
    bcec:	e0bff517 	ldw	r2,-44(fp)
    bcf0:	10bfffc4 	addi	r2,r2,-1
    bcf4:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    bcf8:	e0bffc17 	ldw	r2,-16(fp)
    bcfc:	10800104 	addi	r2,r2,4
    bd00:	0007883a 	mov	r3,zero
    bd04:	10c00035 	stwio	r3,0(r2)
    bd08:	00000206 	br	bd14 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
    bd0c:	00bf0004 	movi	r2,-1024
    bd10:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    bd14:	e0bffa17 	ldw	r2,-24(fp)
    bd18:	1080200c 	andi	r2,r2,128
    bd1c:	103fd026 	beq	r2,zero,bc60 <_gp+0xffff6d58>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    bd20:	e0bffc17 	ldw	r2,-16(fp)
    bd24:	10800037 	ldwio	r2,0(r2)
    bd28:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
    bd2c:	e0bff617 	ldw	r2,-40(fp)
    bd30:	10000426 	beq	r2,zero,bd44 <alt_avalon_spi_command+0x17c>
        read_ignore--;
    bd34:	e0bff617 	ldw	r2,-40(fp)
    bd38:	10bfffc4 	addi	r2,r2,-1
    bd3c:	e0bff615 	stw	r2,-40(fp)
    bd40:	00000506 	br	bd58 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
    bd44:	e0800217 	ldw	r2,8(fp)
    bd48:	10c00044 	addi	r3,r2,1
    bd4c:	e0c00215 	stw	r3,8(fp)
    bd50:	e0fffb17 	ldw	r3,-20(fp)
    bd54:	10c00005 	stb	r3,0(r2)
      credits++;
    bd58:	e0bff717 	ldw	r2,-36(fp)
    bd5c:	10800044 	addi	r2,r2,1
    bd60:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
    bd64:	e0bff617 	ldw	r2,-40(fp)
    bd68:	103fbd1e 	bne	r2,zero,bc60 <_gp+0xffff6d58>
    bd6c:	e0c00217 	ldw	r3,8(fp)
    bd70:	e0bff917 	ldw	r2,-28(fp)
    bd74:	18bfba1e 	bne	r3,r2,bc60 <_gp+0xffff6d58>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    bd78:	e0bffc17 	ldw	r2,-16(fp)
    bd7c:	10800204 	addi	r2,r2,8
    bd80:	10800037 	ldwio	r2,0(r2)
    bd84:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    bd88:	e0bffa17 	ldw	r2,-24(fp)
    bd8c:	1080080c 	andi	r2,r2,32
    bd90:	103ff926 	beq	r2,zero,bd78 <_gp+0xffff6e70>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    bd94:	e0800317 	ldw	r2,12(fp)
    bd98:	1080004c 	andi	r2,r2,1
    bd9c:	1000041e 	bne	r2,zero,bdb0 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    bda0:	e0bffc17 	ldw	r2,-16(fp)
    bda4:	10800304 	addi	r2,r2,12
    bda8:	0007883a 	mov	r3,zero
    bdac:	10c00035 	stwio	r3,0(r2)

  return read_length;
    bdb0:	e0800117 	ldw	r2,4(fp)
}
    bdb4:	e037883a 	mov	sp,fp
    bdb8:	df000017 	ldw	fp,0(sp)
    bdbc:	dec00104 	addi	sp,sp,4
    bdc0:	f800283a 	ret

0000bdc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bdc4:	defffe04 	addi	sp,sp,-8
    bdc8:	dfc00115 	stw	ra,4(sp)
    bdcc:	df000015 	stw	fp,0(sp)
    bdd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bdd4:	d0a00717 	ldw	r2,-32740(gp)
    bdd8:	10000326 	beq	r2,zero,bde8 <alt_get_errno+0x24>
    bddc:	d0a00717 	ldw	r2,-32740(gp)
    bde0:	103ee83a 	callr	r2
    bde4:	00000106 	br	bdec <alt_get_errno+0x28>
    bde8:	d0a0be04 	addi	r2,gp,-32008
}
    bdec:	e037883a 	mov	sp,fp
    bdf0:	dfc00117 	ldw	ra,4(sp)
    bdf4:	df000017 	ldw	fp,0(sp)
    bdf8:	dec00204 	addi	sp,sp,8
    bdfc:	f800283a 	ret

0000be00 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    be00:	defffb04 	addi	sp,sp,-20
    be04:	dfc00415 	stw	ra,16(sp)
    be08:	df000315 	stw	fp,12(sp)
    be0c:	df000304 	addi	fp,sp,12
    be10:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    be14:	e0bfff17 	ldw	r2,-4(fp)
    be18:	10000816 	blt	r2,zero,be3c <close+0x3c>
    be1c:	01400304 	movi	r5,12
    be20:	e13fff17 	ldw	r4,-4(fp)
    be24:	000b6240 	call	b624 <__mulsi3>
    be28:	1007883a 	mov	r3,r2
    be2c:	00800074 	movhi	r2,1
    be30:	10b36204 	addi	r2,r2,-12920
    be34:	1885883a 	add	r2,r3,r2
    be38:	00000106 	br	be40 <close+0x40>
    be3c:	0005883a 	mov	r2,zero
    be40:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    be44:	e0bffd17 	ldw	r2,-12(fp)
    be48:	10001926 	beq	r2,zero,beb0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    be4c:	e0bffd17 	ldw	r2,-12(fp)
    be50:	10800017 	ldw	r2,0(r2)
    be54:	10800417 	ldw	r2,16(r2)
    be58:	10000626 	beq	r2,zero,be74 <close+0x74>
    be5c:	e0bffd17 	ldw	r2,-12(fp)
    be60:	10800017 	ldw	r2,0(r2)
    be64:	10800417 	ldw	r2,16(r2)
    be68:	e13ffd17 	ldw	r4,-12(fp)
    be6c:	103ee83a 	callr	r2
    be70:	00000106 	br	be78 <close+0x78>
    be74:	0005883a 	mov	r2,zero
    be78:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    be7c:	e13fff17 	ldw	r4,-4(fp)
    be80:	000c4080 	call	c408 <alt_release_fd>
    if (rval < 0)
    be84:	e0bffe17 	ldw	r2,-8(fp)
    be88:	1000070e 	bge	r2,zero,bea8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    be8c:	000bdc40 	call	bdc4 <alt_get_errno>
    be90:	1007883a 	mov	r3,r2
    be94:	e0bffe17 	ldw	r2,-8(fp)
    be98:	0085c83a 	sub	r2,zero,r2
    be9c:	18800015 	stw	r2,0(r3)
      return -1;
    bea0:	00bfffc4 	movi	r2,-1
    bea4:	00000706 	br	bec4 <close+0xc4>
    }
    return 0;
    bea8:	0005883a 	mov	r2,zero
    beac:	00000506 	br	bec4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    beb0:	000bdc40 	call	bdc4 <alt_get_errno>
    beb4:	1007883a 	mov	r3,r2
    beb8:	00801444 	movi	r2,81
    bebc:	18800015 	stw	r2,0(r3)
    return -1;
    bec0:	00bfffc4 	movi	r2,-1
  }
}
    bec4:	e037883a 	mov	sp,fp
    bec8:	dfc00117 	ldw	ra,4(sp)
    becc:	df000017 	ldw	fp,0(sp)
    bed0:	dec00204 	addi	sp,sp,8
    bed4:	f800283a 	ret

0000bed8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    bed8:	deffff04 	addi	sp,sp,-4
    bedc:	df000015 	stw	fp,0(sp)
    bee0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    bee4:	0001883a 	nop
    bee8:	e037883a 	mov	sp,fp
    beec:	df000017 	ldw	fp,0(sp)
    bef0:	dec00104 	addi	sp,sp,4
    bef4:	f800283a 	ret

0000bef8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    bef8:	defffc04 	addi	sp,sp,-16
    befc:	df000315 	stw	fp,12(sp)
    bf00:	df000304 	addi	fp,sp,12
    bf04:	e13ffd15 	stw	r4,-12(fp)
    bf08:	e17ffe15 	stw	r5,-8(fp)
    bf0c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    bf10:	e0bfff17 	ldw	r2,-4(fp)
}
    bf14:	e037883a 	mov	sp,fp
    bf18:	df000017 	ldw	fp,0(sp)
    bf1c:	dec00104 	addi	sp,sp,4
    bf20:	f800283a 	ret

0000bf24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bf24:	defffe04 	addi	sp,sp,-8
    bf28:	dfc00115 	stw	ra,4(sp)
    bf2c:	df000015 	stw	fp,0(sp)
    bf30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bf34:	d0a00717 	ldw	r2,-32740(gp)
    bf38:	10000326 	beq	r2,zero,bf48 <alt_get_errno+0x24>
    bf3c:	d0a00717 	ldw	r2,-32740(gp)
    bf40:	103ee83a 	callr	r2
    bf44:	00000106 	br	bf4c <alt_get_errno+0x28>
    bf48:	d0a0be04 	addi	r2,gp,-32008
}
    bf4c:	e037883a 	mov	sp,fp
    bf50:	dfc00117 	ldw	ra,4(sp)
    bf54:	df000017 	ldw	fp,0(sp)
    bf58:	dec00204 	addi	sp,sp,8
    bf5c:	f800283a 	ret

0000bf60 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    bf60:	defffa04 	addi	sp,sp,-24
    bf64:	dfc00515 	stw	ra,20(sp)
    bf68:	df000415 	stw	fp,16(sp)
    bf6c:	df000404 	addi	fp,sp,16
    bf70:	e13ffe15 	stw	r4,-8(fp)
    bf74:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    bf78:	e0bffe17 	ldw	r2,-8(fp)
    bf7c:	10000326 	beq	r2,zero,bf8c <alt_dev_llist_insert+0x2c>
    bf80:	e0bffe17 	ldw	r2,-8(fp)
    bf84:	10800217 	ldw	r2,8(r2)
    bf88:	1000061e 	bne	r2,zero,bfa4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    bf8c:	000bf240 	call	bf24 <alt_get_errno>
    bf90:	1007883a 	mov	r3,r2
    bf94:	00800584 	movi	r2,22
    bf98:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    bf9c:	00bffa84 	movi	r2,-22
    bfa0:	00001306 	br	bff0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    bfa4:	e0bffe17 	ldw	r2,-8(fp)
    bfa8:	e0ffff17 	ldw	r3,-4(fp)
    bfac:	e0fffc15 	stw	r3,-16(fp)
    bfb0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bfb4:	e0bffd17 	ldw	r2,-12(fp)
    bfb8:	e0fffc17 	ldw	r3,-16(fp)
    bfbc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    bfc0:	e0bffc17 	ldw	r2,-16(fp)
    bfc4:	10c00017 	ldw	r3,0(r2)
    bfc8:	e0bffd17 	ldw	r2,-12(fp)
    bfcc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bfd0:	e0bffc17 	ldw	r2,-16(fp)
    bfd4:	10800017 	ldw	r2,0(r2)
    bfd8:	e0fffd17 	ldw	r3,-12(fp)
    bfdc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    bfe0:	e0bffc17 	ldw	r2,-16(fp)
    bfe4:	e0fffd17 	ldw	r3,-12(fp)
    bfe8:	10c00015 	stw	r3,0(r2)

  return 0;  
    bfec:	0005883a 	mov	r2,zero
}
    bff0:	e037883a 	mov	sp,fp
    bff4:	dfc00117 	ldw	ra,4(sp)
    bff8:	df000017 	ldw	fp,0(sp)
    bffc:	dec00204 	addi	sp,sp,8
    c000:	f800283a 	ret

0000c004 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c004:	deffff04 	addi	sp,sp,-4
    c008:	df000015 	stw	fp,0(sp)
    c00c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    c010:	0001883a 	nop
    c014:	e037883a 	mov	sp,fp
    c018:	df000017 	ldw	fp,0(sp)
    c01c:	dec00104 	addi	sp,sp,4
    c020:	f800283a 	ret

0000c024 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c024:	defff804 	addi	sp,sp,-32
    c028:	dfc00715 	stw	ra,28(sp)
    c02c:	df000615 	stw	fp,24(sp)
    c030:	dc000515 	stw	r16,20(sp)
    c034:	df000604 	addi	fp,sp,24
    c038:	e13ffb15 	stw	r4,-20(fp)
    c03c:	e17ffc15 	stw	r5,-16(fp)
    c040:	e1bffd15 	stw	r6,-12(fp)
    c044:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    c048:	e1bffe17 	ldw	r6,-8(fp)
    c04c:	e17ffd17 	ldw	r5,-12(fp)
    c050:	e13ffc17 	ldw	r4,-16(fp)
    c054:	000c2ac0 	call	c2ac <open>
    c058:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    c05c:	e0bffa17 	ldw	r2,-24(fp)
    c060:	10002216 	blt	r2,zero,c0ec <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    c064:	04000074 	movhi	r16,1
    c068:	84336204 	addi	r16,r16,-12920
    c06c:	e0bffa17 	ldw	r2,-24(fp)
    c070:	01400304 	movi	r5,12
    c074:	1009883a 	mov	r4,r2
    c078:	000b6240 	call	b624 <__mulsi3>
    c07c:	8085883a 	add	r2,r16,r2
    c080:	10c00017 	ldw	r3,0(r2)
    c084:	e0bffb17 	ldw	r2,-20(fp)
    c088:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c08c:	04000074 	movhi	r16,1
    c090:	84336204 	addi	r16,r16,-12920
    c094:	e0bffa17 	ldw	r2,-24(fp)
    c098:	01400304 	movi	r5,12
    c09c:	1009883a 	mov	r4,r2
    c0a0:	000b6240 	call	b624 <__mulsi3>
    c0a4:	8085883a 	add	r2,r16,r2
    c0a8:	10800104 	addi	r2,r2,4
    c0ac:	10c00017 	ldw	r3,0(r2)
    c0b0:	e0bffb17 	ldw	r2,-20(fp)
    c0b4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c0b8:	04000074 	movhi	r16,1
    c0bc:	84336204 	addi	r16,r16,-12920
    c0c0:	e0bffa17 	ldw	r2,-24(fp)
    c0c4:	01400304 	movi	r5,12
    c0c8:	1009883a 	mov	r4,r2
    c0cc:	000b6240 	call	b624 <__mulsi3>
    c0d0:	8085883a 	add	r2,r16,r2
    c0d4:	10800204 	addi	r2,r2,8
    c0d8:	10c00017 	ldw	r3,0(r2)
    c0dc:	e0bffb17 	ldw	r2,-20(fp)
    c0e0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c0e4:	e13ffa17 	ldw	r4,-24(fp)
    c0e8:	000c4080 	call	c408 <alt_release_fd>
  }
} 
    c0ec:	0001883a 	nop
    c0f0:	e6ffff04 	addi	sp,fp,-4
    c0f4:	dfc00217 	ldw	ra,8(sp)
    c0f8:	df000117 	ldw	fp,4(sp)
    c0fc:	dc000017 	ldw	r16,0(sp)
    c100:	dec00304 	addi	sp,sp,12
    c104:	f800283a 	ret

0000c108 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c108:	defffb04 	addi	sp,sp,-20
    c10c:	dfc00415 	stw	ra,16(sp)
    c110:	df000315 	stw	fp,12(sp)
    c114:	df000304 	addi	fp,sp,12
    c118:	e13ffd15 	stw	r4,-12(fp)
    c11c:	e17ffe15 	stw	r5,-8(fp)
    c120:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c124:	01c07fc4 	movi	r7,511
    c128:	01800044 	movi	r6,1
    c12c:	e17ffd17 	ldw	r5,-12(fp)
    c130:	01000074 	movhi	r4,1
    c134:	21336504 	addi	r4,r4,-12908
    c138:	000c0240 	call	c024 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c13c:	01c07fc4 	movi	r7,511
    c140:	000d883a 	mov	r6,zero
    c144:	e17ffe17 	ldw	r5,-8(fp)
    c148:	01000074 	movhi	r4,1
    c14c:	21336204 	addi	r4,r4,-12920
    c150:	000c0240 	call	c024 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c154:	01c07fc4 	movi	r7,511
    c158:	01800044 	movi	r6,1
    c15c:	e17fff17 	ldw	r5,-4(fp)
    c160:	01000074 	movhi	r4,1
    c164:	21336804 	addi	r4,r4,-12896
    c168:	000c0240 	call	c024 <alt_open_fd>
}  
    c16c:	0001883a 	nop
    c170:	e037883a 	mov	sp,fp
    c174:	dfc00117 	ldw	ra,4(sp)
    c178:	df000017 	ldw	fp,0(sp)
    c17c:	dec00204 	addi	sp,sp,8
    c180:	f800283a 	ret

0000c184 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c184:	defffe04 	addi	sp,sp,-8
    c188:	dfc00115 	stw	ra,4(sp)
    c18c:	df000015 	stw	fp,0(sp)
    c190:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c194:	d0a00717 	ldw	r2,-32740(gp)
    c198:	10000326 	beq	r2,zero,c1a8 <alt_get_errno+0x24>
    c19c:	d0a00717 	ldw	r2,-32740(gp)
    c1a0:	103ee83a 	callr	r2
    c1a4:	00000106 	br	c1ac <alt_get_errno+0x28>
    c1a8:	d0a0be04 	addi	r2,gp,-32008
}
    c1ac:	e037883a 	mov	sp,fp
    c1b0:	dfc00117 	ldw	ra,4(sp)
    c1b4:	df000017 	ldw	fp,0(sp)
    c1b8:	dec00204 	addi	sp,sp,8
    c1bc:	f800283a 	ret

0000c1c0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c1c0:	defffb04 	addi	sp,sp,-20
    c1c4:	dfc00415 	stw	ra,16(sp)
    c1c8:	df000315 	stw	fp,12(sp)
    c1cc:	dc000215 	stw	r16,8(sp)
    c1d0:	df000304 	addi	fp,sp,12
    c1d4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c1d8:	e0bffe17 	ldw	r2,-8(fp)
    c1dc:	10800217 	ldw	r2,8(r2)
    c1e0:	10d00034 	orhi	r3,r2,16384
    c1e4:	e0bffe17 	ldw	r2,-8(fp)
    c1e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c1ec:	e03ffd15 	stw	zero,-12(fp)
    c1f0:	00002306 	br	c280 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c1f4:	04000074 	movhi	r16,1
    c1f8:	84336204 	addi	r16,r16,-12920
    c1fc:	e0bffd17 	ldw	r2,-12(fp)
    c200:	01400304 	movi	r5,12
    c204:	1009883a 	mov	r4,r2
    c208:	000b6240 	call	b624 <__mulsi3>
    c20c:	8085883a 	add	r2,r16,r2
    c210:	10c00017 	ldw	r3,0(r2)
    c214:	e0bffe17 	ldw	r2,-8(fp)
    c218:	10800017 	ldw	r2,0(r2)
    c21c:	1880151e 	bne	r3,r2,c274 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c220:	04000074 	movhi	r16,1
    c224:	84336204 	addi	r16,r16,-12920
    c228:	e0bffd17 	ldw	r2,-12(fp)
    c22c:	01400304 	movi	r5,12
    c230:	1009883a 	mov	r4,r2
    c234:	000b6240 	call	b624 <__mulsi3>
    c238:	8085883a 	add	r2,r16,r2
    c23c:	10800204 	addi	r2,r2,8
    c240:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c244:	10000b0e 	bge	r2,zero,c274 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    c248:	01400304 	movi	r5,12
    c24c:	e13ffd17 	ldw	r4,-12(fp)
    c250:	000b6240 	call	b624 <__mulsi3>
    c254:	1007883a 	mov	r3,r2
    c258:	00800074 	movhi	r2,1
    c25c:	10b36204 	addi	r2,r2,-12920
    c260:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c264:	e0bffe17 	ldw	r2,-8(fp)
    c268:	18800226 	beq	r3,r2,c274 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c26c:	00bffcc4 	movi	r2,-13
    c270:	00000806 	br	c294 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c274:	e0bffd17 	ldw	r2,-12(fp)
    c278:	10800044 	addi	r2,r2,1
    c27c:	e0bffd15 	stw	r2,-12(fp)
    c280:	d0a00617 	ldw	r2,-32744(gp)
    c284:	1007883a 	mov	r3,r2
    c288:	e0bffd17 	ldw	r2,-12(fp)
    c28c:	18bfd92e 	bgeu	r3,r2,c1f4 <_gp+0xffff72ec>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c290:	0005883a 	mov	r2,zero
}
    c294:	e6ffff04 	addi	sp,fp,-4
    c298:	dfc00217 	ldw	ra,8(sp)
    c29c:	df000117 	ldw	fp,4(sp)
    c2a0:	dc000017 	ldw	r16,0(sp)
    c2a4:	dec00304 	addi	sp,sp,12
    c2a8:	f800283a 	ret

0000c2ac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c2ac:	defff604 	addi	sp,sp,-40
    c2b0:	dfc00915 	stw	ra,36(sp)
    c2b4:	df000815 	stw	fp,32(sp)
    c2b8:	df000804 	addi	fp,sp,32
    c2bc:	e13ffd15 	stw	r4,-12(fp)
    c2c0:	e17ffe15 	stw	r5,-8(fp)
    c2c4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c2c8:	00bfffc4 	movi	r2,-1
    c2cc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    c2d0:	00bffb44 	movi	r2,-19
    c2d4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    c2d8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c2dc:	d1600404 	addi	r5,gp,-32752
    c2e0:	e13ffd17 	ldw	r4,-12(fp)
    c2e4:	000c4b00 	call	c4b0 <alt_find_dev>
    c2e8:	e0bff815 	stw	r2,-32(fp)
    c2ec:	e0bff817 	ldw	r2,-32(fp)
    c2f0:	1000051e 	bne	r2,zero,c308 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c2f4:	e13ffd17 	ldw	r4,-12(fp)
    c2f8:	000c5400 	call	c540 <alt_find_file>
    c2fc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    c300:	00800044 	movi	r2,1
    c304:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c308:	e0bff817 	ldw	r2,-32(fp)
    c30c:	10002b26 	beq	r2,zero,c3bc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c310:	e13ff817 	ldw	r4,-32(fp)
    c314:	000c6480 	call	c648 <alt_get_fd>
    c318:	e0bff915 	stw	r2,-28(fp)
    c31c:	e0bff917 	ldw	r2,-28(fp)
    c320:	1000030e 	bge	r2,zero,c330 <open+0x84>
    {
      status = index;
    c324:	e0bff917 	ldw	r2,-28(fp)
    c328:	e0bffa15 	stw	r2,-24(fp)
    c32c:	00002506 	br	c3c4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    c330:	01400304 	movi	r5,12
    c334:	e13ff917 	ldw	r4,-28(fp)
    c338:	000b6240 	call	b624 <__mulsi3>
    c33c:	1007883a 	mov	r3,r2
    c340:	00800074 	movhi	r2,1
    c344:	10b36204 	addi	r2,r2,-12920
    c348:	1885883a 	add	r2,r3,r2
    c34c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c350:	e0fffe17 	ldw	r3,-8(fp)
    c354:	00900034 	movhi	r2,16384
    c358:	10bfffc4 	addi	r2,r2,-1
    c35c:	1886703a 	and	r3,r3,r2
    c360:	e0bffc17 	ldw	r2,-16(fp)
    c364:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c368:	e0bffb17 	ldw	r2,-20(fp)
    c36c:	1000051e 	bne	r2,zero,c384 <open+0xd8>
    c370:	e13ffc17 	ldw	r4,-16(fp)
    c374:	000c1c00 	call	c1c0 <alt_file_locked>
    c378:	e0bffa15 	stw	r2,-24(fp)
    c37c:	e0bffa17 	ldw	r2,-24(fp)
    c380:	10001016 	blt	r2,zero,c3c4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c384:	e0bff817 	ldw	r2,-32(fp)
    c388:	10800317 	ldw	r2,12(r2)
    c38c:	10000826 	beq	r2,zero,c3b0 <open+0x104>
    c390:	e0bff817 	ldw	r2,-32(fp)
    c394:	10800317 	ldw	r2,12(r2)
    c398:	e1ffff17 	ldw	r7,-4(fp)
    c39c:	e1bffe17 	ldw	r6,-8(fp)
    c3a0:	e17ffd17 	ldw	r5,-12(fp)
    c3a4:	e13ffc17 	ldw	r4,-16(fp)
    c3a8:	103ee83a 	callr	r2
    c3ac:	00000106 	br	c3b4 <open+0x108>
    c3b0:	0005883a 	mov	r2,zero
    c3b4:	e0bffa15 	stw	r2,-24(fp)
    c3b8:	00000206 	br	c3c4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c3bc:	00bffb44 	movi	r2,-19
    c3c0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c3c4:	e0bffa17 	ldw	r2,-24(fp)
    c3c8:	1000090e 	bge	r2,zero,c3f0 <open+0x144>
  {
    alt_release_fd (index);  
    c3cc:	e13ff917 	ldw	r4,-28(fp)
    c3d0:	000c4080 	call	c408 <alt_release_fd>
    ALT_ERRNO = -status;
    c3d4:	000c1840 	call	c184 <alt_get_errno>
    c3d8:	1007883a 	mov	r3,r2
    c3dc:	e0bffa17 	ldw	r2,-24(fp)
    c3e0:	0085c83a 	sub	r2,zero,r2
    c3e4:	18800015 	stw	r2,0(r3)
    return -1;
    c3e8:	00bfffc4 	movi	r2,-1
    c3ec:	00000106 	br	c3f4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    c3f0:	e0bff917 	ldw	r2,-28(fp)
}
    c3f4:	e037883a 	mov	sp,fp
    c3f8:	dfc00117 	ldw	ra,4(sp)
    c3fc:	df000017 	ldw	fp,0(sp)
    c400:	dec00204 	addi	sp,sp,8
    c404:	f800283a 	ret

0000c408 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    c408:	defffc04 	addi	sp,sp,-16
    c40c:	dfc00315 	stw	ra,12(sp)
    c410:	df000215 	stw	fp,8(sp)
    c414:	dc000115 	stw	r16,4(sp)
    c418:	df000204 	addi	fp,sp,8
    c41c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    c420:	e0bffe17 	ldw	r2,-8(fp)
    c424:	108000d0 	cmplti	r2,r2,3
    c428:	1000111e 	bne	r2,zero,c470 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    c42c:	04000074 	movhi	r16,1
    c430:	84336204 	addi	r16,r16,-12920
    c434:	e0bffe17 	ldw	r2,-8(fp)
    c438:	01400304 	movi	r5,12
    c43c:	1009883a 	mov	r4,r2
    c440:	000b6240 	call	b624 <__mulsi3>
    c444:	8085883a 	add	r2,r16,r2
    c448:	10800204 	addi	r2,r2,8
    c44c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    c450:	04000074 	movhi	r16,1
    c454:	84336204 	addi	r16,r16,-12920
    c458:	e0bffe17 	ldw	r2,-8(fp)
    c45c:	01400304 	movi	r5,12
    c460:	1009883a 	mov	r4,r2
    c464:	000b6240 	call	b624 <__mulsi3>
    c468:	8085883a 	add	r2,r16,r2
    c46c:	10000015 	stw	zero,0(r2)
  }
}
    c470:	0001883a 	nop
    c474:	e6ffff04 	addi	sp,fp,-4
    c478:	dfc00217 	ldw	ra,8(sp)
    c47c:	df000117 	ldw	fp,4(sp)
    c480:	dc000017 	ldw	r16,0(sp)
    c484:	dec00304 	addi	sp,sp,12
    c488:	f800283a 	ret

0000c48c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    c48c:	deffff04 	addi	sp,sp,-4
    c490:	df000015 	stw	fp,0(sp)
    c494:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c498:	000170fa 	wrctl	ienable,zero
}
    c49c:	0001883a 	nop
    c4a0:	e037883a 	mov	sp,fp
    c4a4:	df000017 	ldw	fp,0(sp)
    c4a8:	dec00104 	addi	sp,sp,4
    c4ac:	f800283a 	ret

0000c4b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c4b0:	defffa04 	addi	sp,sp,-24
    c4b4:	dfc00515 	stw	ra,20(sp)
    c4b8:	df000415 	stw	fp,16(sp)
    c4bc:	df000404 	addi	fp,sp,16
    c4c0:	e13ffe15 	stw	r4,-8(fp)
    c4c4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c4c8:	e0bfff17 	ldw	r2,-4(fp)
    c4cc:	10800017 	ldw	r2,0(r2)
    c4d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c4d4:	e13ffe17 	ldw	r4,-8(fp)
    c4d8:	000ace40 	call	ace4 <strlen>
    c4dc:	10800044 	addi	r2,r2,1
    c4e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c4e4:	00000d06 	br	c51c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c4e8:	e0bffc17 	ldw	r2,-16(fp)
    c4ec:	10800217 	ldw	r2,8(r2)
    c4f0:	e0fffd17 	ldw	r3,-12(fp)
    c4f4:	180d883a 	mov	r6,r3
    c4f8:	e17ffe17 	ldw	r5,-8(fp)
    c4fc:	1009883a 	mov	r4,r2
    c500:	000ab2c0 	call	ab2c <memcmp>
    c504:	1000021e 	bne	r2,zero,c510 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c508:	e0bffc17 	ldw	r2,-16(fp)
    c50c:	00000706 	br	c52c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c510:	e0bffc17 	ldw	r2,-16(fp)
    c514:	10800017 	ldw	r2,0(r2)
    c518:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c51c:	e0fffc17 	ldw	r3,-16(fp)
    c520:	e0bfff17 	ldw	r2,-4(fp)
    c524:	18bff01e 	bne	r3,r2,c4e8 <_gp+0xffff75e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c528:	0005883a 	mov	r2,zero
}
    c52c:	e037883a 	mov	sp,fp
    c530:	dfc00117 	ldw	ra,4(sp)
    c534:	df000017 	ldw	fp,0(sp)
    c538:	dec00204 	addi	sp,sp,8
    c53c:	f800283a 	ret

0000c540 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c540:	defffb04 	addi	sp,sp,-20
    c544:	dfc00415 	stw	ra,16(sp)
    c548:	df000315 	stw	fp,12(sp)
    c54c:	df000304 	addi	fp,sp,12
    c550:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c554:	d0a00217 	ldw	r2,-32760(gp)
    c558:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c55c:	00003106 	br	c624 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    c560:	e0bffd17 	ldw	r2,-12(fp)
    c564:	10800217 	ldw	r2,8(r2)
    c568:	1009883a 	mov	r4,r2
    c56c:	000ace40 	call	ace4 <strlen>
    c570:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c574:	e0bffd17 	ldw	r2,-12(fp)
    c578:	10c00217 	ldw	r3,8(r2)
    c57c:	e0bffe17 	ldw	r2,-8(fp)
    c580:	10bfffc4 	addi	r2,r2,-1
    c584:	1885883a 	add	r2,r3,r2
    c588:	10800003 	ldbu	r2,0(r2)
    c58c:	10803fcc 	andi	r2,r2,255
    c590:	1080201c 	xori	r2,r2,128
    c594:	10bfe004 	addi	r2,r2,-128
    c598:	10800bd8 	cmpnei	r2,r2,47
    c59c:	1000031e 	bne	r2,zero,c5ac <alt_find_file+0x6c>
    {
      len -= 1;
    c5a0:	e0bffe17 	ldw	r2,-8(fp)
    c5a4:	10bfffc4 	addi	r2,r2,-1
    c5a8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c5ac:	e0bffe17 	ldw	r2,-8(fp)
    c5b0:	e0ffff17 	ldw	r3,-4(fp)
    c5b4:	1885883a 	add	r2,r3,r2
    c5b8:	10800003 	ldbu	r2,0(r2)
    c5bc:	10803fcc 	andi	r2,r2,255
    c5c0:	1080201c 	xori	r2,r2,128
    c5c4:	10bfe004 	addi	r2,r2,-128
    c5c8:	10800be0 	cmpeqi	r2,r2,47
    c5cc:	1000081e 	bne	r2,zero,c5f0 <alt_find_file+0xb0>
    c5d0:	e0bffe17 	ldw	r2,-8(fp)
    c5d4:	e0ffff17 	ldw	r3,-4(fp)
    c5d8:	1885883a 	add	r2,r3,r2
    c5dc:	10800003 	ldbu	r2,0(r2)
    c5e0:	10803fcc 	andi	r2,r2,255
    c5e4:	1080201c 	xori	r2,r2,128
    c5e8:	10bfe004 	addi	r2,r2,-128
    c5ec:	10000a1e 	bne	r2,zero,c618 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    c5f0:	e0bffd17 	ldw	r2,-12(fp)
    c5f4:	10800217 	ldw	r2,8(r2)
    c5f8:	e0fffe17 	ldw	r3,-8(fp)
    c5fc:	180d883a 	mov	r6,r3
    c600:	e17fff17 	ldw	r5,-4(fp)
    c604:	1009883a 	mov	r4,r2
    c608:	000ab2c0 	call	ab2c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c60c:	1000021e 	bne	r2,zero,c618 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c610:	e0bffd17 	ldw	r2,-12(fp)
    c614:	00000706 	br	c634 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    c618:	e0bffd17 	ldw	r2,-12(fp)
    c61c:	10800017 	ldw	r2,0(r2)
    c620:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c624:	e0fffd17 	ldw	r3,-12(fp)
    c628:	d0a00204 	addi	r2,gp,-32760
    c62c:	18bfcc1e 	bne	r3,r2,c560 <_gp+0xffff7658>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c630:	0005883a 	mov	r2,zero
}
    c634:	e037883a 	mov	sp,fp
    c638:	dfc00117 	ldw	ra,4(sp)
    c63c:	df000017 	ldw	fp,0(sp)
    c640:	dec00204 	addi	sp,sp,8
    c644:	f800283a 	ret

0000c648 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c648:	defffa04 	addi	sp,sp,-24
    c64c:	dfc00515 	stw	ra,20(sp)
    c650:	df000415 	stw	fp,16(sp)
    c654:	dc000315 	stw	r16,12(sp)
    c658:	df000404 	addi	fp,sp,16
    c65c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    c660:	00bffa04 	movi	r2,-24
    c664:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c668:	e03ffc15 	stw	zero,-16(fp)
    c66c:	00001d06 	br	c6e4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    c670:	04000074 	movhi	r16,1
    c674:	84336204 	addi	r16,r16,-12920
    c678:	e0bffc17 	ldw	r2,-16(fp)
    c67c:	01400304 	movi	r5,12
    c680:	1009883a 	mov	r4,r2
    c684:	000b6240 	call	b624 <__mulsi3>
    c688:	8085883a 	add	r2,r16,r2
    c68c:	10800017 	ldw	r2,0(r2)
    c690:	1000111e 	bne	r2,zero,c6d8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    c694:	04000074 	movhi	r16,1
    c698:	84336204 	addi	r16,r16,-12920
    c69c:	e0bffc17 	ldw	r2,-16(fp)
    c6a0:	01400304 	movi	r5,12
    c6a4:	1009883a 	mov	r4,r2
    c6a8:	000b6240 	call	b624 <__mulsi3>
    c6ac:	8085883a 	add	r2,r16,r2
    c6b0:	e0fffe17 	ldw	r3,-8(fp)
    c6b4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    c6b8:	d0e00617 	ldw	r3,-32744(gp)
    c6bc:	e0bffc17 	ldw	r2,-16(fp)
    c6c0:	1880020e 	bge	r3,r2,c6cc <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    c6c4:	e0bffc17 	ldw	r2,-16(fp)
    c6c8:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    c6cc:	e0bffc17 	ldw	r2,-16(fp)
    c6d0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    c6d4:	00000606 	br	c6f0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c6d8:	e0bffc17 	ldw	r2,-16(fp)
    c6dc:	10800044 	addi	r2,r2,1
    c6e0:	e0bffc15 	stw	r2,-16(fp)
    c6e4:	e0bffc17 	ldw	r2,-16(fp)
    c6e8:	10800810 	cmplti	r2,r2,32
    c6ec:	103fe01e 	bne	r2,zero,c670 <_gp+0xffff7768>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c6f0:	e0bffd17 	ldw	r2,-12(fp)
}
    c6f4:	e6ffff04 	addi	sp,fp,-4
    c6f8:	dfc00217 	ldw	ra,8(sp)
    c6fc:	df000117 	ldw	fp,4(sp)
    c700:	dc000017 	ldw	r16,0(sp)
    c704:	dec00304 	addi	sp,sp,12
    c708:	f800283a 	ret

0000c70c <exit>:
    c70c:	defffe04 	addi	sp,sp,-8
    c710:	000b883a 	mov	r5,zero
    c714:	dc000015 	stw	r16,0(sp)
    c718:	dfc00115 	stw	ra,4(sp)
    c71c:	2021883a 	mov	r16,r4
    c720:	000c72c0 	call	c72c <__call_exitprocs>
    c724:	8009883a 	mov	r4,r16
    c728:	000c8bc0 	call	c8bc <_exit>

0000c72c <__call_exitprocs>:
    c72c:	defff504 	addi	sp,sp,-44
    c730:	dd000515 	stw	r20,20(sp)
    c734:	05000074 	movhi	r20,1
    c738:	dc800315 	stw	r18,12(sp)
    c73c:	dfc00a15 	stw	ra,40(sp)
    c740:	df000915 	stw	fp,36(sp)
    c744:	ddc00815 	stw	r23,32(sp)
    c748:	dd800715 	stw	r22,28(sp)
    c74c:	dd400615 	stw	r21,24(sp)
    c750:	dcc00415 	stw	r19,16(sp)
    c754:	dc400215 	stw	r17,8(sp)
    c758:	dc000115 	stw	r16,4(sp)
    c75c:	d9000015 	stw	r4,0(sp)
    c760:	2825883a 	mov	r18,r5
    c764:	a533c204 	addi	r20,r20,-12536
    c768:	a4400017 	ldw	r17,0(r20)
    c76c:	8cc00c17 	ldw	r19,48(r17)
    c770:	8c400c04 	addi	r17,r17,48
    c774:	98004526 	beq	r19,zero,c88c <__call_exitprocs+0x160>
    c778:	9c000117 	ldw	r16,4(r19)
    c77c:	00900034 	movhi	r2,16384
    c780:	10bfffc4 	addi	r2,r2,-1
    c784:	9d402217 	ldw	r21,136(r19)
    c788:	85bfffc4 	addi	r22,r16,-1
    c78c:	80a1883a 	add	r16,r16,r2
    c790:	8421883a 	add	r16,r16,r16
    c794:	8421883a 	add	r16,r16,r16
    c798:	ac2f883a 	add	r23,r21,r16
    c79c:	84000204 	addi	r16,r16,8
    c7a0:	9c21883a 	add	r16,r19,r16
    c7a4:	b0002716 	blt	r22,zero,c844 <__call_exitprocs+0x118>
    c7a8:	90000726 	beq	r18,zero,c7c8 <__call_exitprocs+0x9c>
    c7ac:	a800041e 	bne	r21,zero,c7c0 <__call_exitprocs+0x94>
    c7b0:	b5bfffc4 	addi	r22,r22,-1
    c7b4:	bdffff04 	addi	r23,r23,-4
    c7b8:	843fff04 	addi	r16,r16,-4
    c7bc:	003ff906 	br	c7a4 <_gp+0xffff789c>
    c7c0:	b9002017 	ldw	r4,128(r23)
    c7c4:	913ffa1e 	bne	r18,r4,c7b0 <_gp+0xffff78a8>
    c7c8:	99000117 	ldw	r4,4(r19)
    c7cc:	82000017 	ldw	r8,0(r16)
    c7d0:	213fffc4 	addi	r4,r4,-1
    c7d4:	b100021e 	bne	r22,r4,c7e0 <__call_exitprocs+0xb4>
    c7d8:	9d800115 	stw	r22,4(r19)
    c7dc:	00000106 	br	c7e4 <__call_exitprocs+0xb8>
    c7e0:	80000015 	stw	zero,0(r16)
    c7e4:	403ff226 	beq	r8,zero,c7b0 <_gp+0xffff78a8>
    c7e8:	9f000117 	ldw	fp,4(r19)
    c7ec:	a8000526 	beq	r21,zero,c804 <__call_exitprocs+0xd8>
    c7f0:	00800044 	movi	r2,1
    c7f4:	1592983a 	sll	r9,r2,r22
    c7f8:	a9404017 	ldw	r5,256(r21)
    c7fc:	494a703a 	and	r5,r9,r5
    c800:	2800021e 	bne	r5,zero,c80c <__call_exitprocs+0xe0>
    c804:	403ee83a 	callr	r8
    c808:	00000906 	br	c830 <__call_exitprocs+0x104>
    c80c:	a9004117 	ldw	r4,260(r21)
    c810:	4908703a 	and	r4,r9,r4
    c814:	2000041e 	bne	r4,zero,c828 <__call_exitprocs+0xfc>
    c818:	b9400017 	ldw	r5,0(r23)
    c81c:	d9000017 	ldw	r4,0(sp)
    c820:	403ee83a 	callr	r8
    c824:	00000206 	br	c830 <__call_exitprocs+0x104>
    c828:	b9000017 	ldw	r4,0(r23)
    c82c:	403ee83a 	callr	r8
    c830:	99000117 	ldw	r4,4(r19)
    c834:	e13fcc1e 	bne	fp,r4,c768 <_gp+0xffff7860>
    c838:	89000017 	ldw	r4,0(r17)
    c83c:	993fdc26 	beq	r19,r4,c7b0 <_gp+0xffff78a8>
    c840:	003fc906 	br	c768 <_gp+0xffff7860>
    c844:	00800034 	movhi	r2,0
    c848:	10800004 	addi	r2,r2,0
    c84c:	10000f26 	beq	r2,zero,c88c <__call_exitprocs+0x160>
    c850:	99400117 	ldw	r5,4(r19)
    c854:	99000017 	ldw	r4,0(r19)
    c858:	2800091e 	bne	r5,zero,c880 <__call_exitprocs+0x154>
    c85c:	20000826 	beq	r4,zero,c880 <__call_exitprocs+0x154>
    c860:	89000015 	stw	r4,0(r17)
    c864:	a8000226 	beq	r21,zero,c870 <__call_exitprocs+0x144>
    c868:	a809883a 	mov	r4,r21
    c86c:	00000000 	call	0 <__reset-0x8000>
    c870:	9809883a 	mov	r4,r19
    c874:	00000000 	call	0 <__reset-0x8000>
    c878:	8cc00017 	ldw	r19,0(r17)
    c87c:	003fbd06 	br	c774 <_gp+0xffff786c>
    c880:	9823883a 	mov	r17,r19
    c884:	2027883a 	mov	r19,r4
    c888:	003fba06 	br	c774 <_gp+0xffff786c>
    c88c:	dfc00a17 	ldw	ra,40(sp)
    c890:	df000917 	ldw	fp,36(sp)
    c894:	ddc00817 	ldw	r23,32(sp)
    c898:	dd800717 	ldw	r22,28(sp)
    c89c:	dd400617 	ldw	r21,24(sp)
    c8a0:	dd000517 	ldw	r20,20(sp)
    c8a4:	dcc00417 	ldw	r19,16(sp)
    c8a8:	dc800317 	ldw	r18,12(sp)
    c8ac:	dc400217 	ldw	r17,8(sp)
    c8b0:	dc000117 	ldw	r16,4(sp)
    c8b4:	dec00b04 	addi	sp,sp,44
    c8b8:	f800283a 	ret

0000c8bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c8bc:	defffd04 	addi	sp,sp,-12
    c8c0:	df000215 	stw	fp,8(sp)
    c8c4:	df000204 	addi	fp,sp,8
    c8c8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    c8cc:	0001883a 	nop
    c8d0:	e0bfff17 	ldw	r2,-4(fp)
    c8d4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    c8d8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c8dc:	10000226 	beq	r2,zero,c8e8 <_exit+0x2c>
    ALT_SIM_FAIL();
    c8e0:	002af070 	cmpltui	zero,zero,43969
    c8e4:	00000106 	br	c8ec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    c8e8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c8ec:	003fff06 	br	c8ec <_gp+0xffff79e4>
