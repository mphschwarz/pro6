////////////////////////////////////////////////////////////////////////////////////////////
/*
ToDo:
- nr of bits beachten
- filter als Bestandzteil des Moduls
- Bits R W unterscheiden
- Test Offset SPI Read
*/
module SPI_HOST (
	input CLK,
	input SPI_CS,
	input SPI_CLK,
	input SPI_MOSI,
	input [255:0] DATA_IN,
	output SPI_MISO_ACTIV,
	output reg SPI_MISO,
	output reg [255:0] DATA_OUT,
	output reg DATA_READ,
	output reg DATA_WRITE,
	output reg [7:0] CMD,
	output reg [7:0] ADRESS,
	output reg [7:0] BYTES	
	);
	//
	reg [0:7] cmd_temp;// LSB
	reg [0:7] adress_temp;// LSB
	reg [0:7] bytes_temp;// LSB
	reg [255:0] data_in_temp;
	reg [255:0] data_out_temp;	
	reg [11:0] spi_clk_ctr;
	reg [11:0] i_cmd;
	reg [11:0] i_adr;
	reg [11:0] i_bytes;	
	reg [11:0] i_wait;
	reg [11:0] i_data_miso;
	reg [11:0] i_data_mosi;
	reg [11:0] i_data_offset;	
	reg [11:0] i_nr_of_bits;
	//
	reg		delay_data_in;
	reg		delay_data_out;	
	reg		spi_activ;
	reg		spi_activ_data;
	reg 	spi_cmd_read;
	reg		spi_cmd_write;
	reg		hri1; reg hri2; reg hri3; reg hri4;
	//
	wire	spi_cs_fe;
	wire	spi_cs_re;
	wire	clk_cs;
	wire	clk_cs_n;
	
	
	// Filter der Eingaenge
	wire spi_cs_filter;
	wire spi_clk_filter;
	wire spi_mosi_filter;	
	SPI_INP_FILTER spi_inp_filter_cs(CLK, SPI_CS, spi_cs_filter);
	SPI_INP_FILTER spi_inp_filter_clk(CLK, SPI_CLK, spi_clk_filter);
	SPI_INP_FILTER spi_inp_filter_mosi(CLK, SPI_MOSI, spi_mosi_filter);
	// Glue Logic
	assign SPI_MISO_ACTIV = !spi_cs_filter;
	assign spi_cs_re = (hri1 && !hri2);
	assign spi_cs_fe = (!hri1 && hri2);
	assign spi_clk_re = (hri3 && !hri4 && spi_activ);
	assign spi_clk_fe = (!hri3 && hri4 && spi_activ);
	//	
	initial
	begin
		SPI_MISO <= 0;
		DATA_READ <= 0;
		DATA_WRITE <= 0;
		CMD <= 0;
		ADRESS <= 0;
		BYTES <= 0;
		DATA_OUT <= 0;	
		//
		spi_activ <= 0;
		spi_activ_data <= 0;
		spi_cmd_read <= 0;
		spi_cmd_write <= 0;
		cmd_temp <= 0;
		adress_temp <= 0;
		bytes_temp <= 0;
		data_in_temp <= 0;
		data_out_temp <= 0;
		spi_clk_ctr <= 0;
		i_cmd <= 0;
		i_adr <= 0;
		i_bytes <= 0;
		i_wait <= 0;
		i_data_miso <= 0;
		i_data_mosi <= 0;
		i_data_offset <= 0;
		i_nr_of_bits <= 0;
		//
		delay_data_in <= 0;
		delay_data_out <= 0;
		//
		hri1 <= 0; hri2 <= 0; hri3 <= 0; hri4 <= 0;		
	end	
	//
	always	@(posedge CLK)
	begin
	//
	hri1 <= spi_cs_filter;
	hri2 <= hri1;			
	//
	if (spi_cs_fe) 
		begin
		spi_activ <= 1;
		spi_clk_ctr <= 0;
		cmd_temp <= 0;
		adress_temp <= 0;
		//data_out_temp <= 0;				
		i_cmd <= 0;
		i_adr <= 0;
		i_bytes <= 0;
		i_wait <= 0;
		i_data_miso <= 0;
		i_data_mosi <= 0;
		i_data_offset <= 0;
		i_nr_of_bits <= 0;
		delay_data_in <= 0;
		delay_data_out <= 0;
		end
	//
	// Counter SPI_CLK
	hri3 <= spi_clk_filter;
	hri4 <= hri3;
	if (spi_clk_re && (spi_clk_ctr < 288))
		begin
		spi_clk_ctr <= spi_clk_ctr + 1;
		end
	// SPI Kommunkation beendet
	if (spi_cs_re) 
		begin
		spi_activ <= 0;
		spi_activ_data <= 0;
		SPI_MISO <= 0;
		DATA_OUT <= data_out_temp;	
		delay_data_out <= 1;
		end
	//
	if (delay_data_in)
		begin
		DATA_READ <= 1;
		delay_data_in <= 0;
		end
	else
		DATA_READ <= 0;
	//
	if (delay_data_out)
		begin
		DATA_WRITE <= 1;
		delay_data_out <= 0;
		end
	else
		DATA_WRITE <= 0;
	// SPI Kommunikation aktiv
	if (spi_clk_re && spi_activ)
		begin
		// Kommando und Adresse ausgeben
		if ((spi_clk_ctr == 24))
			begin
			CMD <= cmd_temp;
			ADRESS <= adress_temp;
			BYTES <= bytes_temp;
			delay_data_in <= 1;
			end	
		if (spi_clk_ctr == 25) 
			begin
			spi_cmd_read <= CMD[0];
			spi_cmd_write <= CMD[1];			
			i_data_offset <= ADRESS * 8;
			i_nr_of_bits <= BYTES * 8;			
			end
		// Uebernahme der Inputdaten
		if (spi_clk_ctr == 29)
			begin
			data_in_temp <= DATA_IN;
			end
		// setze Flag SPI_MISO negedge clk
		if (spi_clk_ctr == 31)
			begin
			spi_activ_data <= 1;
			end
		// Kommandoword
		if (spi_clk_ctr < 8)
			begin
			cmd_temp[i_cmd] <= spi_mosi_filter;
			i_cmd <= i_cmd + 1;
			end
		//
		// Adresse
		else if (spi_clk_ctr < 16)
			begin	
			adress_temp[i_adr] <= spi_mosi_filter;
			i_adr <= i_adr + 1;
			end
		// Bytes
		else if (spi_clk_ctr < 24)
			begin	
			bytes_temp[i_bytes] <= spi_mosi_filter;
			i_bytes <= i_bytes + 1;
			end
		// wait Byte
		else if (spi_clk_ctr < 32)
			i_wait <= i_wait + 1;
		// Datenempfang
		else if (spi_clk_ctr < 288)
			begin
			if (spi_cmd_write && ((i_data_miso + i_data_offset) < 256) && (i_data_miso < i_nr_of_bits))
				data_out_temp[i_data_miso + i_data_offset] <= spi_mosi_filter;
			i_data_miso <= i_data_miso + 1;
			end
		end
		// Datenversand
		if (spi_clk_fe && spi_activ_data && (spi_clk_ctr < 288))
			begin
			if (spi_cmd_read && ((i_data_mosi + i_data_offset) < 256) && (i_data_mosi < i_nr_of_bits))
				SPI_MISO <= data_in_temp[i_data_mosi + i_data_offset];
			else
				SPI_MISO <= 0;
			i_data_mosi <= i_data_mosi + 1;
			end
		end
endmodule
////////////////////////////////////////////////////////////////////////////////////////////
//	Digitales Filter
// ToDo: mit Konstante
module	SPI_INP_FILTER (
	input CLK, IN,
	output reg OUT
	);
//
localparam FILTER = 4'd5;
//
reg [4:0] ctr0;
reg [4:0] ctr1;
//
initial
	begin
	OUT <= 0;
	ctr0 <= 0;
	ctr1 <= 0;
	end
always	@(posedge CLK)
begin
	if (IN && !OUT)
		begin
		ctr0 <= 0;
		ctr1 <= ctr1 + 1;
		end
	//	
	if (!IN && OUT)
		begin
		ctr0 <= ctr0 + 1;
		ctr1 <= 0;
		end	
	//
	if (ctr0 == FILTER)
		begin
		ctr0 <= 0;
		ctr1 <= 0;
		OUT <= 0;
		end
	//
	if (ctr1 == FILTER)
		begin
		ctr0 <= 0;
		ctr1 <= 0;
		OUT <= 1;
		end
	//	
	if (((ctr0 > 0) && IN) || ((ctr1 > 0) && !IN))
		begin
		ctr0 <= 0;
		ctr1 <= 0;
		end	
end
endmodule
////////////////////////////////////////////////////////////////////////////////////////////


